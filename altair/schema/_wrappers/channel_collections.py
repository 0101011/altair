# This file auto-generated by `generate_schema_interface.py`.
# Do not modify this file directly.

import traitlets as T
from .. import _interface as schema
from ..baseobject import BaseObject

from .named_channels import Color, Column, Detail, Label, Opacity, Order, Path, Row, Shape, Size, Text, X, Y


class Encoding(schema.Encoding):
    """Object for storing channel encodings

    Attributes
    ----------
    color: Color
        
    column: Column
        
    detail: Union(Detail, List(Detail))
        
    label: Label
        
    opacity: Opacity
        
    order: Union(Order, List(Order))
        
    path: Union(Path, List(Path))
        
    row: Row
        
    shape: Shape
        
    size: Size
        
    text: Text
        
    x: X
        
    y: Y
        
    """
    color = T.Instance(Color, allow_none=True, default_value=None)
    column = T.Instance(Column, allow_none=True, default_value=None)
    detail = T.Union([T.Instance(Detail, allow_none=True, default_value=None, help="""Interface for any kind of Detail."""), T.List(T.Instance(Detail, help="""Interface for any kind of Detail."""), allow_none=True, default_value=None)])
    label = T.Instance(Label, allow_none=True, default_value=None)
    opacity = T.Instance(Opacity, allow_none=True, default_value=None)
    order = T.Union([T.Instance(Order, allow_none=True, default_value=None), T.List(T.Instance(Order), allow_none=True, default_value=None)])
    path = T.Union([T.Instance(Path, allow_none=True, default_value=None), T.List(T.Instance(Path), allow_none=True, default_value=None)])
    row = T.Instance(Row, allow_none=True, default_value=None)
    shape = T.Instance(Shape, allow_none=True, default_value=None)
    size = T.Instance(Size, allow_none=True, default_value=None)
    text = T.Instance(Text, allow_none=True, default_value=None)
    x = T.Instance(X, allow_none=True, default_value=None)
    y = T.Instance(Y, allow_none=True, default_value=None)
    
    channel_names = ['color', 'column', 'detail', 'label', 'opacity', 'order', 'path', 'row', 'shape', 'size', 'text', 'x', 'y']
    parent = T.Instance(BaseObject, default_value=None, allow_none=True)

    skip = ['channel_names', 'parent']

    def _infer_types(self, data):
        for attr in self.channel_names:
            val = getattr(self, attr)
            if val is not None:
                val._infer_type(data)

    @T.observe(*channel_names)
    def _channel_changed(self, change):
        new = change['new']
        name = change['name']
        channel = getattr(self, name, None)
        if channel is not None and self.parent is not None and not getattr(channel, 'type', ''):
            meth = getattr(channel, '_infer_type', None)
            if meth is not None:
                meth(self.parent.data)


class Facet(schema.Facet):
    """Object for storing channel encodings

    Attributes
    ----------
    column: Column
        
    row: Row
        
    """
    column = T.Instance(Column, allow_none=True, default_value=None)
    row = T.Instance(Row, allow_none=True, default_value=None)
    
    channel_names = ['column', 'row']
    parent = T.Instance(BaseObject, default_value=None, allow_none=True)

    skip = ['channel_names', 'parent']

    def _infer_types(self, data):
        for attr in self.channel_names:
            val = getattr(self, attr)
            if val is not None:
                val._infer_type(data)

    @T.observe(*channel_names)
    def _channel_changed(self, change):
        new = change['new']
        name = change['name']
        channel = getattr(self, name, None)
        if channel is not None and self.parent is not None and not getattr(channel, 'type', ''):
            meth = getattr(channel, '_infer_type', None)
            if meth is not None:
                meth(self.parent.data)


