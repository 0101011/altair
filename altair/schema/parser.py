"""
This contains utilities to parse the vegalite schema and output low-level
Python wrappers.
"""
import json
import os


def read_vegalite_schema():
    """Read the vega-lite schema and return as a Python dict"""
    schema_file = os.path.join(os.path.dirname(__file__),
                               'vega-lite-schema.json')
    with open(schema_file) as f:
        schema = json.load(f)

    return schema


def format_help_string(help_str, summarize=True):
    if summarize:
        help_str = help_str.split('(e.g.')[0]
        help_str = help_str.split('.')[0]
    return '"""{0}."""'.format(help_str.rstrip())


CLASS_TEMPLATE = """
import traitlets as T

class {name}(T.HasTraits):"""

ATTRIBUTE_TEMPLATE = """
    {0} = {1}"""


def kwds_to_str(kwds):
    vals = ', '.join("{0}={1}".format(key, val)
                     for key, val in kwds.items()
                     if key != 'help')
    if 'help' in kwds:
        vals += ', help={0}'.format(kwds['help'])
    return vals


def type_attribute(attr_dict):
    kwds = {}
    kwds['allow_none'] = 'True'
    kwds['default_value'] = 'None'
    if 'description' in attr_dict:
        kwds['help'] = format_help_string(attr_dict['description'])

    tp = attr_dict["type"]

    if tp == "array":
        typename = any_attribute(attr_dict['items'])
        return "T.List({0}, {1})".format(typename, kwds_to_str(kwds))
    elif tp == "boolean":
        return "T.Bool({0})".format(kwds_to_str(kwds))
    elif tp == "number":
        if 'minimum' in attr_dict:
            kwds['min'] = attr_dict['minimum']
        if 'maximum' in attr_dict:
            kwds['max'] = attr_dict['maximum']
        return "T.CFloat({0})".format(kwds_to_str(kwds))
    elif tp == "string":
        return "T.Unicode({0})".format(kwds_to_str(kwds))
    elif tp == "object":
        return "T.Any({0})".format(kwds_to_str(kwds))
    else:
        raise NotImplementedError(tp)


def ref_attribute(attr_dict):
    kwds = {}
    kwds['allow_none'] = 'True'
    kwds['default_value'] = 'None'
    if 'description' in attr_dict:
        kwds['help'] = format_help_string(attr_dict['description'])

    pound, cls, name = attr_dict['$ref'].split('/')
    return "T.Instance({0}, {1})".format(name, kwds_to_str(kwds))


def oneof_attribute(attr_dict):
    types = (any_attribute(attr) for attr in attr_dict['oneOf'])
    return "T.Union([{0}])".format(', '.join(types))


def any_attribute(attr_dict):
    if 'type' in attr_dict:
        return type_attribute(attr_dict)
    elif '$ref' in attr_dict:
        return ref_attribute(attr_dict)
    elif 'oneOf' in attr_dict:
        return oneof_attribute(attr_dict)
    else:
        raise NotImplementedError('unrecognized keys')


def create_class(name, prop_dict):
    result = CLASS_TEMPLATE.format(name=name)
    result += ''.join(ATTRIBUTE_TEMPLATE.format(key, any_attribute(val))
                      for key, val in prop_dict.items())
    return result


def iter_classes():
    schema = read_vegalite_schema()
    for key, val in schema['definitions'].items():
        if val['type'] == 'object':
            yield key, create_class(key, val['properties'])
        elif val['type'] == 'string':
            pass
        else:
            raise NotImplementedError(val['type'])


def write_files(directory=None, verbose=True):
    if directory is None:
        directory = os.path.join(os.path.dirname(__file__), '_generated')

    if verbose:
        print("writing Python schema to {0}".format(directory))
    if not os.path.exists(directory):
        if verbose:
            print("creating directory {0}".format(directory))
        os.makedirs(directory)

    if verbose:
        print("creating __init__.py")
    with open(os.path.join(directory, '__init__.py'), 'w') as f:
        f.write('"""Auto-generated Python wrappers for vegalite schema"""')

    for name, code in iter_classes():
        filename = os.path.join(directory, '{0}.py'.format(name.lower()))
        if verbose:
            print("writing {0} to {1}".format(name, filename))
        with open(filename, 'w') as f:
            f.write("# This file auto-generated by "
                    "altair.schema.parser.write_files().\n"
                    "# do not modify directly.\n\n")
            f.write(code)
