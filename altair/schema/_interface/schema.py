# Auto-generated by altair_parser: do not modify file directly
# - parser version: 0.1.dev
# - date:    2017-07-19 14:16:38



import traitlets as T
from . import jstraitlets as jst


def _localname(name):
    """Construct an object name relative to the local module"""
    return "{0}.{1}".format(__name__, name)



class AggregateOp(jst.JSONEnum):
    """
    One of ['values', 'count', 'valid', 'missing', 'distinct', 'sum', 'mean', 'average', 'variance', 'variancep', 'stdev', 'stdevp', 'median', 'q1', 'q3', 'modeskew', 'min', 'max', 'argmin', 'argmax']
    """
    values = ['values', 'count', 'valid', 'missing', 'distinct', 'sum', 'mean', 'average', 'variance', 'variancep', 'stdev', 'stdevp', 'median', 'q1', 'q3', 'modeskew', 'min', 'max', 'argmin', 'argmax']
    def __init__(self, **kwargs):
        super(AggregateOp, self).__init__(self.values, **kwargs)


class AreaOverlay(jst.JSONEnum):
    """
    One of ['line', 'linepoint', 'none']
    """
    values = ['line', 'linepoint', 'none']
    def __init__(self, **kwargs):
        super(AreaOverlay, self).__init__(self.values, **kwargs)


class AxisOrient(jst.JSONEnum):
    """
    One of ['top', 'right', 'left', 'bottom']
    """
    values = ['top', 'right', 'left', 'bottom']
    def __init__(self, **kwargs):
        super(AxisOrient, self).__init__(self.values, **kwargs)


class BandSize(jst.JSONEnum):
    """
    One of ['fit']
    """
    values = ['fit']
    def __init__(self, **kwargs):
        super(BandSize, self).__init__(self.values, **kwargs)


class DataFormatType(jst.JSONEnum):
    """
    One of ['json', 'csv', 'tsv', 'topojson']
    """
    values = ['json', 'csv', 'tsv', 'topojson']
    def __init__(self, **kwargs):
        super(DataFormatType, self).__init__(self.values, **kwargs)


class FontStyle(jst.JSONEnum):
    """
    One of ['normal', 'italic']
    """
    values = ['normal', 'italic']
    def __init__(self, **kwargs):
        super(FontStyle, self).__init__(self.values, **kwargs)


class FontWeight(jst.JSONEnum):
    """
    One of ['normal', 'bold']
    """
    values = ['normal', 'bold']
    def __init__(self, **kwargs):
        super(FontWeight, self).__init__(self.values, **kwargs)


class HorizontalAlign(jst.JSONEnum):
    """
    One of ['left', 'right', 'center']
    """
    values = ['left', 'right', 'center']
    def __init__(self, **kwargs):
        super(HorizontalAlign, self).__init__(self.values, **kwargs)


class Interpolate(jst.JSONEnum):
    """
    One of ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    """
    values = ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    def __init__(self, **kwargs):
        super(Interpolate, self).__init__(self.values, **kwargs)


class Mark(jst.JSONEnum):
    """
    One of ['area', 'bar', 'line', 'point', 'text', 'tick', 'rule', 'circle', 'square', 'errorBar']
    """
    values = ['area', 'bar', 'line', 'point', 'text', 'tick', 'rule', 'circle', 'square', 'errorBar']
    def __init__(self, **kwargs):
        super(Mark, self).__init__(self.values, **kwargs)


class NiceTime(jst.JSONEnum):
    """
    One of ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    """
    values = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    def __init__(self, **kwargs):
        super(NiceTime, self).__init__(self.values, **kwargs)


class Orient(jst.JSONEnum):
    """
    One of ['horizontal', 'vertical']
    """
    values = ['horizontal', 'vertical']
    def __init__(self, **kwargs):
        super(Orient, self).__init__(self.values, **kwargs)


class ScaleType(jst.JSONEnum):
    """
    One of ['linear', 'log', 'pow', 'sqrt', 'quantile', 'quantize', 'ordinal', 'time', 'utc']
    """
    values = ['linear', 'log', 'pow', 'sqrt', 'quantile', 'quantize', 'ordinal', 'time', 'utc']
    def __init__(self, **kwargs):
        super(ScaleType, self).__init__(self.values, **kwargs)


class Shape(jst.JSONEnum):
    """
    One of ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down']
    """
    values = ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down']
    def __init__(self, **kwargs):
        super(Shape, self).__init__(self.values, **kwargs)


class SortOrder(jst.JSONEnum):
    """
    One of ['ascending', 'descending', 'none']
    """
    values = ['ascending', 'descending', 'none']
    def __init__(self, **kwargs):
        super(SortOrder, self).__init__(self.values, **kwargs)


class StackOffset(jst.JSONEnum):
    """
    One of ['zero', 'center', 'normalize', 'none']
    """
    values = ['zero', 'center', 'normalize', 'none']
    def __init__(self, **kwargs):
        super(StackOffset, self).__init__(self.values, **kwargs)


class TimeUnit(jst.JSONEnum):
    """
    One of ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds', 'quarter', 'yearquarter', 'quartermonth', 'yearquartermonth']
    """
    values = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds', 'quarter', 'yearquarter', 'quartermonth', 'yearquartermonth']
    def __init__(self, **kwargs):
        super(TimeUnit, self).__init__(self.values, **kwargs)


class Type(jst.JSONEnum):
    """
    One of ['quantitative', 'ordinal', 'temporal', 'nominal']
    """
    values = ['quantitative', 'ordinal', 'temporal', 'nominal']
    def __init__(self, **kwargs):
        super(Type, self).__init__(self.values, **kwargs)


class VerticalAlign(jst.JSONEnum):
    """
    One of ['top', 'middle', 'bottom']
    """
    values = ['top', 'middle', 'bottom']
    def __init__(self, **kwargs):
        super(VerticalAlign, self).__init__(self.values, **kwargs)


class Root(jst.AnyOfObject):
    _classes = (_localname('ExtendedUnitSpec'),_localname('FacetSpec'),_localname('LayerSpec'),)


class Axis(jst.JSONHasTraits):
    """Axis class

    

    Attributes
    ----------
    gridColor : string
        Color of gridlines.
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
    axisWidth : number
        Width of the axis line
    tickWidth : number
        The width, in pixels, of ticks.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description. By default, this is
        automatically based on cell size and characterWidth property.
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
    labelAlign : string
        Text alignment for the Label.
    tickLabelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    tickLabelFont : string
        The font of the tick label.
    layer : string
        A string indicating if the axis (and any gridlines) should be
        placed above or below the data marks.
    labelAngle : number
        The rotation angle of the axis labels.
    labelMaxLength : number
        Truncate labels that are too long.
    labelBaseline : string
        Text baseline for the label.
    subdivide : number
        If provided, sets the number of minor ticks between major
        ticks (the value 9 results in decimal subdivision). Only
        applicable for axes visualizing quantitative scales.
    grid : boolean
        A flag indicate if gridlines should be created in addition to
        ticks. If `grid` is unspecified, the default value is `true`
        for ROW and COL. For X and Y, the default value is `true` for
        quantitative and time fields and `false` otherwise.
    gridDash : array
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    ticks : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    tickLabelFontSize : number
        The font size of label, in pixels.
    tickSizeMajor : number
        The size, in pixels, of major ticks.
    titleOffset : number
        A title offset value for the axis.
    gridWidth : number
        The grid width, in pixels.
    shortTimeLabels : boolean
        Whether month and day names should be abbreviated.
    title : string
        A title for the axis. Shows field name and its function by
        default.
    titleFontSize : number
        Size of the title.
    values : object
        
    tickSize : number
        The size, in pixels, of major, minor and end ticks.
    axisColor : string
        Color of axis line.
    labels : boolean
        Enable or disable labels.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    tickSizeMinor : number
        The size, in pixels, of minor ticks.
    tickSizeEnd : number
        The size, in pixels, of end ticks.
    format : string
        The formatting pattern for axis labels.
    characterWidth : number
        Character width for automatically determining title max
        length.
    tickPadding : number
        The padding, in pixels, between ticks and text labels.
    titleFontWeight : string
        Weight of the title.
    properties : object
        Optional mark property definitions for custom axis styling.
    titleFont : string
        Font of the title.
    tickColor : string
        The color of the axis's tick.
    orient : object
        The orientation of the axis. One of top, bottom, left or
        right. The orientation can be used to further specialize the
        axis type (e.g., a y axis oriented for the right edge of the
        chart).
    """
    _additional_traits = True
    gridColor = jst.JSONString(help='Color of gridlines.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    axisWidth = jst.JSONNumber(help='Width of the axis line')
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]', minimum=0)
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1])')
    labelAlign = jst.JSONString(help='Text alignment for the Label.')
    tickLabelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    tickLabelFont = jst.JSONString(help='The font of the tick label.')
    layer = jst.JSONString(help='A string indicating if the axis (and any gridlines) should be [...]')
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels.')
    labelMaxLength = jst.JSONNumber(help='Truncate labels that are too long.', minimum=1)
    labelBaseline = jst.JSONString(help='Text baseline for the label.')
    subdivide = jst.JSONNumber(help='If provided, sets the number of minor ticks between major ticks [...]')
    grid = jst.JSONBoolean(help='A flag indicate if gridlines should be created in addition to [...]')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    ticks = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]', minimum=0)
    tickLabelFontSize = jst.JSONNumber(help='The font size of label, in pixels.')
    tickSizeMajor = jst.JSONNumber(help='The size, in pixels, of major ticks.', minimum=0)
    titleOffset = jst.JSONNumber(help='A title offset value for the axis.')
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month and day names should be abbreviated.')
    title = jst.JSONString(help='A title for the axis. Shows field name and its function by default.')
    titleFontSize = jst.JSONNumber(help='Size of the title.')
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))])
    tickSize = jst.JSONNumber(help='The size, in pixels, of major, minor and end ticks.', minimum=0)
    axisColor = jst.JSONString(help='Color of axis line.')
    labels = jst.JSONBoolean(help='Enable or disable labels.')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    tickSizeMinor = jst.JSONNumber(help='The size, in pixels, of minor ticks.', minimum=0)
    tickSizeEnd = jst.JSONNumber(help='The size, in pixels, of end ticks.', minimum=0)
    format = jst.JSONString(help='The formatting pattern for axis labels.')
    characterWidth = jst.JSONNumber(help='Character width for automatically determining title max length.')
    tickPadding = jst.JSONNumber(help='The padding, in pixels, between ticks and text labels.')
    titleFontWeight = jst.JSONString(help='Weight of the title.')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom axis styling.')
    titleFont = jst.JSONString(help='Font of the title.')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    orient = AxisOrient()

    def __init__(self, gridColor=jst.undefined, offset=jst.undefined, axisWidth=jst.undefined, tickWidth=jst.undefined, titleMaxLength=jst.undefined, gridOpacity=jst.undefined, labelAlign=jst.undefined, tickLabelColor=jst.undefined, tickLabelFont=jst.undefined, layer=jst.undefined, labelAngle=jst.undefined, labelMaxLength=jst.undefined, labelBaseline=jst.undefined, subdivide=jst.undefined, grid=jst.undefined, gridDash=jst.undefined, ticks=jst.undefined, tickLabelFontSize=jst.undefined, tickSizeMajor=jst.undefined, titleOffset=jst.undefined, gridWidth=jst.undefined, shortTimeLabels=jst.undefined, title=jst.undefined, titleFontSize=jst.undefined, values=jst.undefined, tickSize=jst.undefined, axisColor=jst.undefined, labels=jst.undefined, titleColor=jst.undefined, tickSizeMinor=jst.undefined, tickSizeEnd=jst.undefined, format=jst.undefined, characterWidth=jst.undefined, tickPadding=jst.undefined, titleFontWeight=jst.undefined, properties=jst.undefined, titleFont=jst.undefined, tickColor=jst.undefined, orient=jst.undefined, **kwargs):
        kwds = dict(gridColor=gridColor, offset=offset, axisWidth=axisWidth, tickWidth=tickWidth, titleMaxLength=titleMaxLength, gridOpacity=gridOpacity, labelAlign=labelAlign, tickLabelColor=tickLabelColor, tickLabelFont=tickLabelFont, layer=layer, labelAngle=labelAngle, labelMaxLength=labelMaxLength, labelBaseline=labelBaseline, subdivide=subdivide, grid=grid, gridDash=gridDash, ticks=ticks, tickLabelFontSize=tickLabelFontSize, tickSizeMajor=tickSizeMajor, titleOffset=titleOffset, gridWidth=gridWidth, shortTimeLabels=shortTimeLabels, title=title, titleFontSize=titleFontSize, values=values, tickSize=tickSize, axisColor=axisColor, labels=labels, titleColor=titleColor, tickSizeMinor=tickSizeMinor, tickSizeEnd=tickSizeEnd, format=format, characterWidth=characterWidth, tickPadding=tickPadding, titleFontWeight=titleFontWeight, properties=properties, titleFont=titleFont, tickColor=tickColor, orient=orient)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Axis, self).__init__(**kwargs)


class AxisConfig(jst.JSONHasTraits):
    """AxisConfig class

    

    Attributes
    ----------
    gridColor : string
        Color of gridlines.
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
    axisWidth : number
        Width of the axis line
    tickWidth : number
        The width, in pixels, of ticks.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description. By default, this is
        automatically based on cell size and characterWidth property.
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
    labelAlign : string
        Text alignment for the Label.
    tickLabelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    tickLabelFont : string
        The font of the tick label.
    layer : string
        A string indicating if the axis (and any gridlines) should be
        placed above or below the data marks.
    titleFontWeight : string
        Weight of the title.
    labelMaxLength : number
        Truncate labels that are too long.
    labels : boolean
        Enable or disable labels.
    subdivide : number
        If provided, sets the number of minor ticks between major
        ticks (the value 9 results in decimal subdivision). Only
        applicable for axes visualizing quantitative scales.
    gridDash : array
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    ticks : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    tickLabelFontSize : number
        The font size of label, in pixels.
    tickSizeMajor : number
        The size, in pixels, of major ticks.
    titleOffset : number
        A title offset value for the axis.
    gridWidth : number
        The grid width, in pixels.
    shortTimeLabels : boolean
        Whether month and day names should be abbreviated.
    titleFontSize : number
        Size of the title.
    tickSize : number
        The size, in pixels, of major, minor and end ticks.
    axisColor : string
        Color of axis line.
    labelBaseline : string
        Text baseline for the label.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    tickSizeEnd : number
        The size, in pixels, of end ticks.
    tickColor : string
        The color of the axis's tick.
    characterWidth : number
        Character width for automatically determining title max
        length.
    labelAngle : number
        The rotation angle of the axis labels.
    tickPadding : number
        The padding, in pixels, between ticks and text labels.
    properties : object
        Optional mark property definitions for custom axis styling.
    titleFont : string
        Font of the title.
    grid : boolean
        A flag indicate if gridlines should be created in addition to
        ticks. If `grid` is unspecified, the default value is `true`
        for ROW and COL. For X and Y, the default value is `true` for
        quantitative and time fields and `false` otherwise.
    tickSizeMinor : number
        The size, in pixels, of minor ticks.
    """
    _additional_traits = True
    gridColor = jst.JSONString(help='Color of gridlines.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    axisWidth = jst.JSONNumber(help='Width of the axis line')
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]', minimum=0)
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1])')
    labelAlign = jst.JSONString(help='Text alignment for the Label.')
    tickLabelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    tickLabelFont = jst.JSONString(help='The font of the tick label.')
    layer = jst.JSONString(help='A string indicating if the axis (and any gridlines) should be [...]')
    titleFontWeight = jst.JSONString(help='Weight of the title.')
    labelMaxLength = jst.JSONNumber(help='Truncate labels that are too long.', minimum=1)
    labels = jst.JSONBoolean(help='Enable or disable labels.')
    subdivide = jst.JSONNumber(help='If provided, sets the number of minor ticks between major ticks [...]')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    ticks = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]', minimum=0)
    tickLabelFontSize = jst.JSONNumber(help='The font size of label, in pixels.')
    tickSizeMajor = jst.JSONNumber(help='The size, in pixels, of major ticks.', minimum=0)
    titleOffset = jst.JSONNumber(help='A title offset value for the axis.')
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month and day names should be abbreviated.')
    titleFontSize = jst.JSONNumber(help='Size of the title.')
    tickSize = jst.JSONNumber(help='The size, in pixels, of major, minor and end ticks.', minimum=0)
    axisColor = jst.JSONString(help='Color of axis line.')
    labelBaseline = jst.JSONString(help='Text baseline for the label.')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    tickSizeEnd = jst.JSONNumber(help='The size, in pixels, of end ticks.', minimum=0)
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    characterWidth = jst.JSONNumber(help='Character width for automatically determining title max length.')
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels.')
    tickPadding = jst.JSONNumber(help='The padding, in pixels, between ticks and text labels.')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom axis styling.')
    titleFont = jst.JSONString(help='Font of the title.')
    grid = jst.JSONBoolean(help='A flag indicate if gridlines should be created in addition to [...]')
    tickSizeMinor = jst.JSONNumber(help='The size, in pixels, of minor ticks.', minimum=0)

    def __init__(self, gridColor=jst.undefined, offset=jst.undefined, axisWidth=jst.undefined, tickWidth=jst.undefined, titleMaxLength=jst.undefined, gridOpacity=jst.undefined, labelAlign=jst.undefined, tickLabelColor=jst.undefined, tickLabelFont=jst.undefined, layer=jst.undefined, titleFontWeight=jst.undefined, labelMaxLength=jst.undefined, labels=jst.undefined, subdivide=jst.undefined, gridDash=jst.undefined, ticks=jst.undefined, tickLabelFontSize=jst.undefined, tickSizeMajor=jst.undefined, titleOffset=jst.undefined, gridWidth=jst.undefined, shortTimeLabels=jst.undefined, titleFontSize=jst.undefined, tickSize=jst.undefined, axisColor=jst.undefined, labelBaseline=jst.undefined, titleColor=jst.undefined, tickSizeEnd=jst.undefined, tickColor=jst.undefined, characterWidth=jst.undefined, labelAngle=jst.undefined, tickPadding=jst.undefined, properties=jst.undefined, titleFont=jst.undefined, grid=jst.undefined, tickSizeMinor=jst.undefined, **kwargs):
        kwds = dict(gridColor=gridColor, offset=offset, axisWidth=axisWidth, tickWidth=tickWidth, titleMaxLength=titleMaxLength, gridOpacity=gridOpacity, labelAlign=labelAlign, tickLabelColor=tickLabelColor, tickLabelFont=tickLabelFont, layer=layer, titleFontWeight=titleFontWeight, labelMaxLength=labelMaxLength, labels=labels, subdivide=subdivide, gridDash=gridDash, ticks=ticks, tickLabelFontSize=tickLabelFontSize, tickSizeMajor=tickSizeMajor, titleOffset=titleOffset, gridWidth=gridWidth, shortTimeLabels=shortTimeLabels, titleFontSize=titleFontSize, tickSize=tickSize, axisColor=axisColor, labelBaseline=labelBaseline, titleColor=titleColor, tickSizeEnd=tickSizeEnd, tickColor=tickColor, characterWidth=characterWidth, labelAngle=labelAngle, tickPadding=tickPadding, properties=properties, titleFont=titleFont, grid=grid, tickSizeMinor=tickSizeMinor)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AxisConfig, self).__init__(**kwargs)


class Bin(jst.JSONHasTraits):
    """Bin class

    Binning properties or boolean flag for determining whether to bin
    data or not.

    Attributes
    ----------
    minstep : number
        A minimum allowable step size (particularly useful for integer
        values).
    step : number
        An exact step size to use between bins. If provided, options
        such as maxbins will be ignored.
    min : number
        The minimum bin value to consider. If unspecified, the minimum
        value of the specified field is used.
    base : number
        The number base to use for automatic bin determination
        (default is base 10).
    max : number
        The maximum bin value to consider. If unspecified, the maximum
        value of the specified field is used.
    maxbins : number
        Maximum number of bins.
    steps : array
        An array of allowable step sizes to choose from.
    div : array
        Scale factors indicating allowable subdivisions. The default
        value is [5, 2], which indicates that for base 10 numbers (the
        default base), the method may consider dividing bin sizes by 5
        and/or 2. For example, for an initial step size of 10, the
        method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1
        (= 10/(5*2)) might also satisfy the given constraints.
    """
    _additional_traits = True
    minstep = jst.JSONNumber(help='A minimum allowable step size (particularly useful for integer [...]')
    step = jst.JSONNumber(help='An exact step size to use between bins. If provided, options [...]')
    min = jst.JSONNumber(help='The minimum bin value to consider. If unspecified, the minimum [...]')
    base = jst.JSONNumber(help='The number base to use for automatic bin determination (default [...]')
    max = jst.JSONNumber(help='The maximum bin value to consider. If unspecified, the maximum [...]')
    maxbins = jst.JSONNumber(help='Maximum number of bins.', minimum=2)
    steps = jst.JSONArray(jst.JSONNumber(), help='An array of allowable step sizes to choose from.')
    div = jst.JSONArray(jst.JSONNumber(), help='Scale factors indicating allowable subdivisions. The default [...]')

    def __init__(self, minstep=jst.undefined, step=jst.undefined, min=jst.undefined, base=jst.undefined, max=jst.undefined, maxbins=jst.undefined, steps=jst.undefined, div=jst.undefined, **kwargs):
        kwds = dict(minstep=minstep, step=step, min=min, base=base, max=max, maxbins=maxbins, steps=steps, div=div)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Bin, self).__init__(**kwargs)


class CellConfig(jst.JSONHasTraits):
    """CellConfig class

    

    Attributes
    ----------
    strokeWidth : number
        The stroke width, in pixels.
    fillOpacity : number
        The fill opacity (value between [0,1]).
    height : number
        
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
    clip : boolean
        
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    strokeDash : array
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    stroke : string
        The stroke color.
    fill : string
        The fill color.
    width : number
        
    """
    _additional_traits = True
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]).')
    height = jst.JSONNumber()
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]).')
    clip = jst.JSONBoolean()
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    stroke = jst.JSONString(help='The stroke color.')
    fill = jst.JSONString(help='The fill color.')
    width = jst.JSONNumber()

    def __init__(self, strokeWidth=jst.undefined, fillOpacity=jst.undefined, height=jst.undefined, strokeOpacity=jst.undefined, clip=jst.undefined, strokeDashOffset=jst.undefined, strokeDash=jst.undefined, stroke=jst.undefined, fill=jst.undefined, width=jst.undefined, **kwargs):
        kwds = dict(strokeWidth=strokeWidth, fillOpacity=fillOpacity, height=height, strokeOpacity=strokeOpacity, clip=clip, strokeDashOffset=strokeDashOffset, strokeDash=strokeDash, stroke=stroke, fill=fill, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(CellConfig, self).__init__(**kwargs)


class ChannelDefWithLegend(jst.JSONHasTraits):
    """ChannelDefWithLegend class

    

    Attributes
    ----------
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    title : string
        Title for axis or legend.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    field : string
        Name of the field from which to pull a data value.
    legend : object
        
    scale : object
        
    sort : object
        
    """
    _additional_traits = True
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    title = jst.JSONString(help='Title for axis or legend.')
    type = Type()
    timeUnit = TimeUnit()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    legend = jst.JSONInstance(_localname('Legend'))
    scale = jst.JSONInstance(_localname('Scale'))
    sort = jst.JSONAnyOf([jst.JSONInstance(_localname('SortField')), SortOrder()])

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, title=jst.undefined, type=jst.undefined, timeUnit=jst.undefined, value=jst.undefined, field=jst.undefined, legend=jst.undefined, scale=jst.undefined, sort=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, title=title, type=type, timeUnit=timeUnit, value=value, field=field, legend=legend, scale=scale, sort=sort)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ChannelDefWithLegend, self).__init__(**kwargs)


class Config(jst.JSONHasTraits):
    """Config class

    

    Attributes
    ----------
    overlay : object
        Mark Overlay Config
    timeFormat : string
        Default datetime format for axis and legend labels. The format
        can be set directly on each axis and legend.
    cell : object
        Cell Config
    facet : object
        Facet Config
    countTitle : string
        Default axis and legend title for count fields.
    mark : object
        Mark Config
    numberFormat : string
        D3 Number format for axis labels and text tables. For example
        "s" for SI units.
    viewport : number
        The width and height of the on-screen viewport, in pixels. If
        necessary, clipping and scrolling will be applied.
    legend : object
        Legend Config
    background : string
        CSS color property to use as background of visualization.
        Default is `"transparent"`.
    axis : object
        Axis Config
    scale : object
        Scale Config
    """
    _additional_traits = True
    overlay = jst.JSONInstance(_localname('OverlayConfig'), help='Mark Overlay Config')
    timeFormat = jst.JSONString(help='Default datetime format for axis and legend labels. The format [...]')
    cell = jst.JSONInstance(_localname('CellConfig'), help='Cell Config')
    facet = jst.JSONInstance(_localname('FacetConfig'), help='Facet Config')
    countTitle = jst.JSONString(help='Default axis and legend title for count fields.')
    mark = jst.JSONInstance(_localname('MarkConfig'), help='Mark Config')
    numberFormat = jst.JSONString(help='D3 Number format for axis labels and text tables. For example [...]')
    viewport = jst.JSONNumber(help='The width and height of the on-screen viewport, in pixels. If [...]')
    legend = jst.JSONInstance(_localname('LegendConfig'), help='Legend Config')
    background = jst.JSONString(help='CSS color property to use as background of visualization. [...]')
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Axis Config')
    scale = jst.JSONInstance(_localname('ScaleConfig'), help='Scale Config')

    def __init__(self, overlay=jst.undefined, timeFormat=jst.undefined, cell=jst.undefined, facet=jst.undefined, countTitle=jst.undefined, mark=jst.undefined, numberFormat=jst.undefined, viewport=jst.undefined, legend=jst.undefined, background=jst.undefined, axis=jst.undefined, scale=jst.undefined, **kwargs):
        kwds = dict(overlay=overlay, timeFormat=timeFormat, cell=cell, facet=facet, countTitle=countTitle, mark=mark, numberFormat=numberFormat, viewport=viewport, legend=legend, background=background, axis=axis, scale=scale)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Config, self).__init__(**kwargs)


class Data(jst.JSONHasTraits):
    """Data class

    

    Attributes
    ----------
    format : object
        An object that specifies the format for the data file or
        values.
    values : array
        Pass array of objects instead of a url to a file.
    url : string
        A URL from which to load the data set. Use the format.type
        property
        to ensure the loaded data is correctly parsed.
    """
    _additional_traits = True
    format = jst.JSONInstance(_localname('DataFormat'), help='An object that specifies the format for the data file or values.')
    values = jst.JSONArray(jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True})), help='Pass array of objects instead of a url to a file.')
    url = jst.JSONString(help='A URL from which to load the data set. Use the format.type [...]')

    def __init__(self, format=jst.undefined, values=jst.undefined, url=jst.undefined, **kwargs):
        kwds = dict(format=format, values=values, url=url)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Data, self).__init__(**kwargs)


class DataFormat(jst.JSONHasTraits):
    """DataFormat class

    

    Attributes
    ----------
    type : object
        Type of input data: `"json"`, `"csv"`, `"tsv"`.
        The default format type is determined by the extension of the
        file url.
        If no extension is detected, `"json"` will be used by default.
    parse : object
        A collection of parsing instructions can be used to define the
        data types of string-valued attributes in the JSON file. Each
        instruction is a name-value pair, where the name is the name
        of the attribute, and the value is the desired data type (one
        of `"number"`, `"boolean"` or `"date"`). For example,
        `"parse": {"modified_on":"date"}` ensures that the
        `modified_on` value in each row of the input data is parsed as
        a Date value. (See Datalib's [`dl.read.types` method](https://
        github.com/vega/datalib/wiki/Import#dl_read_types) for more
        information.)
    property : string
        JSON only) The JSON property containing the desired data.
        This parameter can be used when the loaded JSON file may have
        surrounding structure or meta-data.
        For example `"property": "values.features"` is equivalent to
        retrieving `json.values.features`
        from the loaded JSON object.
    mesh : string
        The name of the TopoJSON object set to convert to a mesh.
        Similar to the `feature` option, `mesh` extracts a named
        TopoJSON object set.
        Unlike the `feature` option, the corresponding geo data is
        returned as a single, unified mesh instance, not as individual
        GeoJSON features.
        Extracting a mesh is useful for more efficiently drawing
        borders or other geographic elements that you do not need to
        associate with specific regions such as individual countries,
        states or counties.
    feature : string
        The name of the TopoJSON object set to convert to a GeoJSON
        feature collection.
        For example, in a map of the world, there may be an object set
        named `"countries"`.
        Using the feature property, we can extract this set and
        generate a GeoJSON feature object for each country.
    """
    _additional_traits = True
    type = DataFormatType()
    parse = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='A collection of parsing instructions can be used to define the [...]')
    property = jst.JSONString(help='JSON only) The JSON property containing the desired data. This [...]')
    mesh = jst.JSONString(help='The name of the TopoJSON object set to convert to a mesh. [...]')
    feature = jst.JSONString(help='The name of the TopoJSON object set to convert to a GeoJSON [...]')

    def __init__(self, type=jst.undefined, parse=jst.undefined, property=jst.undefined, mesh=jst.undefined, feature=jst.undefined, **kwargs):
        kwds = dict(type=type, parse=parse, property=property, mesh=mesh, feature=feature)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DataFormat, self).__init__(**kwargs)


class DateTime(jst.JSONHasTraits):
    """DateTime class

    Object for defining datetime in Vega-Lite Filter.
    If both month and quarter are provided, month has higher
    precedence.
    `day` cannot be combined with other date.
    We accept string for month and day names.

    Attributes
    ----------
    date : number
        Integer value representing the date from 1-31.
    month : ['number', 'string']
        One of: (1) integer value representing the month from
        `1`-`12`. `1` represents January;  (2) case-insensitive month
        name (e.g., `"January"`);  (3) case-insensitive, 3-character
        short month name (e.g., `"Jan"`).
    quarter : number
        Integer value representing the quarter of the year (from 1-4).
    hours : number
        Integer value representing the hour of day from 0-23.
    milliseconds : number
        Integer value representing millisecond segment of a time.
    day : ['number', 'string']
        Value representing the day of week.  This can be one of: (1)
        integer value -- `1` represents Monday; (2) case-insensitive
        day name (e.g., `"Monday"`);  (3) case-insensitive,
        3-character short day name (e.g., `"Mon"`).   <br/>
        **Warning:** A DateTime definition object with `day`** should
        not be combined with `year`, `quarter`, `month`, or `date`.
    seconds : number
        Integer value representing second segment of a time from 0-59.
    minutes : number
        Integer value representing minute segment of a time from 0-59.
    year : number
        Integer value representing the year.
    """
    _additional_traits = True
    date = jst.JSONNumber(help='Integer value representing the date from 1-31.', minimum=1, maximum=31)
    month = jst.JSONUnion([jst.JSONNumber(), jst.JSONString()], help='One of: (1) integer value representing the month from `1`-`12`. [...]')
    quarter = jst.JSONNumber(help='Integer value representing the quarter of the year (from 1-4).', minimum=1, maximum=4)
    hours = jst.JSONNumber(help='Integer value representing the hour of day from 0-23.', minimum=0, maximum=23)
    milliseconds = jst.JSONNumber(help='Integer value representing millisecond segment of a time.', minimum=0, maximum=999)
    day = jst.JSONUnion([jst.JSONNumber(), jst.JSONString()], help='Value representing the day of week. This can be one of: (1) [...]')
    seconds = jst.JSONNumber(help='Integer value representing second segment of a time from 0-59.', minimum=0, maximum=59)
    minutes = jst.JSONNumber(help='Integer value representing minute segment of a time from 0-59.', minimum=0, maximum=59)
    year = jst.JSONNumber(help='Integer value representing the year.')

    def __init__(self, date=jst.undefined, month=jst.undefined, quarter=jst.undefined, hours=jst.undefined, milliseconds=jst.undefined, day=jst.undefined, seconds=jst.undefined, minutes=jst.undefined, year=jst.undefined, **kwargs):
        kwds = dict(date=date, month=month, quarter=quarter, hours=hours, milliseconds=milliseconds, day=day, seconds=seconds, minutes=minutes, year=year)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DateTime, self).__init__(**kwargs)


class Encoding(jst.JSONHasTraits):
    """Encoding class

    

    Attributes
    ----------
    x2 : object
        X2 coordinates for ranged `bar`, `rule`, `area`
    y2 : object
        Y2 coordinates for ranged `bar`, `rule`, `area`
    column : object
        Horizontal facets for trellis plots.
    x : object
        X coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    label : object
        
    detail : object
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    opacity : object
        Opacity of the marks – either can be a value or in a range.
    shape : object
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
    text : object
        Text of the `text` mark.
    size : object
        Size of the mark.
        - For `point`, `square` and `circle`
        – the symbol size, or pixel area of the mark.
        - For `bar` and `tick` – the bar and tick's size.
        - For `text` – the text's font size.
        - Size is currently unsupported for `line` and `area`.
    path : object
        Order of data points in line marks.
    row : object
        Vertical facets for trellis plots.
    order : object
        Layer order for non-stacked marks, or stack order for stacked
        marks.
    y : object
        Y coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    color : object
        Color of the marks – either fill or stroke color based on mark
        type.
        (By default, fill color for `area`, `bar`, `tick`, `text`,
        `circle`, and `square` /
        stroke color for `line` and `point`.)
    """
    _additional_traits = True
    x2 = jst.JSONInstance(_localname('FieldDef'), help='X2 coordinates for ranged `bar`, `rule`, `area`')
    y2 = jst.JSONInstance(_localname('FieldDef'), help='Y2 coordinates for ranged `bar`, `rule`, `area`')
    column = jst.JSONInstance(_localname('PositionChannelDef'), help='Horizontal facets for trellis plots.')
    x = jst.JSONInstance(_localname('PositionChannelDef'), help='X coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    label = jst.JSONInstance(_localname('FieldDef'))
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    opacity = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Opacity of the marks – either can be a value or in a range.')
    shape = jst.JSONInstance(_localname('ChannelDefWithLegend'), help="The symbol's shape (only for `point` marks). The supported [...]")
    text = jst.JSONInstance(_localname('FieldDef'), help='Text of the `text` mark.')
    size = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Size of the mark. - For `point`, `square` and `circle` – the [...]')
    path = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Order of data points in line marks.')
    row = jst.JSONInstance(_localname('PositionChannelDef'), help='Vertical facets for trellis plots.')
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Layer order for non-stacked marks, or stack order for stacked marks.')
    y = jst.JSONInstance(_localname('PositionChannelDef'), help='Y coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    color = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Color of the marks – either fill or stroke color based on mark [...]')

    def __init__(self, x2=jst.undefined, y2=jst.undefined, column=jst.undefined, x=jst.undefined, label=jst.undefined, detail=jst.undefined, opacity=jst.undefined, shape=jst.undefined, text=jst.undefined, size=jst.undefined, path=jst.undefined, row=jst.undefined, order=jst.undefined, y=jst.undefined, color=jst.undefined, **kwargs):
        kwds = dict(x2=x2, y2=y2, column=column, x=x, label=label, detail=detail, opacity=opacity, shape=shape, text=text, size=size, path=path, row=row, order=order, y=y, color=color)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Encoding, self).__init__(**kwargs)


class EqualFilter(jst.JSONHasTraits):
    """EqualFilter class

    

    Attributes
    ----------
    timeUnit : object
        Time unit for the field to be filtered.
    equal : object
        Value that the field should be equal to.
    field : string
        Field to be filtered.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    equal = jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))], allow_undefined=False, help='Value that the field should be equal to.')
    field = jst.JSONString(allow_undefined=False, help='Field to be filtered.')

    def __init__(self, timeUnit=jst.undefined, equal=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, equal=equal, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(EqualFilter, self).__init__(**kwargs)


class ExtendedUnitSpec(jst.JSONHasTraits):
    """ExtendedUnitSpec class

    Schema for a unit Vega-Lite specification, with the syntactic
    sugar extensions:
    - `row` and `column` are included in the encoding.
    - (Future) label, box plot
    Note: the spec could contain facet.

    Attributes
    ----------
    transform : object
        An object describing filter and new field calculation.
    encoding : object
        A key-value mapping between encoding channels and definition
        of fields.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    mark : object
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    height : number
        
    config : object
        Configuration object
    data : object
        An object describing the data source
    width : number
        
    name : string
        Name of the visualization for later reference.
    """
    _additional_traits = True
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    encoding = jst.JSONInstance(_localname('Encoding'), help='A key-value mapping between encoding channels and definition of [...]')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    mark = Mark(allow_undefined=False)
    height = jst.JSONNumber()
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    width = jst.JSONNumber()
    name = jst.JSONString(help='Name of the visualization for later reference.')

    def __init__(self, transform=jst.undefined, encoding=jst.undefined, description=jst.undefined, mark=jst.undefined, height=jst.undefined, config=jst.undefined, data=jst.undefined, width=jst.undefined, name=jst.undefined, **kwargs):
        kwds = dict(transform=transform, encoding=encoding, description=description, mark=mark, height=height, config=config, data=data, width=width, name=name)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ExtendedUnitSpec, self).__init__(**kwargs)


class Facet(jst.JSONHasTraits):
    """Facet class

    

    Attributes
    ----------
    row : object
        
    column : object
        
    """
    _additional_traits = True
    row = jst.JSONInstance(_localname('PositionChannelDef'))
    column = jst.JSONInstance(_localname('PositionChannelDef'))

    def __init__(self, row=jst.undefined, column=jst.undefined, **kwargs):
        kwds = dict(row=row, column=column)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Facet, self).__init__(**kwargs)


class FacetConfig(jst.JSONHasTraits):
    """FacetConfig class

    

    Attributes
    ----------
    scale : object
        Facet Scale Config
    axis : object
        Facet Axis Config
    grid : object
        Facet Grid Config
    cell : object
        Facet Cell Config
    """
    _additional_traits = True
    scale = jst.JSONInstance(_localname('FacetScaleConfig'), help='Facet Scale Config')
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Facet Axis Config')
    grid = jst.JSONInstance(_localname('FacetGridConfig'), help='Facet Grid Config')
    cell = jst.JSONInstance(_localname('CellConfig'), help='Facet Cell Config')

    def __init__(self, scale=jst.undefined, axis=jst.undefined, grid=jst.undefined, cell=jst.undefined, **kwargs):
        kwds = dict(scale=scale, axis=axis, grid=grid, cell=cell)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetConfig, self).__init__(**kwargs)


class FacetGridConfig(jst.JSONHasTraits):
    """FacetGridConfig class

    

    Attributes
    ----------
    opacity : number
        
    offset : number
        
    color : string
        
    """
    _additional_traits = True
    opacity = jst.JSONNumber()
    offset = jst.JSONNumber()
    color = jst.JSONString()

    def __init__(self, opacity=jst.undefined, offset=jst.undefined, color=jst.undefined, **kwargs):
        kwds = dict(opacity=opacity, offset=offset, color=color)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetGridConfig, self).__init__(**kwargs)


class FacetScaleConfig(jst.JSONHasTraits):
    """FacetScaleConfig class

    

    Attributes
    ----------
    padding : number
        
    round : boolean
        
    """
    _additional_traits = True
    padding = jst.JSONNumber()
    round = jst.JSONBoolean()

    def __init__(self, padding=jst.undefined, round=jst.undefined, **kwargs):
        kwds = dict(padding=padding, round=round)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetScaleConfig, self).__init__(**kwargs)


class FacetSpec(jst.JSONHasTraits):
    """FacetSpec class

    

    Attributes
    ----------
    transform : object
        An object describing filter and new field calculation.
    spec : object
        
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    data : object
        An object describing the data source
    config : object
        Configuration object
    facet : object
        
    name : string
        Name of the visualization for later reference.
    """
    _additional_traits = True
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    spec = jst.JSONAnyOf([jst.JSONInstance(_localname('LayerSpec')), jst.JSONInstance(_localname('UnitSpec'))], allow_undefined=False)
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    facet = jst.JSONInstance(_localname('Facet'), allow_undefined=False)
    name = jst.JSONString(help='Name of the visualization for later reference.')

    def __init__(self, transform=jst.undefined, spec=jst.undefined, description=jst.undefined, data=jst.undefined, config=jst.undefined, facet=jst.undefined, name=jst.undefined, **kwargs):
        kwds = dict(transform=transform, spec=spec, description=description, data=data, config=config, facet=facet, name=name)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetSpec, self).__init__(**kwargs)


class FieldDef(jst.JSONHasTraits):
    """FieldDef class

    

    Attributes
    ----------
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    title : string
        Title for axis or legend.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    field : string
        Name of the field from which to pull a data value.
    """
    _additional_traits = True
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    title = jst.JSONString(help='Title for axis or legend.')
    type = Type()
    timeUnit = TimeUnit()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    field = jst.JSONString(help='Name of the field from which to pull a data value.')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, title=jst.undefined, type=jst.undefined, timeUnit=jst.undefined, value=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, title=title, type=type, timeUnit=timeUnit, value=value, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FieldDef, self).__init__(**kwargs)


class Formula(jst.JSONHasTraits):
    """Formula class

    Formula object for calculate.

    Attributes
    ----------
    expr : string
        A string containing an expression for the formula. Use the
        variable `datum` to to refer to the current data object.
    field : string
        The field in which to store the computed formula value.
    """
    _additional_traits = True
    expr = jst.JSONString(allow_undefined=False, help='A string containing an expression for the formula. Use the [...]')
    field = jst.JSONString(allow_undefined=False, help='The field in which to store the computed formula value.')

    def __init__(self, expr=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(expr=expr, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Formula, self).__init__(**kwargs)


class LayerSpec(jst.JSONHasTraits):
    """LayerSpec class

    

    Attributes
    ----------
    transform : object
        An object describing filter and new field calculation.
    layers : array
        Unit specs that will be layered.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    height : number
        
    config : object
        Configuration object
    data : object
        An object describing the data source
    width : number
        
    name : string
        Name of the visualization for later reference.
    """
    _additional_traits = True
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    layers = jst.JSONArray(jst.JSONInstance(_localname('UnitSpec')), allow_undefined=False, help='Unit specs that will be layered.')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    height = jst.JSONNumber()
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    width = jst.JSONNumber()
    name = jst.JSONString(help='Name of the visualization for later reference.')

    def __init__(self, transform=jst.undefined, layers=jst.undefined, description=jst.undefined, height=jst.undefined, config=jst.undefined, data=jst.undefined, width=jst.undefined, name=jst.undefined, **kwargs):
        kwds = dict(transform=transform, layers=layers, description=description, height=height, config=config, data=data, width=width, name=name)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LayerSpec, self).__init__(**kwargs)


class Legend(jst.JSONHasTraits):
    """Legend class

    

    Attributes
    ----------
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    labelFont : string
        The font of the legend label.
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    symbolShape : string
        The shape of the legend symbol, can be the 'circle', 'square',
        'cross', 'diamond',
        'triangle-up', 'triangle-down', or else a custom SVG path
        string.
    titleFontWeight : string
        The font weight of the legend title.
    margin : number
        The margin around the legend, in pixels
    padding : number
        The padding, in pixels, between the legend and axis.
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    gradientHeight : number
        The height of the gradient, in pixels.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    values : object
        Explicitly set the visible legend values.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    title : string
        A title for the legend. (Shows field name and its function by
        default.)
    labelOffset : number
        The offset of the legend label.
    titleFontSize : number
        The font size of the legend title.
    symbolColor : string
        The color of the legend symbol,
    symbolSize : number
        The size of the legend symbol, in pixels.
    titleColor : string
        Optional mark property definitions for custom legend styling.
        The color of the legend title, can be in hex color code or
        regular color name.
    gradientWidth : number
        The width of the gradient, in pixels.
    format : string
        An optional formatting pattern for legend labels. Vega uses
        D3\'s format pattern.
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    orient : string
        The orientation of the legend. One of "left" or "right". This
        determines how the legend is positioned within the scene. The
        default is "right".
    properties : object
        Optional mark property definitions for custom legend styling.
    titleFont : string
        The font of the legend title.
    labelFontSize : number
        The font size of legend label.
    """
    _additional_traits = True
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')
    labelFont = jst.JSONString(help='The font of the legend label.')
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    symbolShape = jst.JSONString(help="The shape of the legend symbol, can be the 'circle', 'square', [...]")
    titleFontWeight = jst.JSONString(help='The font weight of the legend title.')
    margin = jst.JSONNumber(help='The margin around the legend, in pixels')
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.')
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='Explicitly set the visible legend values.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    title = jst.JSONString(help='A title for the legend. (Shows field name and its function by [...]')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.')
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.')
    titleColor = jst.JSONString(help='Optional mark property definitions for custom legend styling. [...]')
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.')
    format = jst.JSONString(help='An optional formatting pattern for legend labels. Vega uses [...]')
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    orient = jst.JSONString(help='The orientation of the legend. One of "left" or "right". This [...]')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom legend styling.')
    titleFont = jst.JSONString(help='The font of the legend title.')
    labelFontSize = jst.JSONNumber(help='The font size of legend label.')

    def __init__(self, offset=jst.undefined, labelColor=jst.undefined, labelAlign=jst.undefined, labelFont=jst.undefined, symbolStrokeWidth=jst.undefined, symbolShape=jst.undefined, titleFontWeight=jst.undefined, margin=jst.undefined, padding=jst.undefined, labelBaseline=jst.undefined, gradientHeight=jst.undefined, gradientStrokeWidth=jst.undefined, values=jst.undefined, shortTimeLabels=jst.undefined, title=jst.undefined, labelOffset=jst.undefined, titleFontSize=jst.undefined, symbolColor=jst.undefined, symbolSize=jst.undefined, titleColor=jst.undefined, gradientWidth=jst.undefined, format=jst.undefined, gradientStrokeColor=jst.undefined, orient=jst.undefined, properties=jst.undefined, titleFont=jst.undefined, labelFontSize=jst.undefined, **kwargs):
        kwds = dict(offset=offset, labelColor=labelColor, labelAlign=labelAlign, labelFont=labelFont, symbolStrokeWidth=symbolStrokeWidth, symbolShape=symbolShape, titleFontWeight=titleFontWeight, margin=margin, padding=padding, labelBaseline=labelBaseline, gradientHeight=gradientHeight, gradientStrokeWidth=gradientStrokeWidth, values=values, shortTimeLabels=shortTimeLabels, title=title, labelOffset=labelOffset, titleFontSize=titleFontSize, symbolColor=symbolColor, symbolSize=symbolSize, titleColor=titleColor, gradientWidth=gradientWidth, format=format, gradientStrokeColor=gradientStrokeColor, orient=orient, properties=properties, titleFont=titleFont, labelFontSize=labelFontSize)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Legend, self).__init__(**kwargs)


class LegendConfig(jst.JSONHasTraits):
    """LegendConfig class

    

    Attributes
    ----------
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    labelFont : string
        The font of the legend label.
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    symbolShape : string
        The shape of the legend symbol, can be the 'circle', 'square',
        'cross', 'diamond',
        'triangle-up', 'triangle-down', or else a custom SVG path
        string.
    titleFontWeight : string
        The font weight of the legend title.
    margin : number
        The margin around the legend, in pixels
    padding : number
        The padding, in pixels, between the legend and axis.
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    gradientHeight : number
        The height of the gradient, in pixels.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    labelOffset : number
        The offset of the legend label.
    titleFontSize : number
        The font size of the legend title.
    symbolColor : string
        The color of the legend symbol,
    symbolSize : number
        The size of the legend symbol, in pixels.
    titleColor : string
        Optional mark property definitions for custom legend styling.
        The color of the legend title, can be in hex color code or
        regular color name.
    gradientWidth : number
        The width of the gradient, in pixels.
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    orient : string
        The orientation of the legend. One of "left" or "right". This
        determines how the legend is positioned within the scene. The
        default is "right".
    properties : object
        Optional mark property definitions for custom legend styling.
    titleFont : string
        The font of the legend title.
    labelFontSize : number
        The font size of legend label.
    """
    _additional_traits = True
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')
    labelFont = jst.JSONString(help='The font of the legend label.')
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    symbolShape = jst.JSONString(help="The shape of the legend symbol, can be the 'circle', 'square', [...]")
    titleFontWeight = jst.JSONString(help='The font weight of the legend title.')
    margin = jst.JSONNumber(help='The margin around the legend, in pixels')
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.')
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.')
    titleColor = jst.JSONString(help='Optional mark property definitions for custom legend styling. [...]')
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.')
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    orient = jst.JSONString(help='The orientation of the legend. One of "left" or "right". This [...]')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom legend styling.')
    titleFont = jst.JSONString(help='The font of the legend title.')
    labelFontSize = jst.JSONNumber(help='The font size of legend label.')

    def __init__(self, offset=jst.undefined, labelColor=jst.undefined, labelAlign=jst.undefined, labelFont=jst.undefined, symbolStrokeWidth=jst.undefined, symbolShape=jst.undefined, titleFontWeight=jst.undefined, margin=jst.undefined, padding=jst.undefined, labelBaseline=jst.undefined, gradientHeight=jst.undefined, gradientStrokeWidth=jst.undefined, shortTimeLabels=jst.undefined, labelOffset=jst.undefined, titleFontSize=jst.undefined, symbolColor=jst.undefined, symbolSize=jst.undefined, titleColor=jst.undefined, gradientWidth=jst.undefined, gradientStrokeColor=jst.undefined, orient=jst.undefined, properties=jst.undefined, titleFont=jst.undefined, labelFontSize=jst.undefined, **kwargs):
        kwds = dict(offset=offset, labelColor=labelColor, labelAlign=labelAlign, labelFont=labelFont, symbolStrokeWidth=symbolStrokeWidth, symbolShape=symbolShape, titleFontWeight=titleFontWeight, margin=margin, padding=padding, labelBaseline=labelBaseline, gradientHeight=gradientHeight, gradientStrokeWidth=gradientStrokeWidth, shortTimeLabels=shortTimeLabels, labelOffset=labelOffset, titleFontSize=titleFontSize, symbolColor=symbolColor, symbolSize=symbolSize, titleColor=titleColor, gradientWidth=gradientWidth, gradientStrokeColor=gradientStrokeColor, orient=orient, properties=properties, titleFont=titleFont, labelFontSize=labelFontSize)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LegendConfig, self).__init__(**kwargs)


class MarkConfig(jst.JSONHasTraits):
    """MarkConfig class

    

    Attributes
    ----------
    strokeWidth : number
        
    ruleSize : number
        Size of rule mark.
    barSize : number
        The size of the bars.  If unspecified, the default size is
        `bandSize-1`,
        which provides 1 pixel offset between bars.
    angle : number
        The rotation angle of the text, in degrees.
    font : string
        The typeface to set the text in (e.g., Helvetica Neue).
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
    opacity : number
        
    lineSize : number
        Size of line mark.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    align : object
        The horizontal alignment of the text. One of left, right,
        center.
    text : string
        Placeholder Text
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
    fillOpacity : number
        
    fontWeight : object
        The font weight (e.g., bold).
    fontSize : number
        The font size, in pixels.
    tickThickness : number
        Thickness of the tick mark.
    strokeDash : array
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    fontStyle : object
        The font style (e.g., italic).
    strokeOpacity : number
        
    stacked : object
        
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        angle property.
    tickSize : number
        The width of the ticks.
    applyColorToBackground : boolean
        Apply color field to background color instead of the text.
    shape : object
        The symbol shape to use. One of circle (default), square,
        cross, diamond, triangle-up, or triangle-down, or a custom SVG
        path.
    baseline : object
        The vertical alignment of the text. One of top, middle,
        bottom.
    tension : number
        Depending on the interpolation type, sets the tension
        parameter.
    interpolate : object
        The line interpolation method to use. One of linear, step-
        before, step-after, basis, basis-open, cardinal, cardinal-
        open, monotone.
    format : string
        The formatting pattern for text value. If not defined, this
        will be determined automatically.
    size : number
        The pixel area each the point. For example: in the case of
        circles, the radius is determined in part by the square root
        of the size value.
    orient : object
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    barThinSize : number
        The size of the bars on continuous scales.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the x and y properties.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        angle property.
    filled : boolean
        Whether the shape\'s color should be used as fill color
        instead of stroke color.
        This is only applicable for "bar", "point", and "area".
        All marks except "point" marks are filled by default.
        See Mark Documentation (http://vega.github.io/vega-
        lite/docs/marks.html)
        for usage example.
    color : string
        Default color.
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the x and y properties. Values for theta
        follow the same convention of arc mark startAngle and endAngle
        properties: angles are measured in radians, with 0 indicating
        "north".
    """
    _additional_traits = True
    strokeWidth = jst.JSONNumber(minimum=0)
    ruleSize = jst.JSONNumber(help='Size of rule mark.')
    barSize = jst.JSONNumber(help='The size of the bars. If unspecified, the default size is [...]')
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.')
    font = jst.JSONString(help='The typeface to set the text in (e.g., Helvetica Neue).')
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than config.color')
    opacity = jst.JSONNumber(minimum=0, maximum=1)
    lineSize = jst.JSONNumber(help='Size of line mark.')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    align = HorizontalAlign()
    text = jst.JSONString(help='Placeholder Text')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color')
    fillOpacity = jst.JSONNumber(minimum=0, maximum=1)
    fontWeight = FontWeight()
    fontSize = jst.JSONNumber(help='The font size, in pixels.')
    tickThickness = jst.JSONNumber(help='Thickness of the tick mark.')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    fontStyle = FontStyle()
    strokeOpacity = jst.JSONNumber(minimum=0, maximum=1)
    stacked = StackOffset()
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    tickSize = jst.JSONNumber(help='The width of the ticks.')
    applyColorToBackground = jst.JSONBoolean(help='Apply color field to background color instead of the text.')
    shape = jst.JSONAnyOf([Shape(), jst.JSONString()], help='The symbol shape to use. One of circle (default), square, cross, [...]')
    baseline = VerticalAlign()
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter.')
    interpolate = Interpolate()
    format = jst.JSONString(help='The formatting pattern for text value. If not defined, this will [...]')
    size = jst.JSONNumber(help='The pixel area each the point. For example: in the case of [...]')
    orient = Orient()
    barThinSize = jst.JSONNumber(help='The size of the bars on continuous scales.')
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    filled = jst.JSONBoolean(help="Whether the shape\\'s color should be used as fill color instead [...]")
    color = jst.JSONString(help='Default color.')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')

    def __init__(self, strokeWidth=jst.undefined, ruleSize=jst.undefined, barSize=jst.undefined, angle=jst.undefined, font=jst.undefined, stroke=jst.undefined, opacity=jst.undefined, lineSize=jst.undefined, strokeDashOffset=jst.undefined, align=jst.undefined, text=jst.undefined, fill=jst.undefined, fillOpacity=jst.undefined, fontWeight=jst.undefined, fontSize=jst.undefined, tickThickness=jst.undefined, strokeDash=jst.undefined, shortTimeLabels=jst.undefined, fontStyle=jst.undefined, strokeOpacity=jst.undefined, stacked=jst.undefined, dx=jst.undefined, tickSize=jst.undefined, applyColorToBackground=jst.undefined, shape=jst.undefined, baseline=jst.undefined, tension=jst.undefined, interpolate=jst.undefined, format=jst.undefined, size=jst.undefined, orient=jst.undefined, barThinSize=jst.undefined, radius=jst.undefined, dy=jst.undefined, filled=jst.undefined, color=jst.undefined, theta=jst.undefined, **kwargs):
        kwds = dict(strokeWidth=strokeWidth, ruleSize=ruleSize, barSize=barSize, angle=angle, font=font, stroke=stroke, opacity=opacity, lineSize=lineSize, strokeDashOffset=strokeDashOffset, align=align, text=text, fill=fill, fillOpacity=fillOpacity, fontWeight=fontWeight, fontSize=fontSize, tickThickness=tickThickness, strokeDash=strokeDash, shortTimeLabels=shortTimeLabels, fontStyle=fontStyle, strokeOpacity=strokeOpacity, stacked=stacked, dx=dx, tickSize=tickSize, applyColorToBackground=applyColorToBackground, shape=shape, baseline=baseline, tension=tension, interpolate=interpolate, format=format, size=size, orient=orient, barThinSize=barThinSize, radius=radius, dy=dy, filled=filled, color=color, theta=theta)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MarkConfig, self).__init__(**kwargs)


class OneOfFilter(jst.JSONHasTraits):
    """OneOfFilter class

    

    Attributes
    ----------
    timeUnit : object
        time unit for the field to be filtered.
    oneOf : array
        A set of values that the `field`'s value should be a member
        of,
        for a data item included in the filtered data.
    field : string
        Field to be filtered
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    oneOf = jst.JSONArray(jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))]), allow_undefined=False, help="A set of values that the `field`'s value should be a member of, [...]")
    field = jst.JSONString(allow_undefined=False, help='Field to be filtered')

    def __init__(self, timeUnit=jst.undefined, oneOf=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, oneOf=oneOf, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OneOfFilter, self).__init__(**kwargs)


class OrderChannelDef(jst.JSONHasTraits):
    """OrderChannelDef class

    

    Attributes
    ----------
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    title : string
        Title for axis or legend.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    sort : object
        
    field : string
        Name of the field from which to pull a data value.
    """
    _additional_traits = True
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    title = jst.JSONString(help='Title for axis or legend.')
    type = Type()
    timeUnit = TimeUnit()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    sort = SortOrder()
    field = jst.JSONString(help='Name of the field from which to pull a data value.')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, title=jst.undefined, type=jst.undefined, timeUnit=jst.undefined, value=jst.undefined, sort=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, title=title, type=type, timeUnit=timeUnit, value=value, sort=sort, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OrderChannelDef, self).__init__(**kwargs)


class OverlayConfig(jst.JSONHasTraits):
    """OverlayConfig class

    

    Attributes
    ----------
    line : boolean
        Whether to overlay line with point.
    area : object
        Type of overlay for area mark (line or linepoint)
    pointStyle : object
        Default style for the overlayed point.
    lineStyle : object
        Default style for the overlayed point.
    """
    _additional_traits = True
    line = jst.JSONBoolean(help='Whether to overlay line with point.')
    area = AreaOverlay()
    pointStyle = jst.JSONInstance(_localname('MarkConfig'), help='Default style for the overlayed point.')
    lineStyle = jst.JSONInstance(_localname('MarkConfig'), help='Default style for the overlayed point.')

    def __init__(self, line=jst.undefined, area=jst.undefined, pointStyle=jst.undefined, lineStyle=jst.undefined, **kwargs):
        kwds = dict(line=line, area=area, pointStyle=pointStyle, lineStyle=lineStyle)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OverlayConfig, self).__init__(**kwargs)


class PositionChannelDef(jst.JSONHasTraits):
    """PositionChannelDef class

    

    Attributes
    ----------
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    title : string
        Title for axis or legend.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    scale : object
        
    sort : object
        
    axis : object
        
    field : string
        Name of the field from which to pull a data value.
    """
    _additional_traits = True
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    title = jst.JSONString(help='Title for axis or legend.')
    type = Type()
    timeUnit = TimeUnit()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    scale = jst.JSONInstance(_localname('Scale'))
    sort = jst.JSONAnyOf([jst.JSONInstance(_localname('SortField')), SortOrder()])
    axis = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Axis'))])
    field = jst.JSONString(help='Name of the field from which to pull a data value.')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, title=jst.undefined, type=jst.undefined, timeUnit=jst.undefined, value=jst.undefined, scale=jst.undefined, sort=jst.undefined, axis=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, title=title, type=type, timeUnit=timeUnit, value=value, scale=scale, sort=sort, axis=axis, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(PositionChannelDef, self).__init__(**kwargs)


class RangeFilter(jst.JSONHasTraits):
    """RangeFilter class

    

    Attributes
    ----------
    timeUnit : object
        time unit for the field to be filtered.
    range : array
        Array of inclusive minimum and maximum values
        for a field value of a data item to be included in the
        filtered data.
    field : string
        Field to be filtered
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    range = jst.JSONArray(jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(_localname('DateTime'))]), allow_undefined=False, help='Array of inclusive minimum and maximum values for a field value [...]', minlen=2, maxlen=2)
    field = jst.JSONString(allow_undefined=False, help='Field to be filtered')

    def __init__(self, timeUnit=jst.undefined, range=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, range=range, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(RangeFilter, self).__init__(**kwargs)


class Scale(jst.JSONHasTraits):
    """Scale class

    

    Attributes
    ----------
    type : object
        
    padding : number
        Applies spacing among ordinal elements in the scale range. The
        actual effect depends on how the scale is configured. If the
        __points__ parameter is `true`, the padding value is
        interpreted as a multiple of the spacing between points. A
        reasonable value is 1.0, such that the first and last point
        will be offset from the minimum and maximum value by half the
        distance between points. Otherwise, padding is typically in
        the range [0, 1] and corresponds to the fraction of space in
        the range interval to allocate to padding. A value of 0.5
        means that the range band width will be equal to the padding
        width. For more, see the [D3 ordinal scale
        documentation](https://github.com/mbostock/d3/wiki/Ordinal-
        Scales).
    exponent : number
        Sets the exponent of the scale transformation. For pow scale
        types only, otherwise ignored.
    useRawDomain : boolean
        Uses the source data range as scale domain instead of
        aggregated data for aggregate axis.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"stdev"`, `"stdevp"`, `"median"`, `"q1"`, `"q3"`, `"min"`,
        `"max"`). For other aggregations that produce values outside
        of the raw data domain (e.g. `"count"`, `"sum"`), this
        property is ignored.
    clamp : boolean
        If true, values that exceed the data domain are clamped to
        either the minimum or maximum range value
    nice : object
        If specified, modifies the scale domain to use a more human-
        friendly value range. If specified as a true boolean, modifies
        the scale domain to use a more human-friendly number range
        (e.g., 7 instead of 6.96). If specified as a string, modifies
        the scale domain to use a more human-friendly value range. For
        time and utc scale types only, the nice value should be a
        string indicating the desired time interval.
    zero : boolean
        If `true`, ensures that a zero baseline value is included in
        the scale domain.
        Default value: `true` for `x` and `y` channel if the
        quantitative field is not binned
        and no custom `domain` is provided; `false` otherwise.
    domain : object
        The domain of the scale, representing the set of data values.
        For quantitative data, this can take the form of a two-element
        array with minimum and maximum values. For ordinal/categorical
        data, this may be an array of valid input values.
    range : object
        The range of the scale, representing the set of visual values.
        For numeric values, the range can take the form of a two-
        element array with minimum and maximum values. For ordinal or
        quantized data, the range may by an array of desired output
        values, which are mapped to elements in the specified domain.
        For ordinal scales only, the range can be defined using a
        DataRef: the range values are then drawn dynamically from a
        backing data set.
    bandSize : object
        
    round : boolean
        If true, rounds numeric output values to integers. This can be
        helpful for snapping to the pixel grid.
    """
    _additional_traits = True
    type = ScaleType()
    padding = jst.JSONNumber(help='Applies spacing among ordinal elements in the scale range. The [...]')
    exponent = jst.JSONNumber(help='Sets the exponent of the scale transformation. For pow scale [...]')
    useRawDomain = jst.JSONBoolean(help='Uses the source data range as scale domain instead of aggregated [...]')
    clamp = jst.JSONBoolean(help='If true, values that exceed the data domain are clamped to [...]')
    nice = jst.JSONAnyOf([jst.JSONBoolean(), NiceTime()], help='If specified, modifies the scale domain to use a more human- [...]')
    zero = jst.JSONBoolean(help='If `true`, ensures that a zero baseline value is included in the [...]')
    domain = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='The domain of the scale, representing the set of data values. [...]')
    range = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString())], help='The range of the scale, representing the set of visual values. [...]')
    bandSize = jst.JSONAnyOf([jst.JSONNumber(), BandSize()])
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')

    def __init__(self, type=jst.undefined, padding=jst.undefined, exponent=jst.undefined, useRawDomain=jst.undefined, clamp=jst.undefined, nice=jst.undefined, zero=jst.undefined, domain=jst.undefined, range=jst.undefined, bandSize=jst.undefined, round=jst.undefined, **kwargs):
        kwds = dict(type=type, padding=padding, exponent=exponent, useRawDomain=useRawDomain, clamp=clamp, nice=nice, zero=zero, domain=domain, range=range, bandSize=bandSize, round=round)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Scale, self).__init__(**kwargs)


class ScaleConfig(jst.JSONHasTraits):
    """ScaleConfig class

    

    Attributes
    ----------
    opacity : array
        Default range for opacity.
    useRawDomain : boolean
        Uses the source data range as scale domain instead of
        aggregated data for aggregate axis.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"stdev"`, `"stdevp"`, `"median"`, `"q1"`, `"q3"`, `"min"`,
        `"max"`). For other aggregations that produce values outside
        of the raw data domain (e.g. `"count"`, `"sum"`), this
        property is ignored.
    fontSizeRange : array
        Default range for font size scale
    padding : number
        Default padding for `x` and `y` ordinal scales.
    tickSizeRange : array
        Default range for tick spans
    round : boolean
        If true, rounds numeric output values to integers.
        This can be helpful for snapping to the pixel grid.
        (Only available for `x`, `y`, `size`, `row`, and `column`
        scales.)
    bandSize : object
        Default band size for (1) `y` ordinal scale,
        and (2) `x` ordinal scale when the mark is not `text`.
    barSizeRange : array
        Default range for bar size scale
    shapeRange : object
        Default range for shape
    sequentialColorRange : object
        Default range for ordinal / continuous color scale
    textBandWidth : number
        Default band width for `x` ordinal scale when is mark is
        `text`.
    nominalColorRange : object
        Default range for nominal color scale
    ruleSizeRange : array
        Default range for rule stroke widths
    pointSizeRange : array
        Default range for bar size scale
    """
    _additional_traits = True
    opacity = jst.JSONArray(jst.JSONNumber(), help='Default range for opacity.')
    useRawDomain = jst.JSONBoolean(help='Uses the source data range as scale domain instead of aggregated [...]')
    fontSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for font size scale')
    padding = jst.JSONNumber(help='Default padding for `x` and `y` ordinal scales.')
    tickSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for tick spans')
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')
    bandSize = jst.JSONAnyOf([jst.JSONNumber(), BandSize()], help='Default band size for (1) `y` ordinal scale, and (2) `x` ordinal [...]')
    barSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for bar size scale')
    shapeRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for shape')
    sequentialColorRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for ordinal / continuous color scale')
    textBandWidth = jst.JSONNumber(help='Default band width for `x` ordinal scale when is mark is `text`.', minimum=0)
    nominalColorRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for nominal color scale')
    ruleSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for rule stroke widths')
    pointSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for bar size scale')

    def __init__(self, opacity=jst.undefined, useRawDomain=jst.undefined, fontSizeRange=jst.undefined, padding=jst.undefined, tickSizeRange=jst.undefined, round=jst.undefined, bandSize=jst.undefined, barSizeRange=jst.undefined, shapeRange=jst.undefined, sequentialColorRange=jst.undefined, textBandWidth=jst.undefined, nominalColorRange=jst.undefined, ruleSizeRange=jst.undefined, pointSizeRange=jst.undefined, **kwargs):
        kwds = dict(opacity=opacity, useRawDomain=useRawDomain, fontSizeRange=fontSizeRange, padding=padding, tickSizeRange=tickSizeRange, round=round, bandSize=bandSize, barSizeRange=barSizeRange, shapeRange=shapeRange, sequentialColorRange=sequentialColorRange, textBandWidth=textBandWidth, nominalColorRange=nominalColorRange, ruleSizeRange=ruleSizeRange, pointSizeRange=pointSizeRange)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ScaleConfig, self).__init__(**kwargs)


class SortField(jst.JSONHasTraits):
    """SortField class

    

    Attributes
    ----------
    op : object
        The sort aggregation operator
    field : string
        The field name to aggregate over.
    order : object
        
    """
    _additional_traits = True
    op = AggregateOp(allow_undefined=False)
    field = jst.JSONString(allow_undefined=False, help='The field name to aggregate over.')
    order = SortOrder()

    def __init__(self, op=jst.undefined, field=jst.undefined, order=jst.undefined, **kwargs):
        kwds = dict(op=op, field=field, order=order)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SortField, self).__init__(**kwargs)


class Transform(jst.JSONHasTraits):
    """Transform class

    

    Attributes
    ----------
    filterInvalid : boolean
        Whether to filter invalid values (`null` and `NaN`) from the
        data. By default (`undefined`), only quantitative and temporal
        fields are filtered. If set to `true`, all data items with
        null values are filtered. If `false`, all data items are
        included.
    filter : object
        A string containing the filter Vega expression. Use `datum` to
        refer to the current data object.
    calculate : array
        Calculate new field(s) using the provided expresssion(s).
        Calculation are applied before filter.
    """
    _additional_traits = True
    filterInvalid = jst.JSONBoolean(help='Whether to filter invalid values (`null` and `NaN`) from the [...]')
    filter = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter')), jst.JSONArray(jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter'))]))], help='A string containing the filter Vega expression. Use `datum` to [...]')
    calculate = jst.JSONArray(jst.JSONInstance(_localname('Formula')), help='Calculate new field(s) using the provided expresssion(s). [...]')

    def __init__(self, filterInvalid=jst.undefined, filter=jst.undefined, calculate=jst.undefined, **kwargs):
        kwds = dict(filterInvalid=filterInvalid, filter=filter, calculate=calculate)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Transform, self).__init__(**kwargs)


class UnitEncoding(jst.JSONHasTraits):
    """UnitEncoding class

    

    Attributes
    ----------
    x2 : object
        X2 coordinates for ranged `bar`, `rule`, `area`
    y2 : object
        Y2 coordinates for ranged `bar`, `rule`, `area`
    label : object
        
    detail : object
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    opacity : object
        Opacity of the marks – either can be a value or in a range.
    shape : object
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
    x : object
        X coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    size : object
        Size of the mark.
        - For `point`, `square` and `circle`
        – the symbol size, or pixel area of the mark.
        - For `bar` and `tick` – the bar and tick's size.
        - For `text` – the text's font size.
        - Size is currently unsupported for `line` and `area`.
    text : object
        Text of the `text` mark.
    order : object
        Layer order for non-stacked marks, or stack order for stacked
        marks.
    y : object
        Y coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    color : object
        Color of the marks – either fill or stroke color based on mark
        type.
        (By default, fill color for `area`, `bar`, `tick`, `text`,
        `circle`, and `square` /
        stroke color for `line` and `point`.)
    path : object
        Order of data points in line marks.
    """
    _additional_traits = True
    x2 = jst.JSONInstance(_localname('FieldDef'), help='X2 coordinates for ranged `bar`, `rule`, `area`')
    y2 = jst.JSONInstance(_localname('FieldDef'), help='Y2 coordinates for ranged `bar`, `rule`, `area`')
    label = jst.JSONInstance(_localname('FieldDef'))
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    opacity = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Opacity of the marks – either can be a value or in a range.')
    shape = jst.JSONInstance(_localname('ChannelDefWithLegend'), help="The symbol's shape (only for `point` marks). The supported [...]")
    x = jst.JSONInstance(_localname('PositionChannelDef'), help='X coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    size = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Size of the mark. - For `point`, `square` and `circle` – the [...]')
    text = jst.JSONInstance(_localname('FieldDef'), help='Text of the `text` mark.')
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Layer order for non-stacked marks, or stack order for stacked marks.')
    y = jst.JSONInstance(_localname('PositionChannelDef'), help='Y coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    color = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Color of the marks – either fill or stroke color based on mark [...]')
    path = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Order of data points in line marks.')

    def __init__(self, x2=jst.undefined, y2=jst.undefined, label=jst.undefined, detail=jst.undefined, opacity=jst.undefined, shape=jst.undefined, x=jst.undefined, size=jst.undefined, text=jst.undefined, order=jst.undefined, y=jst.undefined, color=jst.undefined, path=jst.undefined, **kwargs):
        kwds = dict(x2=x2, y2=y2, label=label, detail=detail, opacity=opacity, shape=shape, x=x, size=size, text=text, order=order, y=y, color=color, path=path)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UnitEncoding, self).__init__(**kwargs)


class UnitSpec(jst.JSONHasTraits):
    """UnitSpec class

    

    Attributes
    ----------
    transform : object
        An object describing filter and new field calculation.
    encoding : object
        A key-value mapping between encoding channels and definition
        of fields.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    mark : object
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    height : number
        
    config : object
        Configuration object
    data : object
        An object describing the data source
    width : number
        
    name : string
        Name of the visualization for later reference.
    """
    _additional_traits = True
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    encoding = jst.JSONInstance(_localname('UnitEncoding'), help='A key-value mapping between encoding channels and definition of [...]')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    mark = Mark(allow_undefined=False)
    height = jst.JSONNumber()
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    width = jst.JSONNumber()
    name = jst.JSONString(help='Name of the visualization for later reference.')

    def __init__(self, transform=jst.undefined, encoding=jst.undefined, description=jst.undefined, mark=jst.undefined, height=jst.undefined, config=jst.undefined, data=jst.undefined, width=jst.undefined, name=jst.undefined, **kwargs):
        kwds = dict(transform=transform, encoding=encoding, description=description, mark=mark, height=height, config=config, data=data, width=width, name=name)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UnitSpec, self).__init__(**kwargs)
