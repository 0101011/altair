# Auto-generated by altair_parser: do not modify file directly
# - parser version: 0.1.dev
# - date:    2017-07-19 08:58:59



import traitlets as T
from . import jstraitlets as jst


def _localname(name):
    """Construct an object name relative to the local module"""
    return "{0}.{1}".format(__name__, name)



class AggregateOp(jst.JSONEnum):
    """
    One of ['values', 'count', 'valid', 'missing', 'distinct', 'sum', 'mean', 'average', 'variance', 'variancep', 'stdev', 'stdevp', 'median', 'q1', 'q3', 'modeskew', 'min', 'max', 'argmin', 'argmax']
    """
    values = ['values', 'count', 'valid', 'missing', 'distinct', 'sum', 'mean', 'average', 'variance', 'variancep', 'stdev', 'stdevp', 'median', 'q1', 'q3', 'modeskew', 'min', 'max', 'argmin', 'argmax']
    def __init__(self, **kwargs):
        super(AggregateOp, self).__init__(self.values, **kwargs)


class AreaOverlay(jst.JSONEnum):
    """
    One of ['line', 'linepoint', 'none']
    """
    values = ['line', 'linepoint', 'none']
    def __init__(self, **kwargs):
        super(AreaOverlay, self).__init__(self.values, **kwargs)


class AxisOrient(jst.JSONEnum):
    """
    One of ['top', 'right', 'left', 'bottom']
    """
    values = ['top', 'right', 'left', 'bottom']
    def __init__(self, **kwargs):
        super(AxisOrient, self).__init__(self.values, **kwargs)


class BandSize(jst.JSONEnum):
    """
    One of ['fit']
    """
    values = ['fit']
    def __init__(self, **kwargs):
        super(BandSize, self).__init__(self.values, **kwargs)


class DataFormatType(jst.JSONEnum):
    """
    One of ['json', 'csv', 'tsv', 'topojson']
    """
    values = ['json', 'csv', 'tsv', 'topojson']
    def __init__(self, **kwargs):
        super(DataFormatType, self).__init__(self.values, **kwargs)


class FontStyle(jst.JSONEnum):
    """
    One of ['normal', 'italic']
    """
    values = ['normal', 'italic']
    def __init__(self, **kwargs):
        super(FontStyle, self).__init__(self.values, **kwargs)


class FontWeight(jst.JSONEnum):
    """
    One of ['normal', 'bold']
    """
    values = ['normal', 'bold']
    def __init__(self, **kwargs):
        super(FontWeight, self).__init__(self.values, **kwargs)


class HorizontalAlign(jst.JSONEnum):
    """
    One of ['left', 'right', 'center']
    """
    values = ['left', 'right', 'center']
    def __init__(self, **kwargs):
        super(HorizontalAlign, self).__init__(self.values, **kwargs)


class Interpolate(jst.JSONEnum):
    """
    One of ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    """
    values = ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    def __init__(self, **kwargs):
        super(Interpolate, self).__init__(self.values, **kwargs)


class Mark(jst.JSONEnum):
    """
    One of ['area', 'bar', 'line', 'point', 'text', 'tick', 'rule', 'circle', 'square', 'errorBar']
    """
    values = ['area', 'bar', 'line', 'point', 'text', 'tick', 'rule', 'circle', 'square', 'errorBar']
    def __init__(self, **kwargs):
        super(Mark, self).__init__(self.values, **kwargs)


class NiceTime(jst.JSONEnum):
    """
    One of ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    """
    values = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    def __init__(self, **kwargs):
        super(NiceTime, self).__init__(self.values, **kwargs)


class Orient(jst.JSONEnum):
    """
    One of ['horizontal', 'vertical']
    """
    values = ['horizontal', 'vertical']
    def __init__(self, **kwargs):
        super(Orient, self).__init__(self.values, **kwargs)


class ScaleType(jst.JSONEnum):
    """
    One of ['linear', 'log', 'pow', 'sqrt', 'quantile', 'quantize', 'ordinal', 'time', 'utc']
    """
    values = ['linear', 'log', 'pow', 'sqrt', 'quantile', 'quantize', 'ordinal', 'time', 'utc']
    def __init__(self, **kwargs):
        super(ScaleType, self).__init__(self.values, **kwargs)


class Shape(jst.JSONEnum):
    """
    One of ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down']
    """
    values = ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down']
    def __init__(self, **kwargs):
        super(Shape, self).__init__(self.values, **kwargs)


class SortOrder(jst.JSONEnum):
    """
    One of ['ascending', 'descending', 'none']
    """
    values = ['ascending', 'descending', 'none']
    def __init__(self, **kwargs):
        super(SortOrder, self).__init__(self.values, **kwargs)


class StackOffset(jst.JSONEnum):
    """
    One of ['zero', 'center', 'normalize', 'none']
    """
    values = ['zero', 'center', 'normalize', 'none']
    def __init__(self, **kwargs):
        super(StackOffset, self).__init__(self.values, **kwargs)


class TimeUnit(jst.JSONEnum):
    """
    One of ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds', 'quarter', 'yearquarter', 'quartermonth', 'yearquartermonth']
    """
    values = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds', 'quarter', 'yearquarter', 'quartermonth', 'yearquartermonth']
    def __init__(self, **kwargs):
        super(TimeUnit, self).__init__(self.values, **kwargs)


class Type(jst.JSONEnum):
    """
    One of ['quantitative', 'ordinal', 'temporal', 'nominal']
    """
    values = ['quantitative', 'ordinal', 'temporal', 'nominal']
    def __init__(self, **kwargs):
        super(Type, self).__init__(self.values, **kwargs)


class VerticalAlign(jst.JSONEnum):
    """
    One of ['top', 'middle', 'bottom']
    """
    values = ['top', 'middle', 'bottom']
    def __init__(self, **kwargs):
        super(VerticalAlign, self).__init__(self.values, **kwargs)


class Root(jst.AnyOfObject):
    _classes = (_localname('ExtendedUnitSpec'),_localname('FacetSpec'),_localname('LayerSpec'),)


class Axis(jst.JSONHasTraits):
    """Axis class

    

    Attributes
    ----------
    axisColor : string
        Color of axis line.
    labelBaseline : string
        Text baseline for the label.
    tickSizeMinor : number
        The size, in pixels, of minor ticks.
    subdivide : number
        If provided, sets the number of minor ticks between major
        ticks (the value 9 results in decimal subdivision). Only
        applicable for axes visualizing quantitative scales.
    tickSize : number
        The size, in pixels, of major, minor and end ticks.
    values : object
        
    properties : object
        Optional mark property definitions for custom axis styling.
    labels : boolean
        Enable or disable labels.
    tickColor : string
        The color of the axis's tick.
    titleFontSize : number
        Size of the title.
    title : string
        A title for the axis. Shows field name and its function by
        default.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description. By default, this is
        automatically based on cell size and characterWidth property.
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
    titleFontWeight : string
        Weight of the title.
    labelMaxLength : number
        Truncate labels that are too long.
    gridColor : string
        Color of gridlines.
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
    labelAlign : string
        Text alignment for the Label.
    orient : object
        The orientation of the axis. One of top, bottom, left or
        right. The orientation can be used to further specialize the
        axis type (e.g., a y axis oriented for the right edge of the
        chart).
    format : string
        The formatting pattern for axis labels.
    titleOffset : number
        A title offset value for the axis.
    gridWidth : number
        The grid width, in pixels.
    tickLabelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    titleFont : string
        Font of the title.
    tickLabelFont : string
        The font of the tick label.
    tickWidth : number
        The width, in pixels, of ticks.
    tickSizeEnd : number
        The size, in pixels, of end ticks.
    tickPadding : number
        The padding, in pixels, between ticks and text labels.
    axisWidth : number
        Width of the axis line
    layer : string
        A string indicating if the axis (and any gridlines) should be
        placed above or below the data marks.
    ticks : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    tickSizeMajor : number
        The size, in pixels, of major ticks.
    characterWidth : number
        Character width for automatically determining title max
        length.
    labelAngle : number
        The rotation angle of the axis labels.
    grid : boolean
        A flag indicate if gridlines should be created in addition to
        ticks. If `grid` is unspecified, the default value is `true`
        for ROW and COL. For X and Y, the default value is `true` for
        quantitative and time fields and `false` otherwise.
    gridDash : array
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    tickLabelFontSize : number
        The font size of label, in pixels.
    shortTimeLabels : boolean
        Whether month and day names should be abbreviated.
    """
    _additional_traits = True
    axisColor = jst.JSONString(help='Color of axis line.')
    labelBaseline = jst.JSONString(help='Text baseline for the label.')
    tickSizeMinor = jst.JSONNumber(help='The size, in pixels, of minor ticks.', minimum=0)
    subdivide = jst.JSONNumber(help='If provided, sets the number of minor ticks between major ticks [...]')
    tickSize = jst.JSONNumber(help='The size, in pixels, of major, minor and end ticks.', minimum=0)
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))])
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom axis styling.')
    labels = jst.JSONBoolean(help='Enable or disable labels.')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    titleFontSize = jst.JSONNumber(help='Size of the title.')
    title = jst.JSONString(help='A title for the axis. Shows field name and its function by default.')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]', minimum=0)
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1])')
    titleFontWeight = jst.JSONString(help='Weight of the title.')
    labelMaxLength = jst.JSONNumber(help='Truncate labels that are too long.', minimum=1)
    gridColor = jst.JSONString(help='Color of gridlines.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    labelAlign = jst.JSONString(help='Text alignment for the Label.')
    orient = AxisOrient()
    format = jst.JSONString(help='The formatting pattern for axis labels.')
    titleOffset = jst.JSONNumber(help='A title offset value for the axis.')
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.')
    tickLabelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    titleFont = jst.JSONString(help='Font of the title.')
    tickLabelFont = jst.JSONString(help='The font of the tick label.')
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.')
    tickSizeEnd = jst.JSONNumber(help='The size, in pixels, of end ticks.', minimum=0)
    tickPadding = jst.JSONNumber(help='The padding, in pixels, between ticks and text labels.')
    axisWidth = jst.JSONNumber(help='Width of the axis line')
    layer = jst.JSONString(help='A string indicating if the axis (and any gridlines) should be [...]')
    ticks = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]', minimum=0)
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    tickSizeMajor = jst.JSONNumber(help='The size, in pixels, of major ticks.', minimum=0)
    characterWidth = jst.JSONNumber(help='Character width for automatically determining title max length.')
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels.')
    grid = jst.JSONBoolean(help='A flag indicate if gridlines should be created in addition to [...]')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    tickLabelFontSize = jst.JSONNumber(help='The font size of label, in pixels.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month and day names should be abbreviated.')

    def __init__(self, axisColor=jst.undefined, labelBaseline=jst.undefined, tickSizeMinor=jst.undefined, subdivide=jst.undefined, tickSize=jst.undefined, values=jst.undefined, properties=jst.undefined, labels=jst.undefined, tickColor=jst.undefined, titleFontSize=jst.undefined, title=jst.undefined, titleMaxLength=jst.undefined, gridOpacity=jst.undefined, titleFontWeight=jst.undefined, labelMaxLength=jst.undefined, gridColor=jst.undefined, offset=jst.undefined, labelAlign=jst.undefined, orient=jst.undefined, format=jst.undefined, titleOffset=jst.undefined, gridWidth=jst.undefined, tickLabelColor=jst.undefined, titleFont=jst.undefined, tickLabelFont=jst.undefined, tickWidth=jst.undefined, tickSizeEnd=jst.undefined, tickPadding=jst.undefined, axisWidth=jst.undefined, layer=jst.undefined, ticks=jst.undefined, titleColor=jst.undefined, tickSizeMajor=jst.undefined, characterWidth=jst.undefined, labelAngle=jst.undefined, grid=jst.undefined, gridDash=jst.undefined, tickLabelFontSize=jst.undefined, shortTimeLabels=jst.undefined, **kwargs):
        kwds = dict(axisColor=axisColor, labelBaseline=labelBaseline, tickSizeMinor=tickSizeMinor, subdivide=subdivide, tickSize=tickSize, values=values, properties=properties, labels=labels, tickColor=tickColor, titleFontSize=titleFontSize, title=title, titleMaxLength=titleMaxLength, gridOpacity=gridOpacity, titleFontWeight=titleFontWeight, labelMaxLength=labelMaxLength, gridColor=gridColor, offset=offset, labelAlign=labelAlign, orient=orient, format=format, titleOffset=titleOffset, gridWidth=gridWidth, tickLabelColor=tickLabelColor, titleFont=titleFont, tickLabelFont=tickLabelFont, tickWidth=tickWidth, tickSizeEnd=tickSizeEnd, tickPadding=tickPadding, axisWidth=axisWidth, layer=layer, ticks=ticks, titleColor=titleColor, tickSizeMajor=tickSizeMajor, characterWidth=characterWidth, labelAngle=labelAngle, grid=grid, gridDash=gridDash, tickLabelFontSize=tickLabelFontSize, shortTimeLabels=shortTimeLabels)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Axis, self).__init__(**kwargs)


class AxisConfig(jst.JSONHasTraits):
    """AxisConfig class

    

    Attributes
    ----------
    axisColor : string
        Color of axis line.
    labelBaseline : string
        Text baseline for the label.
    tickSizeMinor : number
        The size, in pixels, of minor ticks.
    tickSize : number
        The size, in pixels, of major, minor and end ticks.
    ticks : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    properties : object
        Optional mark property definitions for custom axis styling.
    labels : boolean
        Enable or disable labels.
    tickColor : string
        The color of the axis's tick.
    titleFontSize : number
        Size of the title.
    tickWidth : number
        The width, in pixels, of ticks.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
    titleFontWeight : string
        Weight of the title.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description. By default, this is
        automatically based on cell size and characterWidth property.
    labelMaxLength : number
        Truncate labels that are too long.
    gridColor : string
        Color of gridlines.
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
    shortTimeLabels : boolean
        Whether month and day names should be abbreviated.
    labelAlign : string
        Text alignment for the Label.
    tickLabelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    titleOffset : number
        A title offset value for the axis.
    gridWidth : number
        The grid width, in pixels.
    titleFont : string
        Font of the title.
    tickLabelFont : string
        The font of the tick label.
    tickSizeEnd : number
        The size, in pixels, of end ticks.
    tickPadding : number
        The padding, in pixels, between ticks and text labels.
    axisWidth : number
        Width of the axis line
    layer : string
        A string indicating if the axis (and any gridlines) should be
        placed above or below the data marks.
    subdivide : number
        If provided, sets the number of minor ticks between major
        ticks (the value 9 results in decimal subdivision). Only
        applicable for axes visualizing quantitative scales.
    tickSizeMajor : number
        The size, in pixels, of major ticks.
    characterWidth : number
        Character width for automatically determining title max
        length.
    labelAngle : number
        The rotation angle of the axis labels.
    gridDash : array
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    tickLabelFontSize : number
        The font size of label, in pixels.
    grid : boolean
        A flag indicate if gridlines should be created in addition to
        ticks. If `grid` is unspecified, the default value is `true`
        for ROW and COL. For X and Y, the default value is `true` for
        quantitative and time fields and `false` otherwise.
    """
    _additional_traits = True
    axisColor = jst.JSONString(help='Color of axis line.')
    labelBaseline = jst.JSONString(help='Text baseline for the label.')
    tickSizeMinor = jst.JSONNumber(help='The size, in pixels, of minor ticks.', minimum=0)
    tickSize = jst.JSONNumber(help='The size, in pixels, of major, minor and end ticks.', minimum=0)
    ticks = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]', minimum=0)
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom axis styling.')
    labels = jst.JSONBoolean(help='Enable or disable labels.')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    titleFontSize = jst.JSONNumber(help='Size of the title.')
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1])')
    titleFontWeight = jst.JSONString(help='Weight of the title.')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]', minimum=0)
    labelMaxLength = jst.JSONNumber(help='Truncate labels that are too long.', minimum=1)
    gridColor = jst.JSONString(help='Color of gridlines.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    shortTimeLabels = jst.JSONBoolean(help='Whether month and day names should be abbreviated.')
    labelAlign = jst.JSONString(help='Text alignment for the Label.')
    tickLabelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    titleOffset = jst.JSONNumber(help='A title offset value for the axis.')
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.')
    titleFont = jst.JSONString(help='Font of the title.')
    tickLabelFont = jst.JSONString(help='The font of the tick label.')
    tickSizeEnd = jst.JSONNumber(help='The size, in pixels, of end ticks.', minimum=0)
    tickPadding = jst.JSONNumber(help='The padding, in pixels, between ticks and text labels.')
    axisWidth = jst.JSONNumber(help='Width of the axis line')
    layer = jst.JSONString(help='A string indicating if the axis (and any gridlines) should be [...]')
    subdivide = jst.JSONNumber(help='If provided, sets the number of minor ticks between major ticks [...]')
    tickSizeMajor = jst.JSONNumber(help='The size, in pixels, of major ticks.', minimum=0)
    characterWidth = jst.JSONNumber(help='Character width for automatically determining title max length.')
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels.')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    tickLabelFontSize = jst.JSONNumber(help='The font size of label, in pixels.')
    grid = jst.JSONBoolean(help='A flag indicate if gridlines should be created in addition to [...]')

    def __init__(self, axisColor=jst.undefined, labelBaseline=jst.undefined, tickSizeMinor=jst.undefined, tickSize=jst.undefined, ticks=jst.undefined, properties=jst.undefined, labels=jst.undefined, tickColor=jst.undefined, titleFontSize=jst.undefined, tickWidth=jst.undefined, titleColor=jst.undefined, gridOpacity=jst.undefined, titleFontWeight=jst.undefined, titleMaxLength=jst.undefined, labelMaxLength=jst.undefined, gridColor=jst.undefined, offset=jst.undefined, shortTimeLabels=jst.undefined, labelAlign=jst.undefined, tickLabelColor=jst.undefined, titleOffset=jst.undefined, gridWidth=jst.undefined, titleFont=jst.undefined, tickLabelFont=jst.undefined, tickSizeEnd=jst.undefined, tickPadding=jst.undefined, axisWidth=jst.undefined, layer=jst.undefined, subdivide=jst.undefined, tickSizeMajor=jst.undefined, characterWidth=jst.undefined, labelAngle=jst.undefined, gridDash=jst.undefined, tickLabelFontSize=jst.undefined, grid=jst.undefined, **kwargs):
        kwds = dict(axisColor=axisColor, labelBaseline=labelBaseline, tickSizeMinor=tickSizeMinor, tickSize=tickSize, ticks=ticks, properties=properties, labels=labels, tickColor=tickColor, titleFontSize=titleFontSize, tickWidth=tickWidth, titleColor=titleColor, gridOpacity=gridOpacity, titleFontWeight=titleFontWeight, titleMaxLength=titleMaxLength, labelMaxLength=labelMaxLength, gridColor=gridColor, offset=offset, shortTimeLabels=shortTimeLabels, labelAlign=labelAlign, tickLabelColor=tickLabelColor, titleOffset=titleOffset, gridWidth=gridWidth, titleFont=titleFont, tickLabelFont=tickLabelFont, tickSizeEnd=tickSizeEnd, tickPadding=tickPadding, axisWidth=axisWidth, layer=layer, subdivide=subdivide, tickSizeMajor=tickSizeMajor, characterWidth=characterWidth, labelAngle=labelAngle, gridDash=gridDash, tickLabelFontSize=tickLabelFontSize, grid=grid)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AxisConfig, self).__init__(**kwargs)


class Bin(jst.JSONHasTraits):
    """Bin class

    Binning properties or boolean flag for determining whether to bin
    data or not.

    Attributes
    ----------
    minstep : number
        A minimum allowable step size (particularly useful for integer
        values).
    min : number
        The minimum bin value to consider. If unspecified, the minimum
        value of the specified field is used.
    maxbins : number
        Maximum number of bins.
    div : array
        Scale factors indicating allowable subdivisions. The default
        value is [5, 2], which indicates that for base 10 numbers (the
        default base), the method may consider dividing bin sizes by 5
        and/or 2. For example, for an initial step size of 10, the
        method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1
        (= 10/(5*2)) might also satisfy the given constraints.
    steps : array
        An array of allowable step sizes to choose from.
    base : number
        The number base to use for automatic bin determination
        (default is base 10).
    step : number
        An exact step size to use between bins. If provided, options
        such as maxbins will be ignored.
    max : number
        The maximum bin value to consider. If unspecified, the maximum
        value of the specified field is used.
    """
    _additional_traits = True
    minstep = jst.JSONNumber(help='A minimum allowable step size (particularly useful for integer [...]')
    min = jst.JSONNumber(help='The minimum bin value to consider. If unspecified, the minimum [...]')
    maxbins = jst.JSONNumber(help='Maximum number of bins.', minimum=2)
    div = jst.JSONArray(jst.JSONNumber(), help='Scale factors indicating allowable subdivisions. The default [...]')
    steps = jst.JSONArray(jst.JSONNumber(), help='An array of allowable step sizes to choose from.')
    base = jst.JSONNumber(help='The number base to use for automatic bin determination (default [...]')
    step = jst.JSONNumber(help='An exact step size to use between bins. If provided, options [...]')
    max = jst.JSONNumber(help='The maximum bin value to consider. If unspecified, the maximum [...]')

    def __init__(self, minstep=jst.undefined, min=jst.undefined, maxbins=jst.undefined, div=jst.undefined, steps=jst.undefined, base=jst.undefined, step=jst.undefined, max=jst.undefined, **kwargs):
        kwds = dict(minstep=minstep, min=min, maxbins=maxbins, div=div, steps=steps, base=base, step=step, max=max)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Bin, self).__init__(**kwargs)


class CellConfig(jst.JSONHasTraits):
    """CellConfig class

    

    Attributes
    ----------
    clip : boolean
        
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    fillOpacity : number
        The fill opacity (value between [0,1]).
    fill : string
        The fill color.
    stroke : string
        The stroke color.
    strokeWidth : number
        The stroke width, in pixels.
    height : number
        
    strokeDash : array
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
    width : number
        
    """
    _additional_traits = True
    clip = jst.JSONBoolean()
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]).')
    fill = jst.JSONString(help='The fill color.')
    stroke = jst.JSONString(help='The stroke color.')
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.')
    height = jst.JSONNumber()
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]).')
    width = jst.JSONNumber()

    def __init__(self, clip=jst.undefined, strokeDashOffset=jst.undefined, fillOpacity=jst.undefined, fill=jst.undefined, stroke=jst.undefined, strokeWidth=jst.undefined, height=jst.undefined, strokeDash=jst.undefined, strokeOpacity=jst.undefined, width=jst.undefined, **kwargs):
        kwds = dict(clip=clip, strokeDashOffset=strokeDashOffset, fillOpacity=fillOpacity, fill=fill, stroke=stroke, strokeWidth=strokeWidth, height=height, strokeDash=strokeDash, strokeOpacity=strokeOpacity, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(CellConfig, self).__init__(**kwargs)


class ChannelDefWithLegend(jst.JSONHasTraits):
    """ChannelDefWithLegend class

    

    Attributes
    ----------
    sort : object
        
    field : string
        Name of the field from which to pull a data value.
    title : string
        Title for axis or legend.
    legend : object
        
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    scale : object
        
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    """
    _additional_traits = True
    sort = jst.JSONAnyOf([jst.JSONInstance(_localname('SortField')), SortOrder()])
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    title = jst.JSONString(help='Title for axis or legend.')
    legend = jst.JSONInstance(_localname('Legend'))
    type = Type()
    scale = jst.JSONInstance(_localname('Scale'))
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    aggregate = AggregateOp()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    timeUnit = TimeUnit()

    def __init__(self, sort=jst.undefined, field=jst.undefined, title=jst.undefined, legend=jst.undefined, type=jst.undefined, scale=jst.undefined, bin=jst.undefined, aggregate=jst.undefined, value=jst.undefined, timeUnit=jst.undefined, **kwargs):
        kwds = dict(sort=sort, field=field, title=title, legend=legend, type=type, scale=scale, bin=bin, aggregate=aggregate, value=value, timeUnit=timeUnit)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ChannelDefWithLegend, self).__init__(**kwargs)


class Config(jst.JSONHasTraits):
    """Config class

    

    Attributes
    ----------
    overlay : object
        Mark Overlay Config
    mark : object
        Mark Config
    cell : object
        Cell Config
    background : string
        CSS color property to use as background of visualization.
        Default is `"transparent"`.
    countTitle : string
        Default axis and legend title for count fields.
    numberFormat : string
        D3 Number format for axis labels and text tables. For example
        "s" for SI units.
    timeFormat : string
        Default datetime format for axis and legend labels. The format
        can be set directly on each axis and legend.
    facet : object
        Facet Config
    viewport : number
        The width and height of the on-screen viewport, in pixels. If
        necessary, clipping and scrolling will be applied.
    scale : object
        Scale Config
    legend : object
        Legend Config
    axis : object
        Axis Config
    """
    _additional_traits = True
    overlay = jst.JSONInstance(_localname('OverlayConfig'), help='Mark Overlay Config')
    mark = jst.JSONInstance(_localname('MarkConfig'), help='Mark Config')
    cell = jst.JSONInstance(_localname('CellConfig'), help='Cell Config')
    background = jst.JSONString(help='CSS color property to use as background of visualization. [...]')
    countTitle = jst.JSONString(help='Default axis and legend title for count fields.')
    numberFormat = jst.JSONString(help='D3 Number format for axis labels and text tables. For example [...]')
    timeFormat = jst.JSONString(help='Default datetime format for axis and legend labels. The format [...]')
    facet = jst.JSONInstance(_localname('FacetConfig'), help='Facet Config')
    viewport = jst.JSONNumber(help='The width and height of the on-screen viewport, in pixels. If [...]')
    scale = jst.JSONInstance(_localname('ScaleConfig'), help='Scale Config')
    legend = jst.JSONInstance(_localname('LegendConfig'), help='Legend Config')
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Axis Config')

    def __init__(self, overlay=jst.undefined, mark=jst.undefined, cell=jst.undefined, background=jst.undefined, countTitle=jst.undefined, numberFormat=jst.undefined, timeFormat=jst.undefined, facet=jst.undefined, viewport=jst.undefined, scale=jst.undefined, legend=jst.undefined, axis=jst.undefined, **kwargs):
        kwds = dict(overlay=overlay, mark=mark, cell=cell, background=background, countTitle=countTitle, numberFormat=numberFormat, timeFormat=timeFormat, facet=facet, viewport=viewport, scale=scale, legend=legend, axis=axis)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Config, self).__init__(**kwargs)


class Data(jst.JSONHasTraits):
    """Data class

    

    Attributes
    ----------
    values : array
        Pass array of objects instead of a url to a file.
    url : string
        A URL from which to load the data set. Use the format.type
        property
        to ensure the loaded data is correctly parsed.
    format : object
        An object that specifies the format for the data file or
        values.
    """
    _additional_traits = True
    values = jst.JSONArray(jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True})), help='Pass array of objects instead of a url to a file.')
    url = jst.JSONString(help='A URL from which to load the data set. Use the format.type [...]')
    format = jst.JSONInstance(_localname('DataFormat'), help='An object that specifies the format for the data file or values.')

    def __init__(self, values=jst.undefined, url=jst.undefined, format=jst.undefined, **kwargs):
        kwds = dict(values=values, url=url, format=format)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Data, self).__init__(**kwargs)


class DataFormat(jst.JSONHasTraits):
    """DataFormat class

    

    Attributes
    ----------
    property : string
        JSON only) The JSON property containing the desired data.
        This parameter can be used when the loaded JSON file may have
        surrounding structure or meta-data.
        For example `"property": "values.features"` is equivalent to
        retrieving `json.values.features`
        from the loaded JSON object.
    parse : object
        A collection of parsing instructions can be used to define the
        data types of string-valued attributes in the JSON file. Each
        instruction is a name-value pair, where the name is the name
        of the attribute, and the value is the desired data type (one
        of `"number"`, `"boolean"` or `"date"`). For example,
        `"parse": {"modified_on":"date"}` ensures that the
        `modified_on` value in each row of the input data is parsed as
        a Date value. (See Datalib's [`dl.read.types` method](https://
        github.com/vega/datalib/wiki/Import#dl_read_types) for more
        information.)
    feature : string
        The name of the TopoJSON object set to convert to a GeoJSON
        feature collection.
        For example, in a map of the world, there may be an object set
        named `"countries"`.
        Using the feature property, we can extract this set and
        generate a GeoJSON feature object for each country.
    type : object
        Type of input data: `"json"`, `"csv"`, `"tsv"`.
        The default format type is determined by the extension of the
        file url.
        If no extension is detected, `"json"` will be used by default.
    mesh : string
        The name of the TopoJSON object set to convert to a mesh.
        Similar to the `feature` option, `mesh` extracts a named
        TopoJSON object set.
        Unlike the `feature` option, the corresponding geo data is
        returned as a single, unified mesh instance, not as individual
        GeoJSON features.
        Extracting a mesh is useful for more efficiently drawing
        borders or other geographic elements that you do not need to
        associate with specific regions such as individual countries,
        states or counties.
    """
    _additional_traits = True
    property = jst.JSONString(help='JSON only) The JSON property containing the desired data. This [...]')
    parse = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='A collection of parsing instructions can be used to define the [...]')
    feature = jst.JSONString(help='The name of the TopoJSON object set to convert to a GeoJSON [...]')
    type = DataFormatType()
    mesh = jst.JSONString(help='The name of the TopoJSON object set to convert to a mesh. [...]')

    def __init__(self, property=jst.undefined, parse=jst.undefined, feature=jst.undefined, type=jst.undefined, mesh=jst.undefined, **kwargs):
        kwds = dict(property=property, parse=parse, feature=feature, type=type, mesh=mesh)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DataFormat, self).__init__(**kwargs)


class DateTime(jst.JSONHasTraits):
    """DateTime class

    Object for defining datetime in Vega-Lite Filter.
    If both month and quarter are provided, month has higher
    precedence.
    `day` cannot be combined with other date.
    We accept string for month and day names.

    Attributes
    ----------
    minutes : number
        Integer value representing minute segment of a time from 0-59.
    day : ['number', 'string']
        Value representing the day of week.  This can be one of: (1)
        integer value -- `1` represents Monday; (2) case-insensitive
        day name (e.g., `"Monday"`);  (3) case-insensitive,
        3-character short day name (e.g., `"Mon"`).   <br/>
        **Warning:** A DateTime definition object with `day`** should
        not be combined with `year`, `quarter`, `month`, or `date`.
    quarter : number
        Integer value representing the quarter of the year (from 1-4).
    seconds : number
        Integer value representing second segment of a time from 0-59.
    year : number
        Integer value representing the year.
    date : number
        Integer value representing the date from 1-31.
    hours : number
        Integer value representing the hour of day from 0-23.
    milliseconds : number
        Integer value representing millisecond segment of a time.
    month : ['number', 'string']
        One of: (1) integer value representing the month from
        `1`-`12`. `1` represents January;  (2) case-insensitive month
        name (e.g., `"January"`);  (3) case-insensitive, 3-character
        short month name (e.g., `"Jan"`).
    """
    _additional_traits = True
    minutes = jst.JSONNumber(help='Integer value representing minute segment of a time from 0-59.', maximum=59, minimum=0)
    day = jst.JSONUnion([jst.JSONNumber(), jst.JSONString()], help='Value representing the day of week. This can be one of: (1) [...]')
    quarter = jst.JSONNumber(help='Integer value representing the quarter of the year (from 1-4).', maximum=4, minimum=1)
    seconds = jst.JSONNumber(help='Integer value representing second segment of a time from 0-59.', maximum=59, minimum=0)
    year = jst.JSONNumber(help='Integer value representing the year.')
    date = jst.JSONNumber(help='Integer value representing the date from 1-31.', maximum=31, minimum=1)
    hours = jst.JSONNumber(help='Integer value representing the hour of day from 0-23.', maximum=23, minimum=0)
    milliseconds = jst.JSONNumber(help='Integer value representing millisecond segment of a time.', maximum=999, minimum=0)
    month = jst.JSONUnion([jst.JSONNumber(), jst.JSONString()], help='One of: (1) integer value representing the month from `1`-`12`. [...]')

    def __init__(self, minutes=jst.undefined, day=jst.undefined, quarter=jst.undefined, seconds=jst.undefined, year=jst.undefined, date=jst.undefined, hours=jst.undefined, milliseconds=jst.undefined, month=jst.undefined, **kwargs):
        kwds = dict(minutes=minutes, day=day, quarter=quarter, seconds=seconds, year=year, date=date, hours=hours, milliseconds=milliseconds, month=month)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DateTime, self).__init__(**kwargs)


class Encoding(jst.JSONHasTraits):
    """Encoding class

    

    Attributes
    ----------
    order : object
        Layer order for non-stacked marks, or stack order for stacked
        marks.
    x : object
        X coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    y : object
        Y coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    y2 : object
        Y2 coordinates for ranged `bar`, `rule`, `area`
    text : object
        Text of the `text` mark.
    column : object
        Horizontal facets for trellis plots.
    x2 : object
        X2 coordinates for ranged `bar`, `rule`, `area`
    size : object
        Size of the mark.
        - For `point`, `square` and `circle`
        – the symbol size, or pixel area of the mark.
        - For `bar` and `tick` – the bar and tick's size.
        - For `text` – the text's font size.
        - Size is currently unsupported for `line` and `area`.
    color : object
        Color of the marks – either fill or stroke color based on mark
        type.
        (By default, fill color for `area`, `bar`, `tick`, `text`,
        `circle`, and `square` /
        stroke color for `line` and `point`.)
    label : object
        
    row : object
        Vertical facets for trellis plots.
    detail : object
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    path : object
        Order of data points in line marks.
    opacity : object
        Opacity of the marks – either can be a value or in a range.
    shape : object
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
    """
    _additional_traits = True
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Layer order for non-stacked marks, or stack order for stacked marks.')
    x = jst.JSONInstance(_localname('PositionChannelDef'), help='X coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    y = jst.JSONInstance(_localname('PositionChannelDef'), help='Y coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    y2 = jst.JSONInstance(_localname('FieldDef'), help='Y2 coordinates for ranged `bar`, `rule`, `area`')
    text = jst.JSONInstance(_localname('FieldDef'), help='Text of the `text` mark.')
    column = jst.JSONInstance(_localname('PositionChannelDef'), help='Horizontal facets for trellis plots.')
    x2 = jst.JSONInstance(_localname('FieldDef'), help='X2 coordinates for ranged `bar`, `rule`, `area`')
    size = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Size of the mark. - For `point`, `square` and `circle` – the [...]')
    color = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Color of the marks – either fill or stroke color based on mark [...]')
    label = jst.JSONInstance(_localname('FieldDef'))
    row = jst.JSONInstance(_localname('PositionChannelDef'), help='Vertical facets for trellis plots.')
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    path = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Order of data points in line marks.')
    opacity = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Opacity of the marks – either can be a value or in a range.')
    shape = jst.JSONInstance(_localname('ChannelDefWithLegend'), help="The symbol's shape (only for `point` marks). The supported [...]")

    def __init__(self, order=jst.undefined, x=jst.undefined, y=jst.undefined, y2=jst.undefined, text=jst.undefined, column=jst.undefined, x2=jst.undefined, size=jst.undefined, color=jst.undefined, label=jst.undefined, row=jst.undefined, detail=jst.undefined, path=jst.undefined, opacity=jst.undefined, shape=jst.undefined, **kwargs):
        kwds = dict(order=order, x=x, y=y, y2=y2, text=text, column=column, x2=x2, size=size, color=color, label=label, row=row, detail=detail, path=path, opacity=opacity, shape=shape)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Encoding, self).__init__(**kwargs)


class EqualFilter(jst.JSONHasTraits):
    """EqualFilter class

    

    Attributes
    ----------
    timeUnit : object
        Time unit for the field to be filtered.
    equal : object
        Value that the field should be equal to.
    field : string
        Field to be filtered.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    equal = jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))], allow_undefined=False, help='Value that the field should be equal to.')
    field = jst.JSONString(allow_undefined=False, help='Field to be filtered.')

    def __init__(self, timeUnit=jst.undefined, equal=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, equal=equal, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(EqualFilter, self).__init__(**kwargs)


class ExtendedUnitSpec(jst.JSONHasTraits):
    """ExtendedUnitSpec class

    Schema for a unit Vega-Lite specification, with the syntactic
    sugar extensions:
    - `row` and `column` are included in the encoding.
    - (Future) label, box plot
    Note: the spec could contain facet.

    Attributes
    ----------
    mark : object
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    name : string
        Name of the visualization for later reference.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    encoding : object
        A key-value mapping between encoding channels and definition
        of fields.
    config : object
        Configuration object
    data : object
        An object describing the data source
    width : number
        
    height : number
        
    transform : object
        An object describing filter and new field calculation.
    """
    _additional_traits = True
    mark = Mark(allow_undefined=False)
    name = jst.JSONString(help='Name of the visualization for later reference.')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    encoding = jst.JSONInstance(_localname('Encoding'), help='A key-value mapping between encoding channels and definition of [...]')
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    width = jst.JSONNumber()
    height = jst.JSONNumber()
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')

    def __init__(self, mark=jst.undefined, name=jst.undefined, description=jst.undefined, encoding=jst.undefined, config=jst.undefined, data=jst.undefined, width=jst.undefined, height=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(mark=mark, name=name, description=description, encoding=encoding, config=config, data=data, width=width, height=height, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ExtendedUnitSpec, self).__init__(**kwargs)


class Facet(jst.JSONHasTraits):
    """Facet class

    

    Attributes
    ----------
    row : object
        
    column : object
        
    """
    _additional_traits = True
    row = jst.JSONInstance(_localname('PositionChannelDef'))
    column = jst.JSONInstance(_localname('PositionChannelDef'))

    def __init__(self, row=jst.undefined, column=jst.undefined, **kwargs):
        kwds = dict(row=row, column=column)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Facet, self).__init__(**kwargs)


class FacetConfig(jst.JSONHasTraits):
    """FacetConfig class

    

    Attributes
    ----------
    scale : object
        Facet Scale Config
    axis : object
        Facet Axis Config
    cell : object
        Facet Cell Config
    grid : object
        Facet Grid Config
    """
    _additional_traits = True
    scale = jst.JSONInstance(_localname('FacetScaleConfig'), help='Facet Scale Config')
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Facet Axis Config')
    cell = jst.JSONInstance(_localname('CellConfig'), help='Facet Cell Config')
    grid = jst.JSONInstance(_localname('FacetGridConfig'), help='Facet Grid Config')

    def __init__(self, scale=jst.undefined, axis=jst.undefined, cell=jst.undefined, grid=jst.undefined, **kwargs):
        kwds = dict(scale=scale, axis=axis, cell=cell, grid=grid)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetConfig, self).__init__(**kwargs)


class FacetGridConfig(jst.JSONHasTraits):
    """FacetGridConfig class

    

    Attributes
    ----------
    opacity : number
        
    color : string
        
    offset : number
        
    """
    _additional_traits = True
    opacity = jst.JSONNumber()
    color = jst.JSONString()
    offset = jst.JSONNumber()

    def __init__(self, opacity=jst.undefined, color=jst.undefined, offset=jst.undefined, **kwargs):
        kwds = dict(opacity=opacity, color=color, offset=offset)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetGridConfig, self).__init__(**kwargs)


class FacetScaleConfig(jst.JSONHasTraits):
    """FacetScaleConfig class

    

    Attributes
    ----------
    padding : number
        
    round : boolean
        
    """
    _additional_traits = True
    padding = jst.JSONNumber()
    round = jst.JSONBoolean()

    def __init__(self, padding=jst.undefined, round=jst.undefined, **kwargs):
        kwds = dict(padding=padding, round=round)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetScaleConfig, self).__init__(**kwargs)


class FacetSpec(jst.JSONHasTraits):
    """FacetSpec class

    

    Attributes
    ----------
    facet : object
        
    name : string
        Name of the visualization for later reference.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    config : object
        Configuration object
    data : object
        An object describing the data source
    spec : object
        
    transform : object
        An object describing filter and new field calculation.
    """
    _additional_traits = True
    facet = jst.JSONInstance(_localname('Facet'), allow_undefined=False)
    name = jst.JSONString(help='Name of the visualization for later reference.')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    spec = jst.JSONAnyOf([jst.JSONInstance(_localname('LayerSpec')), jst.JSONInstance(_localname('UnitSpec'))], allow_undefined=False)
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')

    def __init__(self, facet=jst.undefined, name=jst.undefined, description=jst.undefined, config=jst.undefined, data=jst.undefined, spec=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(facet=facet, name=name, description=description, config=config, data=data, spec=spec, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetSpec, self).__init__(**kwargs)


class FieldDef(jst.JSONHasTraits):
    """FieldDef class

    

    Attributes
    ----------
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    field : string
        Name of the field from which to pull a data value.
    title : string
        Title for axis or legend.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    type = Type()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    aggregate = AggregateOp()
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    title = jst.JSONString(help='Title for axis or legend.')

    def __init__(self, timeUnit=jst.undefined, type=jst.undefined, value=jst.undefined, bin=jst.undefined, aggregate=jst.undefined, field=jst.undefined, title=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, type=type, value=value, bin=bin, aggregate=aggregate, field=field, title=title)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FieldDef, self).__init__(**kwargs)


class Formula(jst.JSONHasTraits):
    """Formula class

    Formula object for calculate.

    Attributes
    ----------
    field : string
        The field in which to store the computed formula value.
    expr : string
        A string containing an expression for the formula. Use the
        variable `datum` to to refer to the current data object.
    """
    _additional_traits = True
    field = jst.JSONString(allow_undefined=False, help='The field in which to store the computed formula value.')
    expr = jst.JSONString(allow_undefined=False, help='A string containing an expression for the formula. Use the [...]')

    def __init__(self, field=jst.undefined, expr=jst.undefined, **kwargs):
        kwds = dict(field=field, expr=expr)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Formula, self).__init__(**kwargs)


class LayerSpec(jst.JSONHasTraits):
    """LayerSpec class

    

    Attributes
    ----------
    layers : array
        Unit specs that will be layered.
    name : string
        Name of the visualization for later reference.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    config : object
        Configuration object
    height : number
        
    data : object
        An object describing the data source
    width : number
        
    transform : object
        An object describing filter and new field calculation.
    """
    _additional_traits = True
    layers = jst.JSONArray(jst.JSONInstance(_localname('UnitSpec')), allow_undefined=False, help='Unit specs that will be layered.')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    height = jst.JSONNumber()
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    width = jst.JSONNumber()
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')

    def __init__(self, layers=jst.undefined, name=jst.undefined, description=jst.undefined, config=jst.undefined, height=jst.undefined, data=jst.undefined, width=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(layers=layers, name=name, description=description, config=config, height=height, data=data, width=width, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LayerSpec, self).__init__(**kwargs)


class Legend(jst.JSONHasTraits):
    """Legend class

    

    Attributes
    ----------
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    symbolColor : string
        The color of the legend symbol,
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    gradientHeight : number
        The height of the gradient, in pixels.
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    values : object
        Explicitly set the visible legend values.
    properties : object
        Optional mark property definitions for custom legend styling.
    orient : string
        The orientation of the legend. One of "left" or "right". This
        determines how the legend is positioned within the scene. The
        default is "right".
    title : string
        A title for the legend. (Shows field name and its function by
        default.)
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    titleFontWeight : string
        The font weight of the legend title.
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
    labelFont : string
        The font of the legend label.
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    padding : number
        The padding, in pixels, between the legend and axis.
    labelFontSize : number
        The font size of legend label.
    gradientWidth : number
        The width of the gradient, in pixels.
    format : string
        An optional formatting pattern for legend labels. Vega uses
        D3\'s format pattern.
    titleFont : string
        The font of the legend title.
    labelOffset : number
        The offset of the legend label.
    titleColor : string
        Optional mark property definitions for custom legend styling.
        The color of the legend title, can be in hex color code or
        regular color name.
    symbolShape : string
        The shape of the legend symbol, can be the 'circle', 'square',
        'cross', 'diamond',
        'triangle-up', 'triangle-down', or else a custom SVG path
        string.
    titleFontSize : number
        The font size of the legend title.
    symbolSize : number
        The size of the legend symbol, in pixels.
    margin : number
        The margin around the legend, in pixels
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    """
    _additional_traits = True
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.')
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='Explicitly set the visible legend values.')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom legend styling.')
    orient = jst.JSONString(help='The orientation of the legend. One of "left" or "right". This [...]')
    title = jst.JSONString(help='A title for the legend. (Shows field name and its function by [...]')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.')
    titleFontWeight = jst.JSONString(help='The font weight of the legend title.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    labelFont = jst.JSONString(help='The font of the legend label.')
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    labelFontSize = jst.JSONNumber(help='The font size of legend label.')
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.')
    format = jst.JSONString(help='An optional formatting pattern for legend labels. Vega uses [...]')
    titleFont = jst.JSONString(help='The font of the legend title.')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.')
    titleColor = jst.JSONString(help='Optional mark property definitions for custom legend styling. [...]')
    symbolShape = jst.JSONString(help="The shape of the legend symbol, can be the 'circle', 'square', [...]")
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.')
    margin = jst.JSONNumber(help='The margin around the legend, in pixels')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')

    def __init__(self, labelBaseline=jst.undefined, symbolColor=jst.undefined, gradientStrokeColor=jst.undefined, gradientHeight=jst.undefined, symbolStrokeWidth=jst.undefined, values=jst.undefined, properties=jst.undefined, orient=jst.undefined, title=jst.undefined, labelColor=jst.undefined, gradientStrokeWidth=jst.undefined, titleFontWeight=jst.undefined, offset=jst.undefined, labelFont=jst.undefined, labelAlign=jst.undefined, padding=jst.undefined, labelFontSize=jst.undefined, gradientWidth=jst.undefined, format=jst.undefined, titleFont=jst.undefined, labelOffset=jst.undefined, titleColor=jst.undefined, symbolShape=jst.undefined, titleFontSize=jst.undefined, symbolSize=jst.undefined, margin=jst.undefined, shortTimeLabels=jst.undefined, **kwargs):
        kwds = dict(labelBaseline=labelBaseline, symbolColor=symbolColor, gradientStrokeColor=gradientStrokeColor, gradientHeight=gradientHeight, symbolStrokeWidth=symbolStrokeWidth, values=values, properties=properties, orient=orient, title=title, labelColor=labelColor, gradientStrokeWidth=gradientStrokeWidth, titleFontWeight=titleFontWeight, offset=offset, labelFont=labelFont, labelAlign=labelAlign, padding=padding, labelFontSize=labelFontSize, gradientWidth=gradientWidth, format=format, titleFont=titleFont, labelOffset=labelOffset, titleColor=titleColor, symbolShape=symbolShape, titleFontSize=titleFontSize, symbolSize=symbolSize, margin=margin, shortTimeLabels=shortTimeLabels)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Legend, self).__init__(**kwargs)


class LegendConfig(jst.JSONHasTraits):
    """LegendConfig class

    

    Attributes
    ----------
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    symbolColor : string
        The color of the legend symbol,
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    gradientHeight : number
        The height of the gradient, in pixels.
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    properties : object
        Optional mark property definitions for custom legend styling.
    orient : string
        The orientation of the legend. One of "left" or "right". This
        determines how the legend is positioned within the scene. The
        default is "right".
    titleFontSize : number
        The font size of the legend title.
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    titleFontWeight : string
        The font weight of the legend title.
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
    labelFont : string
        The font of the legend label.
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    padding : number
        The padding, in pixels, between the legend and axis.
    labelFontSize : number
        The font size of legend label.
    gradientWidth : number
        The width of the gradient, in pixels.
    titleFont : string
        The font of the legend title.
    labelOffset : number
        The offset of the legend label.
    titleColor : string
        Optional mark property definitions for custom legend styling.
        The color of the legend title, can be in hex color code or
        regular color name.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    symbolShape : string
        The shape of the legend symbol, can be the 'circle', 'square',
        'cross', 'diamond',
        'triangle-up', 'triangle-down', or else a custom SVG path
        string.
    symbolSize : number
        The size of the legend symbol, in pixels.
    margin : number
        The margin around the legend, in pixels
    """
    _additional_traits = True
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.')
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom legend styling.')
    orient = jst.JSONString(help='The orientation of the legend. One of "left" or "right". This [...]')
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.')
    titleFontWeight = jst.JSONString(help='The font weight of the legend title.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    labelFont = jst.JSONString(help='The font of the legend label.')
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    labelFontSize = jst.JSONNumber(help='The font size of legend label.')
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.')
    titleFont = jst.JSONString(help='The font of the legend title.')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.')
    titleColor = jst.JSONString(help='Optional mark property definitions for custom legend styling. [...]')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    symbolShape = jst.JSONString(help="The shape of the legend symbol, can be the 'circle', 'square', [...]")
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.')
    margin = jst.JSONNumber(help='The margin around the legend, in pixels')

    def __init__(self, labelBaseline=jst.undefined, symbolColor=jst.undefined, gradientStrokeColor=jst.undefined, gradientHeight=jst.undefined, symbolStrokeWidth=jst.undefined, properties=jst.undefined, orient=jst.undefined, titleFontSize=jst.undefined, labelColor=jst.undefined, gradientStrokeWidth=jst.undefined, titleFontWeight=jst.undefined, offset=jst.undefined, labelFont=jst.undefined, labelAlign=jst.undefined, padding=jst.undefined, labelFontSize=jst.undefined, gradientWidth=jst.undefined, titleFont=jst.undefined, labelOffset=jst.undefined, titleColor=jst.undefined, shortTimeLabels=jst.undefined, symbolShape=jst.undefined, symbolSize=jst.undefined, margin=jst.undefined, **kwargs):
        kwds = dict(labelBaseline=labelBaseline, symbolColor=symbolColor, gradientStrokeColor=gradientStrokeColor, gradientHeight=gradientHeight, symbolStrokeWidth=symbolStrokeWidth, properties=properties, orient=orient, titleFontSize=titleFontSize, labelColor=labelColor, gradientStrokeWidth=gradientStrokeWidth, titleFontWeight=titleFontWeight, offset=offset, labelFont=labelFont, labelAlign=labelAlign, padding=padding, labelFontSize=labelFontSize, gradientWidth=gradientWidth, titleFont=titleFont, labelOffset=labelOffset, titleColor=titleColor, shortTimeLabels=shortTimeLabels, symbolShape=symbolShape, symbolSize=symbolSize, margin=margin)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LegendConfig, self).__init__(**kwargs)


class MarkConfig(jst.JSONHasTraits):
    """MarkConfig class

    

    Attributes
    ----------
    color : string
        Default color.
    tickSize : number
        The width of the ticks.
    align : object
        The horizontal alignment of the text. One of left, right,
        center.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
    tension : number
        Depending on the interpolation type, sets the tension
        parameter.
    stacked : object
        
    filled : boolean
        Whether the shape\'s color should be used as fill color
        instead of stroke color.
        This is only applicable for "bar", "point", and "area".
        All marks except "point" marks are filled by default.
        See Mark Documentation (http://vega.github.io/vega-
        lite/docs/marks.html)
        for usage example.
    ruleSize : number
        Size of rule mark.
    orient : object
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    barThinSize : number
        The size of the bars on continuous scales.
    lineSize : number
        Size of line mark.
    size : number
        The pixel area each the point. For example: in the case of
        circles, the radius is determined in part by the square root
        of the size value.
    shape : object
        The symbol shape to use. One of circle (default), square,
        cross, diamond, triangle-up, or triangle-down, or a custom SVG
        path.
    interpolate : object
        The line interpolation method to use. One of linear, step-
        before, step-after, basis, basis-open, cardinal, cardinal-
        open, monotone.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        angle property.
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
    strokeDash : array
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    opacity : number
        
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        angle property.
    baseline : object
        The vertical alignment of the text. One of top, middle,
        bottom.
    text : string
        Placeholder Text
    tickThickness : number
        Thickness of the tick mark.
    angle : number
        The rotation angle of the text, in degrees.
    fillOpacity : number
        
    barSize : number
        The size of the bars.  If unspecified, the default size is
        `bandSize-1`,
        which provides 1 pixel offset between bars.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the x and y properties.
    strokeWidth : number
        
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the x and y properties. Values for theta
        follow the same convention of arc mark startAngle and endAngle
        properties: angles are measured in radians, with 0 indicating
        "north".
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    applyColorToBackground : boolean
        Apply color field to background color instead of the text.
    fontStyle : object
        The font style (e.g., italic).
    fontSize : number
        The font size, in pixels.
    fontWeight : object
        The font weight (e.g., bold).
    strokeOpacity : number
        
    font : string
        The typeface to set the text in (e.g., Helvetica Neue).
    format : string
        The formatting pattern for text value. If not defined, this
        will be determined automatically.
    """
    _additional_traits = True
    color = jst.JSONString(help='Default color.')
    tickSize = jst.JSONNumber(help='The width of the ticks.')
    align = HorizontalAlign()
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color')
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter.')
    stacked = StackOffset()
    filled = jst.JSONBoolean(help="Whether the shape\\'s color should be used as fill color instead [...]")
    ruleSize = jst.JSONNumber(help='Size of rule mark.')
    orient = Orient()
    barThinSize = jst.JSONNumber(help='The size of the bars on continuous scales.')
    lineSize = jst.JSONNumber(help='Size of line mark.')
    size = jst.JSONNumber(help='The pixel area each the point. For example: in the case of [...]')
    shape = jst.JSONAnyOf([Shape(), jst.JSONString()], help='The symbol shape to use. One of circle (default), square, cross, [...]')
    interpolate = Interpolate()
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than config.color')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    opacity = jst.JSONNumber(maximum=1, minimum=0)
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    baseline = VerticalAlign()
    text = jst.JSONString(help='Placeholder Text')
    tickThickness = jst.JSONNumber(help='Thickness of the tick mark.')
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.')
    fillOpacity = jst.JSONNumber(maximum=1, minimum=0)
    barSize = jst.JSONNumber(help='The size of the bars. If unspecified, the default size is [...]')
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]')
    strokeWidth = jst.JSONNumber(minimum=0)
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    applyColorToBackground = jst.JSONBoolean(help='Apply color field to background color instead of the text.')
    fontStyle = FontStyle()
    fontSize = jst.JSONNumber(help='The font size, in pixels.')
    fontWeight = FontWeight()
    strokeOpacity = jst.JSONNumber(maximum=1, minimum=0)
    font = jst.JSONString(help='The typeface to set the text in (e.g., Helvetica Neue).')
    format = jst.JSONString(help='The formatting pattern for text value. If not defined, this will [...]')

    def __init__(self, color=jst.undefined, tickSize=jst.undefined, align=jst.undefined, fill=jst.undefined, tension=jst.undefined, stacked=jst.undefined, filled=jst.undefined, ruleSize=jst.undefined, orient=jst.undefined, barThinSize=jst.undefined, lineSize=jst.undefined, size=jst.undefined, shape=jst.undefined, interpolate=jst.undefined, dy=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, opacity=jst.undefined, strokeDashOffset=jst.undefined, dx=jst.undefined, baseline=jst.undefined, text=jst.undefined, tickThickness=jst.undefined, angle=jst.undefined, fillOpacity=jst.undefined, barSize=jst.undefined, radius=jst.undefined, strokeWidth=jst.undefined, theta=jst.undefined, shortTimeLabels=jst.undefined, applyColorToBackground=jst.undefined, fontStyle=jst.undefined, fontSize=jst.undefined, fontWeight=jst.undefined, strokeOpacity=jst.undefined, font=jst.undefined, format=jst.undefined, **kwargs):
        kwds = dict(color=color, tickSize=tickSize, align=align, fill=fill, tension=tension, stacked=stacked, filled=filled, ruleSize=ruleSize, orient=orient, barThinSize=barThinSize, lineSize=lineSize, size=size, shape=shape, interpolate=interpolate, dy=dy, stroke=stroke, strokeDash=strokeDash, opacity=opacity, strokeDashOffset=strokeDashOffset, dx=dx, baseline=baseline, text=text, tickThickness=tickThickness, angle=angle, fillOpacity=fillOpacity, barSize=barSize, radius=radius, strokeWidth=strokeWidth, theta=theta, shortTimeLabels=shortTimeLabels, applyColorToBackground=applyColorToBackground, fontStyle=fontStyle, fontSize=fontSize, fontWeight=fontWeight, strokeOpacity=strokeOpacity, font=font, format=format)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MarkConfig, self).__init__(**kwargs)


class OneOfFilter(jst.JSONHasTraits):
    """OneOfFilter class

    

    Attributes
    ----------
    timeUnit : object
        time unit for the field to be filtered.
    field : string
        Field to be filtered
    oneOf : array
        A set of values that the `field`'s value should be a member
        of,
        for a data item included in the filtered data.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    field = jst.JSONString(allow_undefined=False, help='Field to be filtered')
    oneOf = jst.JSONArray(jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))]), allow_undefined=False, help="A set of values that the `field`'s value should be a member of, [...]")

    def __init__(self, timeUnit=jst.undefined, field=jst.undefined, oneOf=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, field=field, oneOf=oneOf)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OneOfFilter, self).__init__(**kwargs)


class OrderChannelDef(jst.JSONHasTraits):
    """OrderChannelDef class

    

    Attributes
    ----------
    sort : object
        
    field : string
        Name of the field from which to pull a data value.
    title : string
        Title for axis or legend.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    """
    _additional_traits = True
    sort = SortOrder()
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    title = jst.JSONString(help='Title for axis or legend.')
    type = Type()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    aggregate = AggregateOp()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    timeUnit = TimeUnit()

    def __init__(self, sort=jst.undefined, field=jst.undefined, title=jst.undefined, type=jst.undefined, bin=jst.undefined, aggregate=jst.undefined, value=jst.undefined, timeUnit=jst.undefined, **kwargs):
        kwds = dict(sort=sort, field=field, title=title, type=type, bin=bin, aggregate=aggregate, value=value, timeUnit=timeUnit)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OrderChannelDef, self).__init__(**kwargs)


class OverlayConfig(jst.JSONHasTraits):
    """OverlayConfig class

    

    Attributes
    ----------
    area : object
        Type of overlay for area mark (line or linepoint)
    lineStyle : object
        Default style for the overlayed point.
    line : boolean
        Whether to overlay line with point.
    pointStyle : object
        Default style for the overlayed point.
    """
    _additional_traits = True
    area = AreaOverlay()
    lineStyle = jst.JSONInstance(_localname('MarkConfig'), help='Default style for the overlayed point.')
    line = jst.JSONBoolean(help='Whether to overlay line with point.')
    pointStyle = jst.JSONInstance(_localname('MarkConfig'), help='Default style for the overlayed point.')

    def __init__(self, area=jst.undefined, lineStyle=jst.undefined, line=jst.undefined, pointStyle=jst.undefined, **kwargs):
        kwds = dict(area=area, lineStyle=lineStyle, line=line, pointStyle=pointStyle)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OverlayConfig, self).__init__(**kwargs)


class PositionChannelDef(jst.JSONHasTraits):
    """PositionChannelDef class

    

    Attributes
    ----------
    sort : object
        
    field : string
        Name of the field from which to pull a data value.
    title : string
        Title for axis or legend.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    scale : object
        
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    axis : object
        
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    """
    _additional_traits = True
    sort = jst.JSONAnyOf([jst.JSONInstance(_localname('SortField')), SortOrder()])
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    title = jst.JSONString(help='Title for axis or legend.')
    type = Type()
    scale = jst.JSONInstance(_localname('Scale'))
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    aggregate = AggregateOp()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    axis = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Axis'))])
    timeUnit = TimeUnit()

    def __init__(self, sort=jst.undefined, field=jst.undefined, title=jst.undefined, type=jst.undefined, scale=jst.undefined, bin=jst.undefined, aggregate=jst.undefined, value=jst.undefined, axis=jst.undefined, timeUnit=jst.undefined, **kwargs):
        kwds = dict(sort=sort, field=field, title=title, type=type, scale=scale, bin=bin, aggregate=aggregate, value=value, axis=axis, timeUnit=timeUnit)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(PositionChannelDef, self).__init__(**kwargs)


class RangeFilter(jst.JSONHasTraits):
    """RangeFilter class

    

    Attributes
    ----------
    timeUnit : object
        time unit for the field to be filtered.
    field : string
        Field to be filtered
    range : array
        Array of inclusive minimum and maximum values
        for a field value of a data item to be included in the
        filtered data.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    field = jst.JSONString(allow_undefined=False, help='Field to be filtered')
    range = jst.JSONArray(jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(_localname('DateTime'))]), allow_undefined=False, maxlen=2, help='Array of inclusive minimum and maximum values for a field value [...]', minlen=2)

    def __init__(self, timeUnit=jst.undefined, field=jst.undefined, range=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, field=field, range=range)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(RangeFilter, self).__init__(**kwargs)


class Scale(jst.JSONHasTraits):
    """Scale class

    

    Attributes
    ----------
    domain : object
        The domain of the scale, representing the set of data values.
        For quantitative data, this can take the form of a two-element
        array with minimum and maximum values. For ordinal/categorical
        data, this may be an array of valid input values.
    padding : number
        Applies spacing among ordinal elements in the scale range. The
        actual effect depends on how the scale is configured. If the
        __points__ parameter is `true`, the padding value is
        interpreted as a multiple of the spacing between points. A
        reasonable value is 1.0, such that the first and last point
        will be offset from the minimum and maximum value by half the
        distance between points. Otherwise, padding is typically in
        the range [0, 1] and corresponds to the fraction of space in
        the range interval to allocate to padding. A value of 0.5
        means that the range band width will be equal to the padding
        width. For more, see the [D3 ordinal scale
        documentation](https://github.com/mbostock/d3/wiki/Ordinal-
        Scales).
    round : boolean
        If true, rounds numeric output values to integers. This can be
        helpful for snapping to the pixel grid.
    bandSize : object
        
    type : object
        
    zero : boolean
        If `true`, ensures that a zero baseline value is included in
        the scale domain.
        Default value: `true` for `x` and `y` channel if the
        quantitative field is not binned
        and no custom `domain` is provided; `false` otherwise.
    useRawDomain : boolean
        Uses the source data range as scale domain instead of
        aggregated data for aggregate axis.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"stdev"`, `"stdevp"`, `"median"`, `"q1"`, `"q3"`, `"min"`,
        `"max"`). For other aggregations that produce values outside
        of the raw data domain (e.g. `"count"`, `"sum"`), this
        property is ignored.
    clamp : boolean
        If true, values that exceed the data domain are clamped to
        either the minimum or maximum range value
    range : object
        The range of the scale, representing the set of visual values.
        For numeric values, the range can take the form of a two-
        element array with minimum and maximum values. For ordinal or
        quantized data, the range may by an array of desired output
        values, which are mapped to elements in the specified domain.
        For ordinal scales only, the range can be defined using a
        DataRef: the range values are then drawn dynamically from a
        backing data set.
    exponent : number
        Sets the exponent of the scale transformation. For pow scale
        types only, otherwise ignored.
    nice : object
        If specified, modifies the scale domain to use a more human-
        friendly value range. If specified as a true boolean, modifies
        the scale domain to use a more human-friendly number range
        (e.g., 7 instead of 6.96). If specified as a string, modifies
        the scale domain to use a more human-friendly value range. For
        time and utc scale types only, the nice value should be a
        string indicating the desired time interval.
    """
    _additional_traits = True
    domain = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='The domain of the scale, representing the set of data values. [...]')
    padding = jst.JSONNumber(help='Applies spacing among ordinal elements in the scale range. The [...]')
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')
    bandSize = jst.JSONAnyOf([jst.JSONNumber(), BandSize()])
    type = ScaleType()
    zero = jst.JSONBoolean(help='If `true`, ensures that a zero baseline value is included in the [...]')
    useRawDomain = jst.JSONBoolean(help='Uses the source data range as scale domain instead of aggregated [...]')
    clamp = jst.JSONBoolean(help='If true, values that exceed the data domain are clamped to [...]')
    range = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString())], help='The range of the scale, representing the set of visual values. [...]')
    exponent = jst.JSONNumber(help='Sets the exponent of the scale transformation. For pow scale [...]')
    nice = jst.JSONAnyOf([jst.JSONBoolean(), NiceTime()], help='If specified, modifies the scale domain to use a more human- [...]')

    def __init__(self, domain=jst.undefined, padding=jst.undefined, round=jst.undefined, bandSize=jst.undefined, type=jst.undefined, zero=jst.undefined, useRawDomain=jst.undefined, clamp=jst.undefined, range=jst.undefined, exponent=jst.undefined, nice=jst.undefined, **kwargs):
        kwds = dict(domain=domain, padding=padding, round=round, bandSize=bandSize, type=type, zero=zero, useRawDomain=useRawDomain, clamp=clamp, range=range, exponent=exponent, nice=nice)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Scale, self).__init__(**kwargs)


class ScaleConfig(jst.JSONHasTraits):
    """ScaleConfig class

    

    Attributes
    ----------
    round : boolean
        If true, rounds numeric output values to integers.
        This can be helpful for snapping to the pixel grid.
        (Only available for `x`, `y`, `size`, `row`, and `column`
        scales.)
    textBandWidth : number
        Default band width for `x` ordinal scale when is mark is
        `text`.
    pointSizeRange : array
        Default range for bar size scale
    tickSizeRange : array
        Default range for tick spans
    barSizeRange : array
        Default range for bar size scale
    padding : number
        Default padding for `x` and `y` ordinal scales.
    ruleSizeRange : array
        Default range for rule stroke widths
    sequentialColorRange : object
        Default range for ordinal / continuous color scale
    bandSize : object
        Default band size for (1) `y` ordinal scale,
        and (2) `x` ordinal scale when the mark is not `text`.
    nominalColorRange : object
        Default range for nominal color scale
    fontSizeRange : array
        Default range for font size scale
    useRawDomain : boolean
        Uses the source data range as scale domain instead of
        aggregated data for aggregate axis.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"stdev"`, `"stdevp"`, `"median"`, `"q1"`, `"q3"`, `"min"`,
        `"max"`). For other aggregations that produce values outside
        of the raw data domain (e.g. `"count"`, `"sum"`), this
        property is ignored.
    shapeRange : object
        Default range for shape
    opacity : array
        Default range for opacity.
    """
    _additional_traits = True
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')
    textBandWidth = jst.JSONNumber(help='Default band width for `x` ordinal scale when is mark is `text`.', minimum=0)
    pointSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for bar size scale')
    tickSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for tick spans')
    barSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for bar size scale')
    padding = jst.JSONNumber(help='Default padding for `x` and `y` ordinal scales.')
    ruleSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for rule stroke widths')
    sequentialColorRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for ordinal / continuous color scale')
    bandSize = jst.JSONAnyOf([jst.JSONNumber(), BandSize()], help='Default band size for (1) `y` ordinal scale, and (2) `x` ordinal [...]')
    nominalColorRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for nominal color scale')
    fontSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for font size scale')
    useRawDomain = jst.JSONBoolean(help='Uses the source data range as scale domain instead of aggregated [...]')
    shapeRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for shape')
    opacity = jst.JSONArray(jst.JSONNumber(), help='Default range for opacity.')

    def __init__(self, round=jst.undefined, textBandWidth=jst.undefined, pointSizeRange=jst.undefined, tickSizeRange=jst.undefined, barSizeRange=jst.undefined, padding=jst.undefined, ruleSizeRange=jst.undefined, sequentialColorRange=jst.undefined, bandSize=jst.undefined, nominalColorRange=jst.undefined, fontSizeRange=jst.undefined, useRawDomain=jst.undefined, shapeRange=jst.undefined, opacity=jst.undefined, **kwargs):
        kwds = dict(round=round, textBandWidth=textBandWidth, pointSizeRange=pointSizeRange, tickSizeRange=tickSizeRange, barSizeRange=barSizeRange, padding=padding, ruleSizeRange=ruleSizeRange, sequentialColorRange=sequentialColorRange, bandSize=bandSize, nominalColorRange=nominalColorRange, fontSizeRange=fontSizeRange, useRawDomain=useRawDomain, shapeRange=shapeRange, opacity=opacity)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ScaleConfig, self).__init__(**kwargs)


class SortField(jst.JSONHasTraits):
    """SortField class

    

    Attributes
    ----------
    op : object
        The sort aggregation operator
    order : object
        
    field : string
        The field name to aggregate over.
    """
    _additional_traits = True
    op = AggregateOp(allow_undefined=False)
    order = SortOrder()
    field = jst.JSONString(allow_undefined=False, help='The field name to aggregate over.')

    def __init__(self, op=jst.undefined, order=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(op=op, order=order, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SortField, self).__init__(**kwargs)


class Transform(jst.JSONHasTraits):
    """Transform class

    

    Attributes
    ----------
    filterInvalid : boolean
        Whether to filter invalid values (`null` and `NaN`) from the
        data. By default (`undefined`), only quantitative and temporal
        fields are filtered. If set to `true`, all data items with
        null values are filtered. If `false`, all data items are
        included.
    filter : object
        A string containing the filter Vega expression. Use `datum` to
        refer to the current data object.
    calculate : array
        Calculate new field(s) using the provided expresssion(s).
        Calculation are applied before filter.
    """
    _additional_traits = True
    filterInvalid = jst.JSONBoolean(help='Whether to filter invalid values (`null` and `NaN`) from the [...]')
    filter = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter')), jst.JSONArray(jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter'))]))], help='A string containing the filter Vega expression. Use `datum` to [...]')
    calculate = jst.JSONArray(jst.JSONInstance(_localname('Formula')), help='Calculate new field(s) using the provided expresssion(s). [...]')

    def __init__(self, filterInvalid=jst.undefined, filter=jst.undefined, calculate=jst.undefined, **kwargs):
        kwds = dict(filterInvalid=filterInvalid, filter=filter, calculate=calculate)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Transform, self).__init__(**kwargs)


class UnitEncoding(jst.JSONHasTraits):
    """UnitEncoding class

    

    Attributes
    ----------
    order : object
        Layer order for non-stacked marks, or stack order for stacked
        marks.
    x : object
        X coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    y : object
        Y coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    y2 : object
        Y2 coordinates for ranged `bar`, `rule`, `area`
    text : object
        Text of the `text` mark.
    x2 : object
        X2 coordinates for ranged `bar`, `rule`, `area`
    size : object
        Size of the mark.
        - For `point`, `square` and `circle`
        – the symbol size, or pixel area of the mark.
        - For `bar` and `tick` – the bar and tick's size.
        - For `text` – the text's font size.
        - Size is currently unsupported for `line` and `area`.
    color : object
        Color of the marks – either fill or stroke color based on mark
        type.
        (By default, fill color for `area`, `bar`, `tick`, `text`,
        `circle`, and `square` /
        stroke color for `line` and `point`.)
    path : object
        Order of data points in line marks.
    detail : object
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    label : object
        
    opacity : object
        Opacity of the marks – either can be a value or in a range.
    shape : object
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
    """
    _additional_traits = True
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Layer order for non-stacked marks, or stack order for stacked marks.')
    x = jst.JSONInstance(_localname('PositionChannelDef'), help='X coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    y = jst.JSONInstance(_localname('PositionChannelDef'), help='Y coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    y2 = jst.JSONInstance(_localname('FieldDef'), help='Y2 coordinates for ranged `bar`, `rule`, `area`')
    text = jst.JSONInstance(_localname('FieldDef'), help='Text of the `text` mark.')
    x2 = jst.JSONInstance(_localname('FieldDef'), help='X2 coordinates for ranged `bar`, `rule`, `area`')
    size = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Size of the mark. - For `point`, `square` and `circle` – the [...]')
    color = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Color of the marks – either fill or stroke color based on mark [...]')
    path = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Order of data points in line marks.')
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    label = jst.JSONInstance(_localname('FieldDef'))
    opacity = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Opacity of the marks – either can be a value or in a range.')
    shape = jst.JSONInstance(_localname('ChannelDefWithLegend'), help="The symbol's shape (only for `point` marks). The supported [...]")

    def __init__(self, order=jst.undefined, x=jst.undefined, y=jst.undefined, y2=jst.undefined, text=jst.undefined, x2=jst.undefined, size=jst.undefined, color=jst.undefined, path=jst.undefined, detail=jst.undefined, label=jst.undefined, opacity=jst.undefined, shape=jst.undefined, **kwargs):
        kwds = dict(order=order, x=x, y=y, y2=y2, text=text, x2=x2, size=size, color=color, path=path, detail=detail, label=label, opacity=opacity, shape=shape)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UnitEncoding, self).__init__(**kwargs)


class UnitSpec(jst.JSONHasTraits):
    """UnitSpec class

    

    Attributes
    ----------
    mark : object
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    name : string
        Name of the visualization for later reference.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    encoding : object
        A key-value mapping between encoding channels and definition
        of fields.
    config : object
        Configuration object
    data : object
        An object describing the data source
    width : number
        
    height : number
        
    transform : object
        An object describing filter and new field calculation.
    """
    _additional_traits = True
    mark = Mark(allow_undefined=False)
    name = jst.JSONString(help='Name of the visualization for later reference.')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    encoding = jst.JSONInstance(_localname('UnitEncoding'), help='A key-value mapping between encoding channels and definition of [...]')
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    width = jst.JSONNumber()
    height = jst.JSONNumber()
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')

    def __init__(self, mark=jst.undefined, name=jst.undefined, description=jst.undefined, encoding=jst.undefined, config=jst.undefined, data=jst.undefined, width=jst.undefined, height=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(mark=mark, name=name, description=description, encoding=encoding, config=config, data=data, width=width, height=height, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UnitSpec, self).__init__(**kwargs)
