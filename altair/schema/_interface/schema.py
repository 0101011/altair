# Auto-generated by altair_parser: do not modify file directly
# - parser version: 0.1.dev
# - date:    2017-07-17 14:51:21



import traitlets as T
from . import jstraitlets as jst


def _localname(name):
    """Construct an object name relative to the local module"""
    return "{0}.{1}".format(__name__, name)



class AggregateOp(jst.JSONEnum):
    """
    One of ['values', 'count', 'valid', 'missing', 'distinct', 'sum', 'mean', 'average', 'variance', 'variancep', 'stdev', 'stdevp', 'median', 'q1', 'q3', 'modeskew', 'min', 'max', 'argmin', 'argmax']
    """
    values = ['values', 'count', 'valid', 'missing', 'distinct', 'sum', 'mean', 'average', 'variance', 'variancep', 'stdev', 'stdevp', 'median', 'q1', 'q3', 'modeskew', 'min', 'max', 'argmin', 'argmax']
    def __init__(self, **kwargs):
        super(AggregateOp, self).__init__(self.values, **kwargs)


class AreaOverlay(jst.JSONEnum):
    """
    One of ['line', 'linepoint', 'none']
    """
    values = ['line', 'linepoint', 'none']
    def __init__(self, **kwargs):
        super(AreaOverlay, self).__init__(self.values, **kwargs)


class AxisOrient(jst.JSONEnum):
    """
    One of ['top', 'right', 'left', 'bottom']
    """
    values = ['top', 'right', 'left', 'bottom']
    def __init__(self, **kwargs):
        super(AxisOrient, self).__init__(self.values, **kwargs)


class BandSize(jst.JSONEnum):
    """
    One of ['fit']
    """
    values = ['fit']
    def __init__(self, **kwargs):
        super(BandSize, self).__init__(self.values, **kwargs)


class DataFormatType(jst.JSONEnum):
    """
    One of ['json', 'csv', 'tsv', 'topojson']
    """
    values = ['json', 'csv', 'tsv', 'topojson']
    def __init__(self, **kwargs):
        super(DataFormatType, self).__init__(self.values, **kwargs)


class FontStyle(jst.JSONEnum):
    """
    One of ['normal', 'italic']
    """
    values = ['normal', 'italic']
    def __init__(self, **kwargs):
        super(FontStyle, self).__init__(self.values, **kwargs)


class FontWeight(jst.JSONEnum):
    """
    One of ['normal', 'bold']
    """
    values = ['normal', 'bold']
    def __init__(self, **kwargs):
        super(FontWeight, self).__init__(self.values, **kwargs)


class HorizontalAlign(jst.JSONEnum):
    """
    One of ['left', 'right', 'center']
    """
    values = ['left', 'right', 'center']
    def __init__(self, **kwargs):
        super(HorizontalAlign, self).__init__(self.values, **kwargs)


class Interpolate(jst.JSONEnum):
    """
    One of ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    """
    values = ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    def __init__(self, **kwargs):
        super(Interpolate, self).__init__(self.values, **kwargs)


class Mark(jst.JSONEnum):
    """
    One of ['area', 'bar', 'line', 'point', 'text', 'tick', 'rule', 'circle', 'square', 'errorBar']
    """
    values = ['area', 'bar', 'line', 'point', 'text', 'tick', 'rule', 'circle', 'square', 'errorBar']
    def __init__(self, **kwargs):
        super(Mark, self).__init__(self.values, **kwargs)


class NiceTime(jst.JSONEnum):
    """
    One of ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    """
    values = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    def __init__(self, **kwargs):
        super(NiceTime, self).__init__(self.values, **kwargs)


class Orient(jst.JSONEnum):
    """
    One of ['horizontal', 'vertical']
    """
    values = ['horizontal', 'vertical']
    def __init__(self, **kwargs):
        super(Orient, self).__init__(self.values, **kwargs)


class ScaleType(jst.JSONEnum):
    """
    One of ['linear', 'log', 'pow', 'sqrt', 'quantile', 'quantize', 'ordinal', 'time', 'utc']
    """
    values = ['linear', 'log', 'pow', 'sqrt', 'quantile', 'quantize', 'ordinal', 'time', 'utc']
    def __init__(self, **kwargs):
        super(ScaleType, self).__init__(self.values, **kwargs)


class Shape(jst.JSONEnum):
    """
    One of ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down']
    """
    values = ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down']
    def __init__(self, **kwargs):
        super(Shape, self).__init__(self.values, **kwargs)


class SortOrder(jst.JSONEnum):
    """
    One of ['ascending', 'descending', 'none']
    """
    values = ['ascending', 'descending', 'none']
    def __init__(self, **kwargs):
        super(SortOrder, self).__init__(self.values, **kwargs)


class StackOffset(jst.JSONEnum):
    """
    One of ['zero', 'center', 'normalize', 'none']
    """
    values = ['zero', 'center', 'normalize', 'none']
    def __init__(self, **kwargs):
        super(StackOffset, self).__init__(self.values, **kwargs)


class TimeUnit(jst.JSONEnum):
    """
    One of ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds', 'quarter', 'yearquarter', 'quartermonth', 'yearquartermonth']
    """
    values = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds', 'quarter', 'yearquarter', 'quartermonth', 'yearquartermonth']
    def __init__(self, **kwargs):
        super(TimeUnit, self).__init__(self.values, **kwargs)


class Type(jst.JSONEnum):
    """
    One of ['quantitative', 'ordinal', 'temporal', 'nominal']
    """
    values = ['quantitative', 'ordinal', 'temporal', 'nominal']
    def __init__(self, **kwargs):
        super(Type, self).__init__(self.values, **kwargs)


class VerticalAlign(jst.JSONEnum):
    """
    One of ['top', 'middle', 'bottom']
    """
    values = ['top', 'middle', 'bottom']
    def __init__(self, **kwargs):
        super(VerticalAlign, self).__init__(self.values, **kwargs)


class Root(jst.AnyOfObject):
    _classes = (_localname('ExtendedUnitSpec'),_localname('FacetSpec'),_localname('LayerSpec'),)


class Axis(jst.JSONHasTraits):
    """Axis class

    

    Attributes
    ----------
    title : string
        A title for the axis. Shows field name and its function by
        default.
    tickPadding : number
        The padding, in pixels, between ticks and text labels.
    format : string
        The formatting pattern for axis labels.
    subdivide : number
        If provided, sets the number of minor ticks between major
        ticks (the value 9 results in decimal subdivision). Only
        applicable for axes visualizing quantitative scales.
    tickLabelFont : string
        The font of the tick label.
    titleOffset : number
        A title offset value for the axis.
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
    tickLabelFontSize : number
        The font size of label, in pixels.
    tickColor : string
        The color of the axis's tick.
    tickSize : number
        The size, in pixels, of major, minor and end ticks.
    titleFontSize : number
        Size of the title.
    axisColor : string
        Color of axis line.
    characterWidth : number
        Character width for automatically determining title max
        length.
    tickWidth : number
        The width, in pixels, of ticks.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description. By default, this is
        automatically based on cell size and characterWidth property.
    axisWidth : number
        Width of the axis line
    ticks : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    labelAlign : string
        Text alignment for the Label.
    gridWidth : number
        The grid width, in pixels.
    shortTimeLabels : boolean
        Whether month and day names should be abbreviated.
    layer : string
        A string indicating if the axis (and any gridlines) should be
        placed above or below the data marks.
    orient : object
        The orientation of the axis. One of top, bottom, left or
        right. The orientation can be used to further specialize the
        axis type (e.g., a y axis oriented for the right edge of the
        chart).
    values : object
        
    tickSizeEnd : number
        The size, in pixels, of end ticks.
    tickLabelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    properties : object
        Optional mark property definitions for custom axis styling.
    grid : boolean
        A flag indicate if gridlines should be created in addition to
        ticks. If `grid` is unspecified, the default value is `true`
        for ROW and COL. For X and Y, the default value is `true` for
        quantitative and time fields and `false` otherwise.
    gridDash : array
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    labels : boolean
        Enable or disable labels.
    labelBaseline : string
        Text baseline for the label.
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
    titleFont : string
        Font of the title.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    labelMaxLength : number
        Truncate labels that are too long.
    tickSizeMajor : number
        The size, in pixels, of major ticks.
    tickSizeMinor : number
        The size, in pixels, of minor ticks.
    labelAngle : number
        The rotation angle of the axis labels.
    gridColor : string
        Color of gridlines.
    titleFontWeight : string
        Weight of the title.
    """
    _additional_traits = True
    title = jst.JSONString(help='A title for the axis. Shows field name and its function by default.')
    tickPadding = jst.JSONNumber(help='The padding, in pixels, between ticks and text labels.')
    format = jst.JSONString(help='The formatting pattern for axis labels.')
    subdivide = jst.JSONNumber(help='If provided, sets the number of minor ticks between major ticks [...]')
    tickLabelFont = jst.JSONString(help='The font of the tick label.')
    titleOffset = jst.JSONNumber(help='A title offset value for the axis.')
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1])')
    tickLabelFontSize = jst.JSONNumber(help='The font size of label, in pixels.')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    tickSize = jst.JSONNumber(help='The size, in pixels, of major, minor and end ticks.', minimum=0)
    titleFontSize = jst.JSONNumber(help='Size of the title.')
    axisColor = jst.JSONString(help='Color of axis line.')
    characterWidth = jst.JSONNumber(help='Character width for automatically determining title max length.')
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]', minimum=0)
    axisWidth = jst.JSONNumber(help='Width of the axis line')
    ticks = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]', minimum=0)
    labelAlign = jst.JSONString(help='Text alignment for the Label.')
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month and day names should be abbreviated.')
    layer = jst.JSONString(help='A string indicating if the axis (and any gridlines) should be [...]')
    orient = AxisOrient()
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))])
    tickSizeEnd = jst.JSONNumber(help='The size, in pixels, of end ticks.', minimum=0)
    tickLabelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom axis styling.')
    grid = jst.JSONBoolean(help='A flag indicate if gridlines should be created in addition to [...]')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    labels = jst.JSONBoolean(help='Enable or disable labels.')
    labelBaseline = jst.JSONString(help='Text baseline for the label.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    titleFont = jst.JSONString(help='Font of the title.')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    labelMaxLength = jst.JSONNumber(help='Truncate labels that are too long.', minimum=1)
    tickSizeMajor = jst.JSONNumber(help='The size, in pixels, of major ticks.', minimum=0)
    tickSizeMinor = jst.JSONNumber(help='The size, in pixels, of minor ticks.', minimum=0)
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels.')
    gridColor = jst.JSONString(help='Color of gridlines.')
    titleFontWeight = jst.JSONString(help='Weight of the title.')

    def __init__(self, title=jst.undefined, tickPadding=jst.undefined, format=jst.undefined, subdivide=jst.undefined, tickLabelFont=jst.undefined, titleOffset=jst.undefined, gridOpacity=jst.undefined, tickLabelFontSize=jst.undefined, tickColor=jst.undefined, tickSize=jst.undefined, titleFontSize=jst.undefined, axisColor=jst.undefined, characterWidth=jst.undefined, tickWidth=jst.undefined, titleMaxLength=jst.undefined, axisWidth=jst.undefined, ticks=jst.undefined, labelAlign=jst.undefined, gridWidth=jst.undefined, shortTimeLabels=jst.undefined, layer=jst.undefined, orient=jst.undefined, values=jst.undefined, tickSizeEnd=jst.undefined, tickLabelColor=jst.undefined, properties=jst.undefined, grid=jst.undefined, gridDash=jst.undefined, labels=jst.undefined, labelBaseline=jst.undefined, offset=jst.undefined, titleFont=jst.undefined, titleColor=jst.undefined, labelMaxLength=jst.undefined, tickSizeMajor=jst.undefined, tickSizeMinor=jst.undefined, labelAngle=jst.undefined, gridColor=jst.undefined, titleFontWeight=jst.undefined, **kwargs):
        kwds = dict(title=title, tickPadding=tickPadding, format=format, subdivide=subdivide, tickLabelFont=tickLabelFont, titleOffset=titleOffset, gridOpacity=gridOpacity, tickLabelFontSize=tickLabelFontSize, tickColor=tickColor, tickSize=tickSize, titleFontSize=titleFontSize, axisColor=axisColor, characterWidth=characterWidth, tickWidth=tickWidth, titleMaxLength=titleMaxLength, axisWidth=axisWidth, ticks=ticks, labelAlign=labelAlign, gridWidth=gridWidth, shortTimeLabels=shortTimeLabels, layer=layer, orient=orient, values=values, tickSizeEnd=tickSizeEnd, tickLabelColor=tickLabelColor, properties=properties, grid=grid, gridDash=gridDash, labels=labels, labelBaseline=labelBaseline, offset=offset, titleFont=titleFont, titleColor=titleColor, labelMaxLength=labelMaxLength, tickSizeMajor=tickSizeMajor, tickSizeMinor=tickSizeMinor, labelAngle=labelAngle, gridColor=gridColor, titleFontWeight=titleFontWeight)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Axis, self).__init__(**kwargs)


class AxisConfig(jst.JSONHasTraits):
    """AxisConfig class

    

    Attributes
    ----------
    tickPadding : number
        The padding, in pixels, between ticks and text labels.
    tickSize : number
        The size, in pixels, of major, minor and end ticks.
    subdivide : number
        If provided, sets the number of minor ticks between major
        ticks (the value 9 results in decimal subdivision). Only
        applicable for axes visualizing quantitative scales.
    tickLabelFont : string
        The font of the tick label.
    titleOffset : number
        A title offset value for the axis.
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
    gridWidth : number
        The grid width, in pixels.
    tickLabelFontSize : number
        The font size of label, in pixels.
    tickColor : string
        The color of the axis's tick.
    titleFontSize : number
        Size of the title.
    axisColor : string
        Color of axis line.
    characterWidth : number
        Character width for automatically determining title max
        length.
    tickWidth : number
        The width, in pixels, of ticks.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description. By default, this is
        automatically based on cell size and characterWidth property.
    axisWidth : number
        Width of the axis line
    ticks : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    labelAlign : string
        Text alignment for the Label.
    gridColor : string
        Color of gridlines.
    shortTimeLabels : boolean
        Whether month and day names should be abbreviated.
    layer : string
        A string indicating if the axis (and any gridlines) should be
        placed above or below the data marks.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    tickSizeEnd : number
        The size, in pixels, of end ticks.
    tickLabelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    properties : object
        Optional mark property definitions for custom axis styling.
    grid : boolean
        A flag indicate if gridlines should be created in addition to
        ticks. If `grid` is unspecified, the default value is `true`
        for ROW and COL. For X and Y, the default value is `true` for
        quantitative and time fields and `false` otherwise.
    gridDash : array
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    labels : boolean
        Enable or disable labels.
    labelBaseline : string
        Text baseline for the label.
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
    titleFont : string
        Font of the title.
    labelMaxLength : number
        Truncate labels that are too long.
    tickSizeMajor : number
        The size, in pixels, of major ticks.
    tickSizeMinor : number
        The size, in pixels, of minor ticks.
    labelAngle : number
        The rotation angle of the axis labels.
    titleFontWeight : string
        Weight of the title.
    """
    _additional_traits = True
    tickPadding = jst.JSONNumber(help='The padding, in pixels, between ticks and text labels.')
    tickSize = jst.JSONNumber(help='The size, in pixels, of major, minor and end ticks.', minimum=0)
    subdivide = jst.JSONNumber(help='If provided, sets the number of minor ticks between major ticks [...]')
    tickLabelFont = jst.JSONString(help='The font of the tick label.')
    titleOffset = jst.JSONNumber(help='A title offset value for the axis.')
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1])')
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.')
    tickLabelFontSize = jst.JSONNumber(help='The font size of label, in pixels.')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    titleFontSize = jst.JSONNumber(help='Size of the title.')
    axisColor = jst.JSONString(help='Color of axis line.')
    characterWidth = jst.JSONNumber(help='Character width for automatically determining title max length.')
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]', minimum=0)
    axisWidth = jst.JSONNumber(help='Width of the axis line')
    ticks = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]', minimum=0)
    labelAlign = jst.JSONString(help='Text alignment for the Label.')
    gridColor = jst.JSONString(help='Color of gridlines.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month and day names should be abbreviated.')
    layer = jst.JSONString(help='A string indicating if the axis (and any gridlines) should be [...]')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    tickSizeEnd = jst.JSONNumber(help='The size, in pixels, of end ticks.', minimum=0)
    tickLabelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom axis styling.')
    grid = jst.JSONBoolean(help='A flag indicate if gridlines should be created in addition to [...]')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    labels = jst.JSONBoolean(help='Enable or disable labels.')
    labelBaseline = jst.JSONString(help='Text baseline for the label.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    titleFont = jst.JSONString(help='Font of the title.')
    labelMaxLength = jst.JSONNumber(help='Truncate labels that are too long.', minimum=1)
    tickSizeMajor = jst.JSONNumber(help='The size, in pixels, of major ticks.', minimum=0)
    tickSizeMinor = jst.JSONNumber(help='The size, in pixels, of minor ticks.', minimum=0)
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels.')
    titleFontWeight = jst.JSONString(help='Weight of the title.')

    def __init__(self, tickPadding=jst.undefined, tickSize=jst.undefined, subdivide=jst.undefined, tickLabelFont=jst.undefined, titleOffset=jst.undefined, gridOpacity=jst.undefined, gridWidth=jst.undefined, tickLabelFontSize=jst.undefined, tickColor=jst.undefined, titleFontSize=jst.undefined, axisColor=jst.undefined, characterWidth=jst.undefined, tickWidth=jst.undefined, titleMaxLength=jst.undefined, axisWidth=jst.undefined, ticks=jst.undefined, labelAlign=jst.undefined, gridColor=jst.undefined, shortTimeLabels=jst.undefined, layer=jst.undefined, titleColor=jst.undefined, tickSizeEnd=jst.undefined, tickLabelColor=jst.undefined, properties=jst.undefined, grid=jst.undefined, gridDash=jst.undefined, labels=jst.undefined, labelBaseline=jst.undefined, offset=jst.undefined, titleFont=jst.undefined, labelMaxLength=jst.undefined, tickSizeMajor=jst.undefined, tickSizeMinor=jst.undefined, labelAngle=jst.undefined, titleFontWeight=jst.undefined, **kwargs):
        kwds = dict(tickPadding=tickPadding, tickSize=tickSize, subdivide=subdivide, tickLabelFont=tickLabelFont, titleOffset=titleOffset, gridOpacity=gridOpacity, gridWidth=gridWidth, tickLabelFontSize=tickLabelFontSize, tickColor=tickColor, titleFontSize=titleFontSize, axisColor=axisColor, characterWidth=characterWidth, tickWidth=tickWidth, titleMaxLength=titleMaxLength, axisWidth=axisWidth, ticks=ticks, labelAlign=labelAlign, gridColor=gridColor, shortTimeLabels=shortTimeLabels, layer=layer, titleColor=titleColor, tickSizeEnd=tickSizeEnd, tickLabelColor=tickLabelColor, properties=properties, grid=grid, gridDash=gridDash, labels=labels, labelBaseline=labelBaseline, offset=offset, titleFont=titleFont, labelMaxLength=labelMaxLength, tickSizeMajor=tickSizeMajor, tickSizeMinor=tickSizeMinor, labelAngle=labelAngle, titleFontWeight=titleFontWeight)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AxisConfig, self).__init__(**kwargs)


class Bin(jst.JSONHasTraits):
    """Bin class

    Binning properties or boolean flag for determining whether to bin
    data or not.

    Attributes
    ----------
    min : number
        The minimum bin value to consider. If unspecified, the minimum
        value of the specified field is used.
    max : number
        The maximum bin value to consider. If unspecified, the maximum
        value of the specified field is used.
    step : number
        An exact step size to use between bins. If provided, options
        such as maxbins will be ignored.
    maxbins : number
        Maximum number of bins.
    minstep : number
        A minimum allowable step size (particularly useful for integer
        values).
    base : number
        The number base to use for automatic bin determination
        (default is base 10).
    steps : array
        An array of allowable step sizes to choose from.
    div : array
        Scale factors indicating allowable subdivisions. The default
        value is [5, 2], which indicates that for base 10 numbers (the
        default base), the method may consider dividing bin sizes by 5
        and/or 2. For example, for an initial step size of 10, the
        method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1
        (= 10/(5*2)) might also satisfy the given constraints.
    """
    _additional_traits = True
    min = jst.JSONNumber(help='The minimum bin value to consider. If unspecified, the minimum [...]')
    max = jst.JSONNumber(help='The maximum bin value to consider. If unspecified, the maximum [...]')
    step = jst.JSONNumber(help='An exact step size to use between bins. If provided, options [...]')
    maxbins = jst.JSONNumber(help='Maximum number of bins.', minimum=2)
    minstep = jst.JSONNumber(help='A minimum allowable step size (particularly useful for integer [...]')
    base = jst.JSONNumber(help='The number base to use for automatic bin determination (default [...]')
    steps = jst.JSONArray(jst.JSONNumber(), help='An array of allowable step sizes to choose from.')
    div = jst.JSONArray(jst.JSONNumber(), help='Scale factors indicating allowable subdivisions. The default [...]')

    def __init__(self, min=jst.undefined, max=jst.undefined, step=jst.undefined, maxbins=jst.undefined, minstep=jst.undefined, base=jst.undefined, steps=jst.undefined, div=jst.undefined, **kwargs):
        kwds = dict(min=min, max=max, step=step, maxbins=maxbins, minstep=minstep, base=base, steps=steps, div=div)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Bin, self).__init__(**kwargs)


class CellConfig(jst.JSONHasTraits):
    """CellConfig class

    

    Attributes
    ----------
    fill : string
        The fill color.
    clip : boolean
        
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
    fillOpacity : number
        The fill opacity (value between [0,1]).
    height : number
        
    width : number
        
    strokeWidth : number
        The stroke width, in pixels.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    strokeDash : array
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    stroke : string
        The stroke color.
    """
    _additional_traits = True
    fill = jst.JSONString(help='The fill color.')
    clip = jst.JSONBoolean()
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]).')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]).')
    height = jst.JSONNumber()
    width = jst.JSONNumber()
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    stroke = jst.JSONString(help='The stroke color.')

    def __init__(self, fill=jst.undefined, clip=jst.undefined, strokeOpacity=jst.undefined, fillOpacity=jst.undefined, height=jst.undefined, width=jst.undefined, strokeWidth=jst.undefined, strokeDashOffset=jst.undefined, strokeDash=jst.undefined, stroke=jst.undefined, **kwargs):
        kwds = dict(fill=fill, clip=clip, strokeOpacity=strokeOpacity, fillOpacity=fillOpacity, height=height, width=width, strokeWidth=strokeWidth, strokeDashOffset=strokeDashOffset, strokeDash=strokeDash, stroke=stroke)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(CellConfig, self).__init__(**kwargs)


class ChannelDefWithLegend(jst.JSONHasTraits):
    """ChannelDefWithLegend class

    

    Attributes
    ----------
    legend : object
        
    title : string
        Title for axis or legend.
    field : string
        Name of the field from which to pull a data value.
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    scale : object
        
    sort : object
        
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    """
    _additional_traits = True
    legend = jst.JSONInstance(_localname('Legend'))
    title = jst.JSONString(help='Title for axis or legend.')
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    type = Type()
    scale = jst.JSONInstance(_localname('Scale'))
    sort = jst.JSONAnyOf([jst.JSONInstance(_localname('SortField')), SortOrder()])
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    timeUnit = TimeUnit()
    aggregate = AggregateOp()

    def __init__(self, legend=jst.undefined, title=jst.undefined, field=jst.undefined, bin=jst.undefined, type=jst.undefined, scale=jst.undefined, sort=jst.undefined, value=jst.undefined, timeUnit=jst.undefined, aggregate=jst.undefined, **kwargs):
        kwds = dict(legend=legend, title=title, field=field, bin=bin, type=type, scale=scale, sort=sort, value=value, timeUnit=timeUnit, aggregate=aggregate)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ChannelDefWithLegend, self).__init__(**kwargs)


class Config(jst.JSONHasTraits):
    """Config class

    

    Attributes
    ----------
    axis : object
        Axis Config
    scale : object
        Scale Config
    cell : object
        Cell Config
    viewport : number
        The width and height of the on-screen viewport, in pixels. If
        necessary, clipping and scrolling will be applied.
    mark : object
        Mark Config
    countTitle : string
        Default axis and legend title for count fields.
    overlay : object
        Mark Overlay Config
    legend : object
        Legend Config
    facet : object
        Facet Config
    timeFormat : string
        Default datetime format for axis and legend labels. The format
        can be set directly on each axis and legend.
    background : string
        CSS color property to use as background of visualization.
        Default is `"transparent"`.
    numberFormat : string
        D3 Number format for axis labels and text tables. For example
        "s" for SI units.
    """
    _additional_traits = True
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Axis Config')
    scale = jst.JSONInstance(_localname('ScaleConfig'), help='Scale Config')
    cell = jst.JSONInstance(_localname('CellConfig'), help='Cell Config')
    viewport = jst.JSONNumber(help='The width and height of the on-screen viewport, in pixels. If [...]')
    mark = jst.JSONInstance(_localname('MarkConfig'), help='Mark Config')
    countTitle = jst.JSONString(help='Default axis and legend title for count fields.')
    overlay = jst.JSONInstance(_localname('OverlayConfig'), help='Mark Overlay Config')
    legend = jst.JSONInstance(_localname('LegendConfig'), help='Legend Config')
    facet = jst.JSONInstance(_localname('FacetConfig'), help='Facet Config')
    timeFormat = jst.JSONString(help='Default datetime format for axis and legend labels. The format [...]')
    background = jst.JSONString(help='CSS color property to use as background of visualization. [...]')
    numberFormat = jst.JSONString(help='D3 Number format for axis labels and text tables. For example [...]')

    def __init__(self, axis=jst.undefined, scale=jst.undefined, cell=jst.undefined, viewport=jst.undefined, mark=jst.undefined, countTitle=jst.undefined, overlay=jst.undefined, legend=jst.undefined, facet=jst.undefined, timeFormat=jst.undefined, background=jst.undefined, numberFormat=jst.undefined, **kwargs):
        kwds = dict(axis=axis, scale=scale, cell=cell, viewport=viewport, mark=mark, countTitle=countTitle, overlay=overlay, legend=legend, facet=facet, timeFormat=timeFormat, background=background, numberFormat=numberFormat)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Config, self).__init__(**kwargs)


class Data(jst.JSONHasTraits):
    """Data class

    

    Attributes
    ----------
    url : string
        A URL from which to load the data set. Use the format.type
        property
        to ensure the loaded data is correctly parsed.
    format : object
        An object that specifies the format for the data file or
        values.
    values : array
        Pass array of objects instead of a url to a file.
    """
    _additional_traits = True
    url = jst.JSONString(help='A URL from which to load the data set. Use the format.type [...]')
    format = jst.JSONInstance(_localname('DataFormat'), help='An object that specifies the format for the data file or values.')
    values = jst.JSONArray(jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True})), help='Pass array of objects instead of a url to a file.')

    def __init__(self, url=jst.undefined, format=jst.undefined, values=jst.undefined, **kwargs):
        kwds = dict(url=url, format=format, values=values)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Data, self).__init__(**kwargs)


class DataFormat(jst.JSONHasTraits):
    """DataFormat class

    

    Attributes
    ----------
    type : object
        Type of input data: `"json"`, `"csv"`, `"tsv"`.
        The default format type is determined by the extension of the
        file url.
        If no extension is detected, `"json"` will be used by default.
    parse : object
        A collection of parsing instructions can be used to define the
        data types of string-valued attributes in the JSON file. Each
        instruction is a name-value pair, where the name is the name
        of the attribute, and the value is the desired data type (one
        of `"number"`, `"boolean"` or `"date"`). For example,
        `"parse": {"modified_on":"date"}` ensures that the
        `modified_on` value in each row of the input data is parsed as
        a Date value. (See Datalib's [`dl.read.types` method](https://
        github.com/vega/datalib/wiki/Import#dl_read_types) for more
        information.)
    property : string
        JSON only) The JSON property containing the desired data.
        This parameter can be used when the loaded JSON file may have
        surrounding structure or meta-data.
        For example `"property": "values.features"` is equivalent to
        retrieving `json.values.features`
        from the loaded JSON object.
    feature : string
        The name of the TopoJSON object set to convert to a GeoJSON
        feature collection.
        For example, in a map of the world, there may be an object set
        named `"countries"`.
        Using the feature property, we can extract this set and
        generate a GeoJSON feature object for each country.
    mesh : string
        The name of the TopoJSON object set to convert to a mesh.
        Similar to the `feature` option, `mesh` extracts a named
        TopoJSON object set.
        Unlike the `feature` option, the corresponding geo data is
        returned as a single, unified mesh instance, not as individual
        GeoJSON features.
        Extracting a mesh is useful for more efficiently drawing
        borders or other geographic elements that you do not need to
        associate with specific regions such as individual countries,
        states or counties.
    """
    _additional_traits = True
    type = DataFormatType()
    parse = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='A collection of parsing instructions can be used to define the [...]')
    property = jst.JSONString(help='JSON only) The JSON property containing the desired data. This [...]')
    feature = jst.JSONString(help='The name of the TopoJSON object set to convert to a GeoJSON [...]')
    mesh = jst.JSONString(help='The name of the TopoJSON object set to convert to a mesh. [...]')

    def __init__(self, type=jst.undefined, parse=jst.undefined, property=jst.undefined, feature=jst.undefined, mesh=jst.undefined, **kwargs):
        kwds = dict(type=type, parse=parse, property=property, feature=feature, mesh=mesh)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DataFormat, self).__init__(**kwargs)


class DateTime(jst.JSONHasTraits):
    """DateTime class

    Object for defining datetime in Vega-Lite Filter.
    If both month and quarter are provided, month has higher
    precedence.
    `day` cannot be combined with other date.
    We accept string for month and day names.

    Attributes
    ----------
    date : number
        Integer value representing the date from 1-31.
    day : ['number', 'string']
        Value representing the day of week.  This can be one of: (1)
        integer value -- `1` represents Monday; (2) case-insensitive
        day name (e.g., `"Monday"`);  (3) case-insensitive,
        3-character short day name (e.g., `"Mon"`).   <br/>
        **Warning:** A DateTime definition object with `day`** should
        not be combined with `year`, `quarter`, `month`, or `date`.
    quarter : number
        Integer value representing the quarter of the year (from 1-4).
    year : number
        Integer value representing the year.
    minutes : number
        Integer value representing minute segment of a time from 0-59.
    milliseconds : number
        Integer value representing millisecond segment of a time.
    seconds : number
        Integer value representing second segment of a time from 0-59.
    month : ['number', 'string']
        One of: (1) integer value representing the month from
        `1`-`12`. `1` represents January;  (2) case-insensitive month
        name (e.g., `"January"`);  (3) case-insensitive, 3-character
        short month name (e.g., `"Jan"`).
    hours : number
        Integer value representing the hour of day from 0-23.
    """
    _additional_traits = True
    date = jst.JSONNumber(maximum=31, help='Integer value representing the date from 1-31.', minimum=1)
    day = jst.JSONUnion([jst.JSONNumber(), jst.JSONString()], help='Value representing the day of week. This can be one of: (1) [...]')
    quarter = jst.JSONNumber(maximum=4, help='Integer value representing the quarter of the year (from 1-4).', minimum=1)
    year = jst.JSONNumber(help='Integer value representing the year.')
    minutes = jst.JSONNumber(maximum=59, help='Integer value representing minute segment of a time from 0-59.', minimum=0)
    milliseconds = jst.JSONNumber(maximum=999, help='Integer value representing millisecond segment of a time.', minimum=0)
    seconds = jst.JSONNumber(maximum=59, help='Integer value representing second segment of a time from 0-59.', minimum=0)
    month = jst.JSONUnion([jst.JSONNumber(), jst.JSONString()], help='One of: (1) integer value representing the month from `1`-`12`. [...]')
    hours = jst.JSONNumber(maximum=23, help='Integer value representing the hour of day from 0-23.', minimum=0)

    def __init__(self, date=jst.undefined, day=jst.undefined, quarter=jst.undefined, year=jst.undefined, minutes=jst.undefined, milliseconds=jst.undefined, seconds=jst.undefined, month=jst.undefined, hours=jst.undefined, **kwargs):
        kwds = dict(date=date, day=day, quarter=quarter, year=year, minutes=minutes, milliseconds=milliseconds, seconds=seconds, month=month, hours=hours)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DateTime, self).__init__(**kwargs)


class Encoding(jst.JSONHasTraits):
    """Encoding class

    

    Attributes
    ----------
    opacity : object
        Opacity of the marks – either can be a value or in a range.
    shape : object
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
    text : object
        Text of the `text` mark.
    x2 : object
        X2 coordinates for ranged `bar`, `rule`, `area`
    y : object
        Y coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    row : object
        Vertical facets for trellis plots.
    path : object
        Order of data points in line marks.
    x : object
        X coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    column : object
        Horizontal facets for trellis plots.
    detail : object
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    color : object
        Color of the marks – either fill or stroke color based on mark
        type.
        (By default, fill color for `area`, `bar`, `tick`, `text`,
        `circle`, and `square` /
        stroke color for `line` and `point`.)
    size : object
        Size of the mark.
        - For `point`, `square` and `circle`
        – the symbol size, or pixel area of the mark.
        - For `bar` and `tick` – the bar and tick's size.
        - For `text` – the text's font size.
        - Size is currently unsupported for `line` and `area`.
    y2 : object
        Y2 coordinates for ranged `bar`, `rule`, `area`
    label : object
        
    order : object
        Layer order for non-stacked marks, or stack order for stacked
        marks.
    """
    _additional_traits = True
    opacity = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Opacity of the marks – either can be a value or in a range.')
    shape = jst.JSONInstance(_localname('ChannelDefWithLegend'), help="The symbol's shape (only for `point` marks). The supported [...]")
    text = jst.JSONInstance(_localname('FieldDef'), help='Text of the `text` mark.')
    x2 = jst.JSONInstance(_localname('FieldDef'), help='X2 coordinates for ranged `bar`, `rule`, `area`')
    y = jst.JSONInstance(_localname('PositionChannelDef'), help='Y coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    row = jst.JSONInstance(_localname('PositionChannelDef'), help='Vertical facets for trellis plots.')
    path = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Order of data points in line marks.')
    x = jst.JSONInstance(_localname('PositionChannelDef'), help='X coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    column = jst.JSONInstance(_localname('PositionChannelDef'), help='Horizontal facets for trellis plots.')
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    color = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Color of the marks – either fill or stroke color based on mark [...]')
    size = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Size of the mark. - For `point`, `square` and `circle` – the [...]')
    y2 = jst.JSONInstance(_localname('FieldDef'), help='Y2 coordinates for ranged `bar`, `rule`, `area`')
    label = jst.JSONInstance(_localname('FieldDef'))
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Layer order for non-stacked marks, or stack order for stacked marks.')

    def __init__(self, opacity=jst.undefined, shape=jst.undefined, text=jst.undefined, x2=jst.undefined, y=jst.undefined, row=jst.undefined, path=jst.undefined, x=jst.undefined, column=jst.undefined, detail=jst.undefined, color=jst.undefined, size=jst.undefined, y2=jst.undefined, label=jst.undefined, order=jst.undefined, **kwargs):
        kwds = dict(opacity=opacity, shape=shape, text=text, x2=x2, y=y, row=row, path=path, x=x, column=column, detail=detail, color=color, size=size, y2=y2, label=label, order=order)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Encoding, self).__init__(**kwargs)


class EqualFilter(jst.JSONHasTraits):
    """EqualFilter class

    

    Attributes
    ----------
    timeUnit : object
        Time unit for the field to be filtered.
    equal : object
        Value that the field should be equal to.
    field : string
        Field to be filtered.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    equal = jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))], help='Value that the field should be equal to.', allow_undefined=False)
    field = jst.JSONString(help='Field to be filtered.', allow_undefined=False)

    def __init__(self, timeUnit=jst.undefined, equal=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, equal=equal, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(EqualFilter, self).__init__(**kwargs)


class ExtendedUnitSpec(jst.JSONHasTraits):
    """ExtendedUnitSpec class

    Schema for a unit Vega-Lite specification, with the syntactic
    sugar extensions:
    - `row` and `column` are included in the encoding.
    - (Future) label, box plot
    Note: the spec could contain facet.

    Attributes
    ----------
    mark : object
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    encoding : object
        A key-value mapping between encoding channels and definition
        of fields.
    transform : object
        An object describing filter and new field calculation.
    height : number
        
    width : number
        
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    data : object
        An object describing the data source
    name : string
        Name of the visualization for later reference.
    config : object
        Configuration object
    """
    _additional_traits = True
    mark = Mark(allow_undefined=False)
    encoding = jst.JSONInstance(_localname('Encoding'), help='A key-value mapping between encoding channels and definition of [...]')
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    height = jst.JSONNumber()
    width = jst.JSONNumber()
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')

    def __init__(self, mark=jst.undefined, encoding=jst.undefined, transform=jst.undefined, height=jst.undefined, width=jst.undefined, description=jst.undefined, data=jst.undefined, name=jst.undefined, config=jst.undefined, **kwargs):
        kwds = dict(mark=mark, encoding=encoding, transform=transform, height=height, width=width, description=description, data=data, name=name, config=config)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ExtendedUnitSpec, self).__init__(**kwargs)


class Facet(jst.JSONHasTraits):
    """Facet class

    

    Attributes
    ----------
    column : object
        
    row : object
        
    """
    _additional_traits = True
    column = jst.JSONInstance(_localname('PositionChannelDef'))
    row = jst.JSONInstance(_localname('PositionChannelDef'))

    def __init__(self, column=jst.undefined, row=jst.undefined, **kwargs):
        kwds = dict(column=column, row=row)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Facet, self).__init__(**kwargs)


class FacetConfig(jst.JSONHasTraits):
    """FacetConfig class

    

    Attributes
    ----------
    axis : object
        Facet Axis Config
    grid : object
        Facet Grid Config
    scale : object
        Facet Scale Config
    cell : object
        Facet Cell Config
    """
    _additional_traits = True
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Facet Axis Config')
    grid = jst.JSONInstance(_localname('FacetGridConfig'), help='Facet Grid Config')
    scale = jst.JSONInstance(_localname('FacetScaleConfig'), help='Facet Scale Config')
    cell = jst.JSONInstance(_localname('CellConfig'), help='Facet Cell Config')

    def __init__(self, axis=jst.undefined, grid=jst.undefined, scale=jst.undefined, cell=jst.undefined, **kwargs):
        kwds = dict(axis=axis, grid=grid, scale=scale, cell=cell)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetConfig, self).__init__(**kwargs)


class FacetGridConfig(jst.JSONHasTraits):
    """FacetGridConfig class

    

    Attributes
    ----------
    color : string
        
    opacity : number
        
    offset : number
        
    """
    _additional_traits = True
    color = jst.JSONString()
    opacity = jst.JSONNumber()
    offset = jst.JSONNumber()

    def __init__(self, color=jst.undefined, opacity=jst.undefined, offset=jst.undefined, **kwargs):
        kwds = dict(color=color, opacity=opacity, offset=offset)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetGridConfig, self).__init__(**kwargs)


class FacetScaleConfig(jst.JSONHasTraits):
    """FacetScaleConfig class

    

    Attributes
    ----------
    round : boolean
        
    padding : number
        
    """
    _additional_traits = True
    round = jst.JSONBoolean()
    padding = jst.JSONNumber()

    def __init__(self, round=jst.undefined, padding=jst.undefined, **kwargs):
        kwds = dict(round=round, padding=padding)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetScaleConfig, self).__init__(**kwargs)


class FacetSpec(jst.JSONHasTraits):
    """FacetSpec class

    

    Attributes
    ----------
    facet : object
        
    config : object
        Configuration object
    transform : object
        An object describing filter and new field calculation.
    data : object
        An object describing the data source
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    name : string
        Name of the visualization for later reference.
    spec : object
        
    """
    _additional_traits = True
    facet = jst.JSONInstance(_localname('Facet'), allow_undefined=False)
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    spec = jst.JSONAnyOf([jst.JSONInstance(_localname('LayerSpec')), jst.JSONInstance(_localname('UnitSpec'))], allow_undefined=False)

    def __init__(self, facet=jst.undefined, config=jst.undefined, transform=jst.undefined, data=jst.undefined, description=jst.undefined, name=jst.undefined, spec=jst.undefined, **kwargs):
        kwds = dict(facet=facet, config=config, transform=transform, data=data, description=description, name=name, spec=spec)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetSpec, self).__init__(**kwargs)


class FieldDef(jst.JSONHasTraits):
    """FieldDef class

    

    Attributes
    ----------
    title : string
        Title for axis or legend.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    field : string
        Name of the field from which to pull a data value.
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    """
    _additional_traits = True
    title = jst.JSONString(help='Title for axis or legend.')
    timeUnit = TimeUnit()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    type = Type()
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    aggregate = AggregateOp()

    def __init__(self, title=jst.undefined, timeUnit=jst.undefined, bin=jst.undefined, type=jst.undefined, field=jst.undefined, value=jst.undefined, aggregate=jst.undefined, **kwargs):
        kwds = dict(title=title, timeUnit=timeUnit, bin=bin, type=type, field=field, value=value, aggregate=aggregate)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FieldDef, self).__init__(**kwargs)


class Formula(jst.JSONHasTraits):
    """Formula class

    Formula object for calculate.

    Attributes
    ----------
    field : string
        The field in which to store the computed formula value.
    expr : string
        A string containing an expression for the formula. Use the
        variable `datum` to to refer to the current data object.
    """
    _additional_traits = True
    field = jst.JSONString(help='The field in which to store the computed formula value.', allow_undefined=False)
    expr = jst.JSONString(help='A string containing an expression for the formula. Use the [...]', allow_undefined=False)

    def __init__(self, field=jst.undefined, expr=jst.undefined, **kwargs):
        kwds = dict(field=field, expr=expr)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Formula, self).__init__(**kwargs)


class LayerSpec(jst.JSONHasTraits):
    """LayerSpec class

    

    Attributes
    ----------
    transform : object
        An object describing filter and new field calculation.
    height : number
        
    width : number
        
    layers : array
        Unit specs that will be layered.
    config : object
        Configuration object
    data : object
        An object describing the data source
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    name : string
        Name of the visualization for later reference.
    """
    _additional_traits = True
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    height = jst.JSONNumber()
    width = jst.JSONNumber()
    layers = jst.JSONArray(jst.JSONInstance(_localname('UnitSpec')), help='Unit specs that will be layered.', allow_undefined=False)
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    name = jst.JSONString(help='Name of the visualization for later reference.')

    def __init__(self, transform=jst.undefined, height=jst.undefined, width=jst.undefined, layers=jst.undefined, config=jst.undefined, data=jst.undefined, description=jst.undefined, name=jst.undefined, **kwargs):
        kwds = dict(transform=transform, height=height, width=width, layers=layers, config=config, data=data, description=description, name=name)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LayerSpec, self).__init__(**kwargs)


class Legend(jst.JSONHasTraits):
    """Legend class

    

    Attributes
    ----------
    title : string
        A title for the legend. (Shows field name and its function by
        default.)
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    format : string
        An optional formatting pattern for legend labels. Vega uses
        D3\'s format pattern.
    margin : number
        The margin around the legend, in pixels
    symbolShape : string
        The shape of the legend symbol, can be the 'circle', 'square',
        'cross', 'diamond',
        'triangle-up', 'triangle-down', or else a custom SVG path
        string.
    titleFontWeight : string
        The font weight of the legend title.
    titleFontSize : number
        The font size of the legend title.
    orient : string
        The orientation of the legend. One of "left" or "right". This
        determines how the legend is positioned within the scene. The
        default is "right".
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    gradientHeight : number
        The height of the gradient, in pixels.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    labelOffset : number
        The offset of the legend label.
    padding : number
        The padding, in pixels, between the legend and axis.
    values : object
        Explicitly set the visible legend values.
    symbolColor : string
        The color of the legend symbol,
    gradientWidth : number
        The width of the gradient, in pixels.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    properties : object
        Optional mark property definitions for custom legend styling.
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    titleFont : string
        The font of the legend title.
    labelFontSize : number
        The font size of legend label.
    titleColor : string
        Optional mark property definitions for custom legend styling.
        The color of the legend title, can be in hex color code or
        regular color name.
    labelFont : string
        The font of the legend label.
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    symbolSize : number
        The size of the legend symbol, in pixels.
    """
    _additional_traits = True
    title = jst.JSONString(help='A title for the legend. (Shows field name and its function by [...]')
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    format = jst.JSONString(help='An optional formatting pattern for legend labels. Vega uses [...]')
    margin = jst.JSONNumber(help='The margin around the legend, in pixels')
    symbolShape = jst.JSONString(help="The shape of the legend symbol, can be the 'circle', 'square', [...]")
    titleFontWeight = jst.JSONString(help='The font weight of the legend title.')
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    orient = jst.JSONString(help='The orientation of the legend. One of "left" or "right". This [...]')
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.')
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='Explicitly set the visible legend values.')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom legend styling.')
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    titleFont = jst.JSONString(help='The font of the legend title.')
    labelFontSize = jst.JSONNumber(help='The font size of legend label.')
    titleColor = jst.JSONString(help='Optional mark property definitions for custom legend styling. [...]')
    labelFont = jst.JSONString(help='The font of the legend label.')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.')

    def __init__(self, title=jst.undefined, symbolStrokeWidth=jst.undefined, format=jst.undefined, margin=jst.undefined, symbolShape=jst.undefined, titleFontWeight=jst.undefined, titleFontSize=jst.undefined, orient=jst.undefined, labelAlign=jst.undefined, gradientHeight=jst.undefined, shortTimeLabels=jst.undefined, labelOffset=jst.undefined, padding=jst.undefined, values=jst.undefined, symbolColor=jst.undefined, gradientWidth=jst.undefined, gradientStrokeWidth=jst.undefined, properties=jst.undefined, labelBaseline=jst.undefined, offset=jst.undefined, gradientStrokeColor=jst.undefined, titleFont=jst.undefined, labelFontSize=jst.undefined, titleColor=jst.undefined, labelFont=jst.undefined, labelColor=jst.undefined, symbolSize=jst.undefined, **kwargs):
        kwds = dict(title=title, symbolStrokeWidth=symbolStrokeWidth, format=format, margin=margin, symbolShape=symbolShape, titleFontWeight=titleFontWeight, titleFontSize=titleFontSize, orient=orient, labelAlign=labelAlign, gradientHeight=gradientHeight, shortTimeLabels=shortTimeLabels, labelOffset=labelOffset, padding=padding, values=values, symbolColor=symbolColor, gradientWidth=gradientWidth, gradientStrokeWidth=gradientStrokeWidth, properties=properties, labelBaseline=labelBaseline, offset=offset, gradientStrokeColor=gradientStrokeColor, titleFont=titleFont, labelFontSize=labelFontSize, titleColor=titleColor, labelFont=labelFont, labelColor=labelColor, symbolSize=symbolSize)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Legend, self).__init__(**kwargs)


class LegendConfig(jst.JSONHasTraits):
    """LegendConfig class

    

    Attributes
    ----------
    titleColor : string
        Optional mark property definitions for custom legend styling.
        The color of the legend title, can be in hex color code or
        regular color name.
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    margin : number
        The margin around the legend, in pixels
    symbolShape : string
        The shape of the legend symbol, can be the 'circle', 'square',
        'cross', 'diamond',
        'triangle-up', 'triangle-down', or else a custom SVG path
        string.
    titleFontWeight : string
        The font weight of the legend title.
    titleFontSize : number
        The font size of the legend title.
    orient : string
        The orientation of the legend. One of "left" or "right". This
        determines how the legend is positioned within the scene. The
        default is "right".
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    gradientHeight : number
        The height of the gradient, in pixels.
    labelOffset : number
        The offset of the legend label.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    padding : number
        The padding, in pixels, between the legend and axis.
    symbolColor : string
        The color of the legend symbol,
    gradientWidth : number
        The width of the gradient, in pixels.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    properties : object
        Optional mark property definitions for custom legend styling.
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
    titleFont : string
        The font of the legend title.
    labelFontSize : number
        The font size of legend label.
    labelFont : string
        The font of the legend label.
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    symbolSize : number
        The size of the legend symbol, in pixels.
    """
    _additional_traits = True
    titleColor = jst.JSONString(help='Optional mark property definitions for custom legend styling. [...]')
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    margin = jst.JSONNumber(help='The margin around the legend, in pixels')
    symbolShape = jst.JSONString(help="The shape of the legend symbol, can be the 'circle', 'square', [...]")
    titleFontWeight = jst.JSONString(help='The font weight of the legend title.')
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    orient = jst.JSONString(help='The orientation of the legend. One of "left" or "right". This [...]')
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom legend styling.')
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    titleFont = jst.JSONString(help='The font of the legend title.')
    labelFontSize = jst.JSONNumber(help='The font size of legend label.')
    labelFont = jst.JSONString(help='The font of the legend label.')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.')

    def __init__(self, titleColor=jst.undefined, symbolStrokeWidth=jst.undefined, margin=jst.undefined, symbolShape=jst.undefined, titleFontWeight=jst.undefined, titleFontSize=jst.undefined, orient=jst.undefined, labelAlign=jst.undefined, gradientHeight=jst.undefined, labelOffset=jst.undefined, shortTimeLabels=jst.undefined, gradientStrokeColor=jst.undefined, padding=jst.undefined, symbolColor=jst.undefined, gradientWidth=jst.undefined, gradientStrokeWidth=jst.undefined, properties=jst.undefined, labelBaseline=jst.undefined, offset=jst.undefined, titleFont=jst.undefined, labelFontSize=jst.undefined, labelFont=jst.undefined, labelColor=jst.undefined, symbolSize=jst.undefined, **kwargs):
        kwds = dict(titleColor=titleColor, symbolStrokeWidth=symbolStrokeWidth, margin=margin, symbolShape=symbolShape, titleFontWeight=titleFontWeight, titleFontSize=titleFontSize, orient=orient, labelAlign=labelAlign, gradientHeight=gradientHeight, labelOffset=labelOffset, shortTimeLabels=shortTimeLabels, gradientStrokeColor=gradientStrokeColor, padding=padding, symbolColor=symbolColor, gradientWidth=gradientWidth, gradientStrokeWidth=gradientStrokeWidth, properties=properties, labelBaseline=labelBaseline, offset=offset, titleFont=titleFont, labelFontSize=labelFontSize, labelFont=labelFont, labelColor=labelColor, symbolSize=symbolSize)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LegendConfig, self).__init__(**kwargs)


class MarkConfig(jst.JSONHasTraits):
    """MarkConfig class

    

    Attributes
    ----------
    tickSize : number
        The width of the ticks.
    format : string
        The formatting pattern for text value. If not defined, this
        will be determined automatically.
    text : string
        Placeholder Text
    size : number
        The pixel area each the point. For example: in the case of
        circles, the radius is determined in part by the square root
        of the size value.
    filled : boolean
        Whether the shape\'s color should be used as fill color
        instead of stroke color.
        This is only applicable for "bar", "point", and "area".
        All marks except "point" marks are filled by default.
        See Mark Documentation (http://vega.github.io/vega-
        lite/docs/marks.html)
        for usage example.
    tension : number
        Depending on the interpolation type, sets the tension
        parameter.
    fontWeight : object
        The font weight (e.g., bold).
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    interpolate : object
        The line interpolation method to use. One of linear, step-
        before, step-after, basis, basis-open, cardinal, cardinal-
        open, monotone.
    orient : object
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        angle property.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        angle property.
    align : object
        The horizontal alignment of the text. One of left, right,
        center.
    baseline : object
        The vertical alignment of the text. One of top, middle,
        bottom.
    barThinSize : number
        The size of the bars on continuous scales.
    color : string
        Default color.
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the x and y properties. Values for theta
        follow the same convention of arc mark startAngle and endAngle
        properties: angles are measured in radians, with 0 indicating
        "north".
    applyColorToBackground : boolean
        Apply color field to background color instead of the text.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the x and y properties.
    tickThickness : number
        Thickness of the tick mark.
    opacity : number
        
    shape : object
        The symbol shape to use. One of circle (default), square,
        cross, diamond, triangle-up, or triangle-down, or a custom SVG
        path.
    angle : number
        The rotation angle of the text, in degrees.
    fontSize : number
        The font size, in pixels.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    strokeDash : array
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    ruleSize : number
        Size of rule mark.
    strokeWidth : number
        
    font : string
        The typeface to set the text in (e.g., Helvetica Neue).
    fontStyle : object
        The font style (e.g., italic).
    fillOpacity : number
        
    strokeOpacity : number
        
    barSize : number
        The size of the bars.  If unspecified, the default size is
        `bandSize-1`,
        which provides 1 pixel offset between bars.
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
    lineSize : number
        Size of line mark.
    stacked : object
        
    """
    _additional_traits = True
    tickSize = jst.JSONNumber(help='The width of the ticks.')
    format = jst.JSONString(help='The formatting pattern for text value. If not defined, this will [...]')
    text = jst.JSONString(help='Placeholder Text')
    size = jst.JSONNumber(help='The pixel area each the point. For example: in the case of [...]')
    filled = jst.JSONBoolean(help="Whether the shape\\'s color should be used as fill color instead [...]")
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter.')
    fontWeight = FontWeight()
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    interpolate = Interpolate()
    orient = Orient()
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    align = HorizontalAlign()
    baseline = VerticalAlign()
    barThinSize = jst.JSONNumber(help='The size of the bars on continuous scales.')
    color = jst.JSONString(help='Default color.')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')
    applyColorToBackground = jst.JSONBoolean(help='Apply color field to background color instead of the text.')
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]')
    tickThickness = jst.JSONNumber(help='Thickness of the tick mark.')
    opacity = jst.JSONNumber(maximum=1, minimum=0)
    shape = jst.JSONAnyOf([Shape(), jst.JSONString()], help='The symbol shape to use. One of circle (default), square, cross, [...]')
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.')
    fontSize = jst.JSONNumber(help='The font size, in pixels.')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    ruleSize = jst.JSONNumber(help='Size of rule mark.')
    strokeWidth = jst.JSONNumber(minimum=0)
    font = jst.JSONString(help='The typeface to set the text in (e.g., Helvetica Neue).')
    fontStyle = FontStyle()
    fillOpacity = jst.JSONNumber(maximum=1, minimum=0)
    strokeOpacity = jst.JSONNumber(maximum=1, minimum=0)
    barSize = jst.JSONNumber(help='The size of the bars. If unspecified, the default size is [...]')
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than config.color')
    lineSize = jst.JSONNumber(help='Size of line mark.')
    stacked = StackOffset()

    def __init__(self, tickSize=jst.undefined, format=jst.undefined, text=jst.undefined, size=jst.undefined, filled=jst.undefined, tension=jst.undefined, fontWeight=jst.undefined, strokeDashOffset=jst.undefined, interpolate=jst.undefined, orient=jst.undefined, dx=jst.undefined, dy=jst.undefined, align=jst.undefined, baseline=jst.undefined, barThinSize=jst.undefined, color=jst.undefined, theta=jst.undefined, applyColorToBackground=jst.undefined, radius=jst.undefined, tickThickness=jst.undefined, opacity=jst.undefined, shape=jst.undefined, angle=jst.undefined, fontSize=jst.undefined, fill=jst.undefined, shortTimeLabels=jst.undefined, strokeDash=jst.undefined, ruleSize=jst.undefined, strokeWidth=jst.undefined, font=jst.undefined, fontStyle=jst.undefined, fillOpacity=jst.undefined, strokeOpacity=jst.undefined, barSize=jst.undefined, stroke=jst.undefined, lineSize=jst.undefined, stacked=jst.undefined, **kwargs):
        kwds = dict(tickSize=tickSize, format=format, text=text, size=size, filled=filled, tension=tension, fontWeight=fontWeight, strokeDashOffset=strokeDashOffset, interpolate=interpolate, orient=orient, dx=dx, dy=dy, align=align, baseline=baseline, barThinSize=barThinSize, color=color, theta=theta, applyColorToBackground=applyColorToBackground, radius=radius, tickThickness=tickThickness, opacity=opacity, shape=shape, angle=angle, fontSize=fontSize, fill=fill, shortTimeLabels=shortTimeLabels, strokeDash=strokeDash, ruleSize=ruleSize, strokeWidth=strokeWidth, font=font, fontStyle=fontStyle, fillOpacity=fillOpacity, strokeOpacity=strokeOpacity, barSize=barSize, stroke=stroke, lineSize=lineSize, stacked=stacked)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MarkConfig, self).__init__(**kwargs)


class OneOfFilter(jst.JSONHasTraits):
    """OneOfFilter class

    

    Attributes
    ----------
    timeUnit : object
        time unit for the field to be filtered.
    field : string
        Field to be filtered
    oneOf : array
        A set of values that the `field`'s value should be a member
        of,
        for a data item included in the filtered data.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    field = jst.JSONString(help='Field to be filtered', allow_undefined=False)
    oneOf = jst.JSONArray(jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))]), help="A set of values that the `field`'s value should be a member of, [...]", allow_undefined=False)

    def __init__(self, timeUnit=jst.undefined, field=jst.undefined, oneOf=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, field=field, oneOf=oneOf)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OneOfFilter, self).__init__(**kwargs)


class OrderChannelDef(jst.JSONHasTraits):
    """OrderChannelDef class

    

    Attributes
    ----------
    title : string
        Title for axis or legend.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    field : string
        Name of the field from which to pull a data value.
    sort : object
        
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    """
    _additional_traits = True
    title = jst.JSONString(help='Title for axis or legend.')
    timeUnit = TimeUnit()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    type = Type()
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    sort = SortOrder()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    aggregate = AggregateOp()

    def __init__(self, title=jst.undefined, timeUnit=jst.undefined, bin=jst.undefined, type=jst.undefined, field=jst.undefined, sort=jst.undefined, value=jst.undefined, aggregate=jst.undefined, **kwargs):
        kwds = dict(title=title, timeUnit=timeUnit, bin=bin, type=type, field=field, sort=sort, value=value, aggregate=aggregate)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OrderChannelDef, self).__init__(**kwargs)


class OverlayConfig(jst.JSONHasTraits):
    """OverlayConfig class

    

    Attributes
    ----------
    lineStyle : object
        Default style for the overlayed point.
    area : object
        Type of overlay for area mark (line or linepoint)
    pointStyle : object
        Default style for the overlayed point.
    line : boolean
        Whether to overlay line with point.
    """
    _additional_traits = True
    lineStyle = jst.JSONInstance(_localname('MarkConfig'), help='Default style for the overlayed point.')
    area = AreaOverlay()
    pointStyle = jst.JSONInstance(_localname('MarkConfig'), help='Default style for the overlayed point.')
    line = jst.JSONBoolean(help='Whether to overlay line with point.')

    def __init__(self, lineStyle=jst.undefined, area=jst.undefined, pointStyle=jst.undefined, line=jst.undefined, **kwargs):
        kwds = dict(lineStyle=lineStyle, area=area, pointStyle=pointStyle, line=line)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OverlayConfig, self).__init__(**kwargs)


class PositionChannelDef(jst.JSONHasTraits):
    """PositionChannelDef class

    

    Attributes
    ----------
    axis : object
        
    title : string
        Title for axis or legend.
    field : string
        Name of the field from which to pull a data value.
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    scale : object
        
    sort : object
        
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    """
    _additional_traits = True
    axis = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Axis'))])
    title = jst.JSONString(help='Title for axis or legend.')
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    type = Type()
    scale = jst.JSONInstance(_localname('Scale'))
    sort = jst.JSONAnyOf([jst.JSONInstance(_localname('SortField')), SortOrder()])
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    timeUnit = TimeUnit()
    aggregate = AggregateOp()

    def __init__(self, axis=jst.undefined, title=jst.undefined, field=jst.undefined, bin=jst.undefined, type=jst.undefined, scale=jst.undefined, sort=jst.undefined, value=jst.undefined, timeUnit=jst.undefined, aggregate=jst.undefined, **kwargs):
        kwds = dict(axis=axis, title=title, field=field, bin=bin, type=type, scale=scale, sort=sort, value=value, timeUnit=timeUnit, aggregate=aggregate)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(PositionChannelDef, self).__init__(**kwargs)


class RangeFilter(jst.JSONHasTraits):
    """RangeFilter class

    

    Attributes
    ----------
    timeUnit : object
        time unit for the field to be filtered.
    field : string
        Field to be filtered
    range : array
        Array of inclusive minimum and maximum values
        for a field value of a data item to be included in the
        filtered data.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    field = jst.JSONString(help='Field to be filtered', allow_undefined=False)
    range = jst.JSONArray(jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(_localname('DateTime'))]), maxlen=2, minlen=2, help='Array of inclusive minimum and maximum values for a field value [...]', allow_undefined=False)

    def __init__(self, timeUnit=jst.undefined, field=jst.undefined, range=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, field=field, range=range)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(RangeFilter, self).__init__(**kwargs)


class Scale(jst.JSONHasTraits):
    """Scale class

    

    Attributes
    ----------
    clamp : boolean
        If true, values that exceed the data domain are clamped to
        either the minimum or maximum range value
    exponent : number
        Sets the exponent of the scale transformation. For pow scale
        types only, otherwise ignored.
    bandSize : object
        
    padding : number
        Applies spacing among ordinal elements in the scale range. The
        actual effect depends on how the scale is configured. If the
        __points__ parameter is `true`, the padding value is
        interpreted as a multiple of the spacing between points. A
        reasonable value is 1.0, such that the first and last point
        will be offset from the minimum and maximum value by half the
        distance between points. Otherwise, padding is typically in
        the range [0, 1] and corresponds to the fraction of space in
        the range interval to allocate to padding. A value of 0.5
        means that the range band width will be equal to the padding
        width. For more, see the [D3 ordinal scale
        documentation](https://github.com/mbostock/d3/wiki/Ordinal-
        Scales).
    type : object
        
    round : boolean
        If true, rounds numeric output values to integers. This can be
        helpful for snapping to the pixel grid.
    range : object
        The range of the scale, representing the set of visual values.
        For numeric values, the range can take the form of a two-
        element array with minimum and maximum values. For ordinal or
        quantized data, the range may by an array of desired output
        values, which are mapped to elements in the specified domain.
        For ordinal scales only, the range can be defined using a
        DataRef: the range values are then drawn dynamically from a
        backing data set.
    zero : boolean
        If `true`, ensures that a zero baseline value is included in
        the scale domain.
        Default value: `true` for `x` and `y` channel if the
        quantitative field is not binned
        and no custom `domain` is provided; `false` otherwise.
    domain : object
        The domain of the scale, representing the set of data values.
        For quantitative data, this can take the form of a two-element
        array with minimum and maximum values. For ordinal/categorical
        data, this may be an array of valid input values.
    useRawDomain : boolean
        Uses the source data range as scale domain instead of
        aggregated data for aggregate axis.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"stdev"`, `"stdevp"`, `"median"`, `"q1"`, `"q3"`, `"min"`,
        `"max"`). For other aggregations that produce values outside
        of the raw data domain (e.g. `"count"`, `"sum"`), this
        property is ignored.
    nice : object
        If specified, modifies the scale domain to use a more human-
        friendly value range. If specified as a true boolean, modifies
        the scale domain to use a more human-friendly number range
        (e.g., 7 instead of 6.96). If specified as a string, modifies
        the scale domain to use a more human-friendly value range. For
        time and utc scale types only, the nice value should be a
        string indicating the desired time interval.
    """
    _additional_traits = True
    clamp = jst.JSONBoolean(help='If true, values that exceed the data domain are clamped to [...]')
    exponent = jst.JSONNumber(help='Sets the exponent of the scale transformation. For pow scale [...]')
    bandSize = jst.JSONAnyOf([jst.JSONNumber(), BandSize()])
    padding = jst.JSONNumber(help='Applies spacing among ordinal elements in the scale range. The [...]')
    type = ScaleType()
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')
    range = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString())], help='The range of the scale, representing the set of visual values. [...]')
    zero = jst.JSONBoolean(help='If `true`, ensures that a zero baseline value is included in the [...]')
    domain = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='The domain of the scale, representing the set of data values. [...]')
    useRawDomain = jst.JSONBoolean(help='Uses the source data range as scale domain instead of aggregated [...]')
    nice = jst.JSONAnyOf([jst.JSONBoolean(), NiceTime()], help='If specified, modifies the scale domain to use a more human- [...]')

    def __init__(self, clamp=jst.undefined, exponent=jst.undefined, bandSize=jst.undefined, padding=jst.undefined, type=jst.undefined, round=jst.undefined, range=jst.undefined, zero=jst.undefined, domain=jst.undefined, useRawDomain=jst.undefined, nice=jst.undefined, **kwargs):
        kwds = dict(clamp=clamp, exponent=exponent, bandSize=bandSize, padding=padding, type=type, round=round, range=range, zero=zero, domain=domain, useRawDomain=useRawDomain, nice=nice)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Scale, self).__init__(**kwargs)


class ScaleConfig(jst.JSONHasTraits):
    """ScaleConfig class

    

    Attributes
    ----------
    padding : number
        Default padding for `x` and `y` ordinal scales.
    opacity : array
        Default range for opacity.
    fontSizeRange : array
        Default range for font size scale
    textBandWidth : number
        Default band width for `x` ordinal scale when is mark is
        `text`.
    useRawDomain : boolean
        Uses the source data range as scale domain instead of
        aggregated data for aggregate axis.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"stdev"`, `"stdevp"`, `"median"`, `"q1"`, `"q3"`, `"min"`,
        `"max"`). For other aggregations that produce values outside
        of the raw data domain (e.g. `"count"`, `"sum"`), this
        property is ignored.
    round : boolean
        If true, rounds numeric output values to integers.
        This can be helpful for snapping to the pixel grid.
        (Only available for `x`, `y`, `size`, `row`, and `column`
        scales.)
    barSizeRange : array
        Default range for bar size scale
    ruleSizeRange : array
        Default range for rule stroke widths
    sequentialColorRange : object
        Default range for ordinal / continuous color scale
    tickSizeRange : array
        Default range for tick spans
    bandSize : object
        Default band size for (1) `y` ordinal scale,
        and (2) `x` ordinal scale when the mark is not `text`.
    shapeRange : object
        Default range for shape
    pointSizeRange : array
        Default range for bar size scale
    nominalColorRange : object
        Default range for nominal color scale
    """
    _additional_traits = True
    padding = jst.JSONNumber(help='Default padding for `x` and `y` ordinal scales.')
    opacity = jst.JSONArray(jst.JSONNumber(), help='Default range for opacity.')
    fontSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for font size scale')
    textBandWidth = jst.JSONNumber(help='Default band width for `x` ordinal scale when is mark is `text`.', minimum=0)
    useRawDomain = jst.JSONBoolean(help='Uses the source data range as scale domain instead of aggregated [...]')
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')
    barSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for bar size scale')
    ruleSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for rule stroke widths')
    sequentialColorRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for ordinal / continuous color scale')
    tickSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for tick spans')
    bandSize = jst.JSONAnyOf([jst.JSONNumber(), BandSize()], help='Default band size for (1) `y` ordinal scale, and (2) `x` ordinal [...]')
    shapeRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for shape')
    pointSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for bar size scale')
    nominalColorRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for nominal color scale')

    def __init__(self, padding=jst.undefined, opacity=jst.undefined, fontSizeRange=jst.undefined, textBandWidth=jst.undefined, useRawDomain=jst.undefined, round=jst.undefined, barSizeRange=jst.undefined, ruleSizeRange=jst.undefined, sequentialColorRange=jst.undefined, tickSizeRange=jst.undefined, bandSize=jst.undefined, shapeRange=jst.undefined, pointSizeRange=jst.undefined, nominalColorRange=jst.undefined, **kwargs):
        kwds = dict(padding=padding, opacity=opacity, fontSizeRange=fontSizeRange, textBandWidth=textBandWidth, useRawDomain=useRawDomain, round=round, barSizeRange=barSizeRange, ruleSizeRange=ruleSizeRange, sequentialColorRange=sequentialColorRange, tickSizeRange=tickSizeRange, bandSize=bandSize, shapeRange=shapeRange, pointSizeRange=pointSizeRange, nominalColorRange=nominalColorRange)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ScaleConfig, self).__init__(**kwargs)


class SortField(jst.JSONHasTraits):
    """SortField class

    

    Attributes
    ----------
    field : string
        The field name to aggregate over.
    op : object
        The sort aggregation operator
    order : object
        
    """
    _additional_traits = True
    field = jst.JSONString(help='The field name to aggregate over.', allow_undefined=False)
    op = AggregateOp(allow_undefined=False)
    order = SortOrder()

    def __init__(self, field=jst.undefined, op=jst.undefined, order=jst.undefined, **kwargs):
        kwds = dict(field=field, op=op, order=order)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SortField, self).__init__(**kwargs)


class Transform(jst.JSONHasTraits):
    """Transform class

    

    Attributes
    ----------
    filter : object
        A string containing the filter Vega expression. Use `datum` to
        refer to the current data object.
    calculate : array
        Calculate new field(s) using the provided expresssion(s).
        Calculation are applied before filter.
    filterInvalid : boolean
        Whether to filter invalid values (`null` and `NaN`) from the
        data. By default (`undefined`), only quantitative and temporal
        fields are filtered. If set to `true`, all data items with
        null values are filtered. If `false`, all data items are
        included.
    """
    _additional_traits = True
    filter = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter')), jst.JSONArray(jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter'))]))], help='A string containing the filter Vega expression. Use `datum` to [...]')
    calculate = jst.JSONArray(jst.JSONInstance(_localname('Formula')), help='Calculate new field(s) using the provided expresssion(s). [...]')
    filterInvalid = jst.JSONBoolean(help='Whether to filter invalid values (`null` and `NaN`) from the [...]')

    def __init__(self, filter=jst.undefined, calculate=jst.undefined, filterInvalid=jst.undefined, **kwargs):
        kwds = dict(filter=filter, calculate=calculate, filterInvalid=filterInvalid)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Transform, self).__init__(**kwargs)


class UnitEncoding(jst.JSONHasTraits):
    """UnitEncoding class

    

    Attributes
    ----------
    opacity : object
        Opacity of the marks – either can be a value or in a range.
    shape : object
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
    text : object
        Text of the `text` mark.
    x2 : object
        X2 coordinates for ranged `bar`, `rule`, `area`
    y : object
        Y coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    y2 : object
        Y2 coordinates for ranged `bar`, `rule`, `area`
    path : object
        Order of data points in line marks.
    x : object
        X coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    label : object
        
    color : object
        Color of the marks – either fill or stroke color based on mark
        type.
        (By default, fill color for `area`, `bar`, `tick`, `text`,
        `circle`, and `square` /
        stroke color for `line` and `point`.)
    size : object
        Size of the mark.
        - For `point`, `square` and `circle`
        – the symbol size, or pixel area of the mark.
        - For `bar` and `tick` – the bar and tick's size.
        - For `text` – the text's font size.
        - Size is currently unsupported for `line` and `area`.
    detail : object
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    order : object
        Layer order for non-stacked marks, or stack order for stacked
        marks.
    """
    _additional_traits = True
    opacity = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Opacity of the marks – either can be a value or in a range.')
    shape = jst.JSONInstance(_localname('ChannelDefWithLegend'), help="The symbol's shape (only for `point` marks). The supported [...]")
    text = jst.JSONInstance(_localname('FieldDef'), help='Text of the `text` mark.')
    x2 = jst.JSONInstance(_localname('FieldDef'), help='X2 coordinates for ranged `bar`, `rule`, `area`')
    y = jst.JSONInstance(_localname('PositionChannelDef'), help='Y coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    y2 = jst.JSONInstance(_localname('FieldDef'), help='Y2 coordinates for ranged `bar`, `rule`, `area`')
    path = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Order of data points in line marks.')
    x = jst.JSONInstance(_localname('PositionChannelDef'), help='X coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    label = jst.JSONInstance(_localname('FieldDef'))
    color = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Color of the marks – either fill or stroke color based on mark [...]')
    size = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Size of the mark. - For `point`, `square` and `circle` – the [...]')
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Layer order for non-stacked marks, or stack order for stacked marks.')

    def __init__(self, opacity=jst.undefined, shape=jst.undefined, text=jst.undefined, x2=jst.undefined, y=jst.undefined, y2=jst.undefined, path=jst.undefined, x=jst.undefined, label=jst.undefined, color=jst.undefined, size=jst.undefined, detail=jst.undefined, order=jst.undefined, **kwargs):
        kwds = dict(opacity=opacity, shape=shape, text=text, x2=x2, y=y, y2=y2, path=path, x=x, label=label, color=color, size=size, detail=detail, order=order)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UnitEncoding, self).__init__(**kwargs)


class UnitSpec(jst.JSONHasTraits):
    """UnitSpec class

    

    Attributes
    ----------
    mark : object
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    encoding : object
        A key-value mapping between encoding channels and definition
        of fields.
    transform : object
        An object describing filter and new field calculation.
    height : number
        
    width : number
        
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    data : object
        An object describing the data source
    name : string
        Name of the visualization for later reference.
    config : object
        Configuration object
    """
    _additional_traits = True
    mark = Mark(allow_undefined=False)
    encoding = jst.JSONInstance(_localname('UnitEncoding'), help='A key-value mapping between encoding channels and definition of [...]')
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    height = jst.JSONNumber()
    width = jst.JSONNumber()
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')

    def __init__(self, mark=jst.undefined, encoding=jst.undefined, transform=jst.undefined, height=jst.undefined, width=jst.undefined, description=jst.undefined, data=jst.undefined, name=jst.undefined, config=jst.undefined, **kwargs):
        kwds = dict(mark=mark, encoding=encoding, transform=transform, height=height, width=width, description=description, data=data, name=name, config=config)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UnitSpec, self).__init__(**kwargs)
