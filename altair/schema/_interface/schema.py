# Auto-generated by altair_parser: do not modify file directly
# - parser version: 0.1.dev
# - date:    2017-07-19 11:12:59



import traitlets as T
from . import jstraitlets as jst


def _localname(name):
    """Construct an object name relative to the local module"""
    return "{0}.{1}".format(__name__, name)



class AggregateOp(jst.JSONEnum):
    """
    One of ['values', 'count', 'valid', 'missing', 'distinct', 'sum', 'mean', 'average', 'variance', 'variancep', 'stdev', 'stdevp', 'median', 'q1', 'q3', 'modeskew', 'min', 'max', 'argmin', 'argmax']
    """
    values = ['values', 'count', 'valid', 'missing', 'distinct', 'sum', 'mean', 'average', 'variance', 'variancep', 'stdev', 'stdevp', 'median', 'q1', 'q3', 'modeskew', 'min', 'max', 'argmin', 'argmax']
    def __init__(self, **kwargs):
        super(AggregateOp, self).__init__(self.values, **kwargs)


class AreaOverlay(jst.JSONEnum):
    """
    One of ['line', 'linepoint', 'none']
    """
    values = ['line', 'linepoint', 'none']
    def __init__(self, **kwargs):
        super(AreaOverlay, self).__init__(self.values, **kwargs)


class AxisOrient(jst.JSONEnum):
    """
    One of ['top', 'right', 'left', 'bottom']
    """
    values = ['top', 'right', 'left', 'bottom']
    def __init__(self, **kwargs):
        super(AxisOrient, self).__init__(self.values, **kwargs)


class BandSize(jst.JSONEnum):
    """
    One of ['fit']
    """
    values = ['fit']
    def __init__(self, **kwargs):
        super(BandSize, self).__init__(self.values, **kwargs)


class DataFormatType(jst.JSONEnum):
    """
    One of ['json', 'csv', 'tsv', 'topojson']
    """
    values = ['json', 'csv', 'tsv', 'topojson']
    def __init__(self, **kwargs):
        super(DataFormatType, self).__init__(self.values, **kwargs)


class FontStyle(jst.JSONEnum):
    """
    One of ['normal', 'italic']
    """
    values = ['normal', 'italic']
    def __init__(self, **kwargs):
        super(FontStyle, self).__init__(self.values, **kwargs)


class FontWeight(jst.JSONEnum):
    """
    One of ['normal', 'bold']
    """
    values = ['normal', 'bold']
    def __init__(self, **kwargs):
        super(FontWeight, self).__init__(self.values, **kwargs)


class HorizontalAlign(jst.JSONEnum):
    """
    One of ['left', 'right', 'center']
    """
    values = ['left', 'right', 'center']
    def __init__(self, **kwargs):
        super(HorizontalAlign, self).__init__(self.values, **kwargs)


class Interpolate(jst.JSONEnum):
    """
    One of ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    """
    values = ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    def __init__(self, **kwargs):
        super(Interpolate, self).__init__(self.values, **kwargs)


class Mark(jst.JSONEnum):
    """
    One of ['area', 'bar', 'line', 'point', 'text', 'tick', 'rule', 'circle', 'square', 'errorBar']
    """
    values = ['area', 'bar', 'line', 'point', 'text', 'tick', 'rule', 'circle', 'square', 'errorBar']
    def __init__(self, **kwargs):
        super(Mark, self).__init__(self.values, **kwargs)


class NiceTime(jst.JSONEnum):
    """
    One of ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    """
    values = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    def __init__(self, **kwargs):
        super(NiceTime, self).__init__(self.values, **kwargs)


class Orient(jst.JSONEnum):
    """
    One of ['horizontal', 'vertical']
    """
    values = ['horizontal', 'vertical']
    def __init__(self, **kwargs):
        super(Orient, self).__init__(self.values, **kwargs)


class ScaleType(jst.JSONEnum):
    """
    One of ['linear', 'log', 'pow', 'sqrt', 'quantile', 'quantize', 'ordinal', 'time', 'utc']
    """
    values = ['linear', 'log', 'pow', 'sqrt', 'quantile', 'quantize', 'ordinal', 'time', 'utc']
    def __init__(self, **kwargs):
        super(ScaleType, self).__init__(self.values, **kwargs)


class Shape(jst.JSONEnum):
    """
    One of ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down']
    """
    values = ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down']
    def __init__(self, **kwargs):
        super(Shape, self).__init__(self.values, **kwargs)


class SortOrder(jst.JSONEnum):
    """
    One of ['ascending', 'descending', 'none']
    """
    values = ['ascending', 'descending', 'none']
    def __init__(self, **kwargs):
        super(SortOrder, self).__init__(self.values, **kwargs)


class StackOffset(jst.JSONEnum):
    """
    One of ['zero', 'center', 'normalize', 'none']
    """
    values = ['zero', 'center', 'normalize', 'none']
    def __init__(self, **kwargs):
        super(StackOffset, self).__init__(self.values, **kwargs)


class TimeUnit(jst.JSONEnum):
    """
    One of ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds', 'quarter', 'yearquarter', 'quartermonth', 'yearquartermonth']
    """
    values = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds', 'quarter', 'yearquarter', 'quartermonth', 'yearquartermonth']
    def __init__(self, **kwargs):
        super(TimeUnit, self).__init__(self.values, **kwargs)


class Type(jst.JSONEnum):
    """
    One of ['quantitative', 'ordinal', 'temporal', 'nominal']
    """
    values = ['quantitative', 'ordinal', 'temporal', 'nominal']
    def __init__(self, **kwargs):
        super(Type, self).__init__(self.values, **kwargs)


class VerticalAlign(jst.JSONEnum):
    """
    One of ['top', 'middle', 'bottom']
    """
    values = ['top', 'middle', 'bottom']
    def __init__(self, **kwargs):
        super(VerticalAlign, self).__init__(self.values, **kwargs)


class Root(jst.AnyOfObject):
    _classes = (_localname('ExtendedUnitSpec'),_localname('FacetSpec'),_localname('LayerSpec'),)


class Axis(jst.JSONHasTraits):
    """Axis class

    

    Attributes
    ----------
    axisWidth : number
        Width of the axis line
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
    format : string
        The formatting pattern for axis labels.
    gridDash : array
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    tickSizeMajor : number
        The size, in pixels, of major ticks.
    tickSizeMinor : number
        The size, in pixels, of minor ticks.
    subdivide : number
        If provided, sets the number of minor ticks between major
        ticks (the value 9 results in decimal subdivision). Only
        applicable for axes visualizing quantitative scales.
    axisColor : string
        Color of axis line.
    labelMaxLength : number
        Truncate labels that are too long.
    titleOffset : number
        A title offset value for the axis.
    tickLabelFont : string
        The font of the tick label.
    tickSize : number
        The size, in pixels, of major, minor and end ticks.
    titleFontWeight : string
        Weight of the title.
    tickLabelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    labelAngle : number
        The rotation angle of the axis labels.
    gridWidth : number
        The grid width, in pixels.
    labelBaseline : string
        Text baseline for the label.
    values : object
        
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
    grid : boolean
        A flag indicate if gridlines should be created in addition to
        ticks. If `grid` is unspecified, the default value is `true`
        for ROW and COL. For X and Y, the default value is `true` for
        quantitative and time fields and `false` otherwise.
    tickColor : string
        The color of the axis's tick.
    labels : boolean
        Enable or disable labels.
    gridColor : string
        Color of gridlines.
    tickLabelFontSize : number
        The font size of label, in pixels.
    ticks : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description. By default, this is
        automatically based on cell size and characterWidth property.
    layer : string
        A string indicating if the axis (and any gridlines) should be
        placed above or below the data marks.
    title : string
        A title for the axis. Shows field name and its function by
        default.
    properties : object
        Optional mark property definitions for custom axis styling.
    labelAlign : string
        Text alignment for the Label.
    titleFontSize : number
        Size of the title.
    tickSizeEnd : number
        The size, in pixels, of end ticks.
    tickPadding : number
        The padding, in pixels, between ticks and text labels.
    shortTimeLabels : boolean
        Whether month and day names should be abbreviated.
    tickWidth : number
        The width, in pixels, of ticks.
    titleFont : string
        Font of the title.
    characterWidth : number
        Character width for automatically determining title max
        length.
    orient : object
        The orientation of the axis. One of top, bottom, left or
        right. The orientation can be used to further specialize the
        axis type (e.g., a y axis oriented for the right edge of the
        chart).
    """
    _additional_traits = True
    axisWidth = jst.JSONNumber(help='Width of the axis line')
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1])')
    format = jst.JSONString(help='The formatting pattern for axis labels.')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    tickSizeMajor = jst.JSONNumber(help='The size, in pixels, of major ticks.', minimum=0)
    tickSizeMinor = jst.JSONNumber(help='The size, in pixels, of minor ticks.', minimum=0)
    subdivide = jst.JSONNumber(help='If provided, sets the number of minor ticks between major ticks [...]')
    axisColor = jst.JSONString(help='Color of axis line.')
    labelMaxLength = jst.JSONNumber(help='Truncate labels that are too long.', minimum=1)
    titleOffset = jst.JSONNumber(help='A title offset value for the axis.')
    tickLabelFont = jst.JSONString(help='The font of the tick label.')
    tickSize = jst.JSONNumber(help='The size, in pixels, of major, minor and end ticks.', minimum=0)
    titleFontWeight = jst.JSONString(help='Weight of the title.')
    tickLabelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels.')
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.')
    labelBaseline = jst.JSONString(help='Text baseline for the label.')
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))])
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    grid = jst.JSONBoolean(help='A flag indicate if gridlines should be created in addition to [...]')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    labels = jst.JSONBoolean(help='Enable or disable labels.')
    gridColor = jst.JSONString(help='Color of gridlines.')
    tickLabelFontSize = jst.JSONNumber(help='The font size of label, in pixels.')
    ticks = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]', minimum=0)
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]', minimum=0)
    layer = jst.JSONString(help='A string indicating if the axis (and any gridlines) should be [...]')
    title = jst.JSONString(help='A title for the axis. Shows field name and its function by default.')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom axis styling.')
    labelAlign = jst.JSONString(help='Text alignment for the Label.')
    titleFontSize = jst.JSONNumber(help='Size of the title.')
    tickSizeEnd = jst.JSONNumber(help='The size, in pixels, of end ticks.', minimum=0)
    tickPadding = jst.JSONNumber(help='The padding, in pixels, between ticks and text labels.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month and day names should be abbreviated.')
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.')
    titleFont = jst.JSONString(help='Font of the title.')
    characterWidth = jst.JSONNumber(help='Character width for automatically determining title max length.')
    orient = AxisOrient()

    def __init__(self, axisWidth=jst.undefined, gridOpacity=jst.undefined, format=jst.undefined, gridDash=jst.undefined, titleColor=jst.undefined, tickSizeMajor=jst.undefined, tickSizeMinor=jst.undefined, subdivide=jst.undefined, axisColor=jst.undefined, labelMaxLength=jst.undefined, titleOffset=jst.undefined, tickLabelFont=jst.undefined, tickSize=jst.undefined, titleFontWeight=jst.undefined, tickLabelColor=jst.undefined, labelAngle=jst.undefined, gridWidth=jst.undefined, labelBaseline=jst.undefined, values=jst.undefined, offset=jst.undefined, grid=jst.undefined, tickColor=jst.undefined, labels=jst.undefined, gridColor=jst.undefined, tickLabelFontSize=jst.undefined, ticks=jst.undefined, titleMaxLength=jst.undefined, layer=jst.undefined, title=jst.undefined, properties=jst.undefined, labelAlign=jst.undefined, titleFontSize=jst.undefined, tickSizeEnd=jst.undefined, tickPadding=jst.undefined, shortTimeLabels=jst.undefined, tickWidth=jst.undefined, titleFont=jst.undefined, characterWidth=jst.undefined, orient=jst.undefined, **kwargs):
        kwds = dict(axisWidth=axisWidth, gridOpacity=gridOpacity, format=format, gridDash=gridDash, titleColor=titleColor, tickSizeMajor=tickSizeMajor, tickSizeMinor=tickSizeMinor, subdivide=subdivide, axisColor=axisColor, labelMaxLength=labelMaxLength, titleOffset=titleOffset, tickLabelFont=tickLabelFont, tickSize=tickSize, titleFontWeight=titleFontWeight, tickLabelColor=tickLabelColor, labelAngle=labelAngle, gridWidth=gridWidth, labelBaseline=labelBaseline, values=values, offset=offset, grid=grid, tickColor=tickColor, labels=labels, gridColor=gridColor, tickLabelFontSize=tickLabelFontSize, ticks=ticks, titleMaxLength=titleMaxLength, layer=layer, title=title, properties=properties, labelAlign=labelAlign, titleFontSize=titleFontSize, tickSizeEnd=tickSizeEnd, tickPadding=tickPadding, shortTimeLabels=shortTimeLabels, tickWidth=tickWidth, titleFont=titleFont, characterWidth=characterWidth, orient=orient)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Axis, self).__init__(**kwargs)


class AxisConfig(jst.JSONHasTraits):
    """AxisConfig class

    

    Attributes
    ----------
    axisWidth : number
        Width of the axis line
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
    layer : string
        A string indicating if the axis (and any gridlines) should be
        placed above or below the data marks.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    tickSizeMajor : number
        The size, in pixels, of major ticks.
    tickSizeMinor : number
        The size, in pixels, of minor ticks.
    subdivide : number
        If provided, sets the number of minor ticks between major
        ticks (the value 9 results in decimal subdivision). Only
        applicable for axes visualizing quantitative scales.
    axisColor : string
        Color of axis line.
    labelMaxLength : number
        Truncate labels that are too long.
    titleOffset : number
        A title offset value for the axis.
    tickLabelFont : string
        The font of the tick label.
    tickSize : number
        The size, in pixels, of major, minor and end ticks.
    titleFontWeight : string
        Weight of the title.
    tickLabelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    tickColor : string
        The color of the axis's tick.
    gridWidth : number
        The grid width, in pixels.
    labelBaseline : string
        Text baseline for the label.
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
    grid : boolean
        A flag indicate if gridlines should be created in addition to
        ticks. If `grid` is unspecified, the default value is `true`
        for ROW and COL. For X and Y, the default value is `true` for
        quantitative and time fields and `false` otherwise.
    labelAngle : number
        The rotation angle of the axis labels.
    labels : boolean
        Enable or disable labels.
    gridDash : array
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    gridColor : string
        Color of gridlines.
    tickLabelFontSize : number
        The font size of label, in pixels.
    ticks : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description. By default, this is
        automatically based on cell size and characterWidth property.
    properties : object
        Optional mark property definitions for custom axis styling.
    labelAlign : string
        Text alignment for the Label.
    titleFontSize : number
        Size of the title.
    tickSizeEnd : number
        The size, in pixels, of end ticks.
    tickPadding : number
        The padding, in pixels, between ticks and text labels.
    shortTimeLabels : boolean
        Whether month and day names should be abbreviated.
    tickWidth : number
        The width, in pixels, of ticks.
    characterWidth : number
        Character width for automatically determining title max
        length.
    titleFont : string
        Font of the title.
    """
    _additional_traits = True
    axisWidth = jst.JSONNumber(help='Width of the axis line')
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1])')
    layer = jst.JSONString(help='A string indicating if the axis (and any gridlines) should be [...]')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    tickSizeMajor = jst.JSONNumber(help='The size, in pixels, of major ticks.', minimum=0)
    tickSizeMinor = jst.JSONNumber(help='The size, in pixels, of minor ticks.', minimum=0)
    subdivide = jst.JSONNumber(help='If provided, sets the number of minor ticks between major ticks [...]')
    axisColor = jst.JSONString(help='Color of axis line.')
    labelMaxLength = jst.JSONNumber(help='Truncate labels that are too long.', minimum=1)
    titleOffset = jst.JSONNumber(help='A title offset value for the axis.')
    tickLabelFont = jst.JSONString(help='The font of the tick label.')
    tickSize = jst.JSONNumber(help='The size, in pixels, of major, minor and end ticks.', minimum=0)
    titleFontWeight = jst.JSONString(help='Weight of the title.')
    tickLabelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.')
    labelBaseline = jst.JSONString(help='Text baseline for the label.')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    grid = jst.JSONBoolean(help='A flag indicate if gridlines should be created in addition to [...]')
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels.')
    labels = jst.JSONBoolean(help='Enable or disable labels.')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    gridColor = jst.JSONString(help='Color of gridlines.')
    tickLabelFontSize = jst.JSONNumber(help='The font size of label, in pixels.')
    ticks = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]', minimum=0)
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]', minimum=0)
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom axis styling.')
    labelAlign = jst.JSONString(help='Text alignment for the Label.')
    titleFontSize = jst.JSONNumber(help='Size of the title.')
    tickSizeEnd = jst.JSONNumber(help='The size, in pixels, of end ticks.', minimum=0)
    tickPadding = jst.JSONNumber(help='The padding, in pixels, between ticks and text labels.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month and day names should be abbreviated.')
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.')
    characterWidth = jst.JSONNumber(help='Character width for automatically determining title max length.')
    titleFont = jst.JSONString(help='Font of the title.')

    def __init__(self, axisWidth=jst.undefined, gridOpacity=jst.undefined, layer=jst.undefined, titleColor=jst.undefined, tickSizeMajor=jst.undefined, tickSizeMinor=jst.undefined, subdivide=jst.undefined, axisColor=jst.undefined, labelMaxLength=jst.undefined, titleOffset=jst.undefined, tickLabelFont=jst.undefined, tickSize=jst.undefined, titleFontWeight=jst.undefined, tickLabelColor=jst.undefined, tickColor=jst.undefined, gridWidth=jst.undefined, labelBaseline=jst.undefined, offset=jst.undefined, grid=jst.undefined, labelAngle=jst.undefined, labels=jst.undefined, gridDash=jst.undefined, gridColor=jst.undefined, tickLabelFontSize=jst.undefined, ticks=jst.undefined, titleMaxLength=jst.undefined, properties=jst.undefined, labelAlign=jst.undefined, titleFontSize=jst.undefined, tickSizeEnd=jst.undefined, tickPadding=jst.undefined, shortTimeLabels=jst.undefined, tickWidth=jst.undefined, characterWidth=jst.undefined, titleFont=jst.undefined, **kwargs):
        kwds = dict(axisWidth=axisWidth, gridOpacity=gridOpacity, layer=layer, titleColor=titleColor, tickSizeMajor=tickSizeMajor, tickSizeMinor=tickSizeMinor, subdivide=subdivide, axisColor=axisColor, labelMaxLength=labelMaxLength, titleOffset=titleOffset, tickLabelFont=tickLabelFont, tickSize=tickSize, titleFontWeight=titleFontWeight, tickLabelColor=tickLabelColor, tickColor=tickColor, gridWidth=gridWidth, labelBaseline=labelBaseline, offset=offset, grid=grid, labelAngle=labelAngle, labels=labels, gridDash=gridDash, gridColor=gridColor, tickLabelFontSize=tickLabelFontSize, ticks=ticks, titleMaxLength=titleMaxLength, properties=properties, labelAlign=labelAlign, titleFontSize=titleFontSize, tickSizeEnd=tickSizeEnd, tickPadding=tickPadding, shortTimeLabels=shortTimeLabels, tickWidth=tickWidth, characterWidth=characterWidth, titleFont=titleFont)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AxisConfig, self).__init__(**kwargs)


class Bin(jst.JSONHasTraits):
    """Bin class

    Binning properties or boolean flag for determining whether to bin
    data or not.

    Attributes
    ----------
    steps : array
        An array of allowable step sizes to choose from.
    max : number
        The maximum bin value to consider. If unspecified, the maximum
        value of the specified field is used.
    base : number
        The number base to use for automatic bin determination
        (default is base 10).
    minstep : number
        A minimum allowable step size (particularly useful for integer
        values).
    step : number
        An exact step size to use between bins. If provided, options
        such as maxbins will be ignored.
    min : number
        The minimum bin value to consider. If unspecified, the minimum
        value of the specified field is used.
    maxbins : number
        Maximum number of bins.
    div : array
        Scale factors indicating allowable subdivisions. The default
        value is [5, 2], which indicates that for base 10 numbers (the
        default base), the method may consider dividing bin sizes by 5
        and/or 2. For example, for an initial step size of 10, the
        method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1
        (= 10/(5*2)) might also satisfy the given constraints.
    """
    _additional_traits = True
    steps = jst.JSONArray(jst.JSONNumber(), help='An array of allowable step sizes to choose from.')
    max = jst.JSONNumber(help='The maximum bin value to consider. If unspecified, the maximum [...]')
    base = jst.JSONNumber(help='The number base to use for automatic bin determination (default [...]')
    minstep = jst.JSONNumber(help='A minimum allowable step size (particularly useful for integer [...]')
    step = jst.JSONNumber(help='An exact step size to use between bins. If provided, options [...]')
    min = jst.JSONNumber(help='The minimum bin value to consider. If unspecified, the minimum [...]')
    maxbins = jst.JSONNumber(help='Maximum number of bins.', minimum=2)
    div = jst.JSONArray(jst.JSONNumber(), help='Scale factors indicating allowable subdivisions. The default [...]')

    def __init__(self, steps=jst.undefined, max=jst.undefined, base=jst.undefined, minstep=jst.undefined, step=jst.undefined, min=jst.undefined, maxbins=jst.undefined, div=jst.undefined, **kwargs):
        kwds = dict(steps=steps, max=max, base=base, minstep=minstep, step=step, min=min, maxbins=maxbins, div=div)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Bin, self).__init__(**kwargs)


class CellConfig(jst.JSONHasTraits):
    """CellConfig class

    

    Attributes
    ----------
    stroke : string
        The stroke color.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    fill : string
        The fill color.
    clip : boolean
        
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
    fillOpacity : number
        The fill opacity (value between [0,1]).
    strokeDash : array
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    strokeWidth : number
        The stroke width, in pixels.
    width : number
        
    height : number
        
    """
    _additional_traits = True
    stroke = jst.JSONString(help='The stroke color.')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    fill = jst.JSONString(help='The fill color.')
    clip = jst.JSONBoolean()
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]).')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]).')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.')
    width = jst.JSONNumber()
    height = jst.JSONNumber()

    def __init__(self, stroke=jst.undefined, strokeDashOffset=jst.undefined, fill=jst.undefined, clip=jst.undefined, strokeOpacity=jst.undefined, fillOpacity=jst.undefined, strokeDash=jst.undefined, strokeWidth=jst.undefined, width=jst.undefined, height=jst.undefined, **kwargs):
        kwds = dict(stroke=stroke, strokeDashOffset=strokeDashOffset, fill=fill, clip=clip, strokeOpacity=strokeOpacity, fillOpacity=fillOpacity, strokeDash=strokeDash, strokeWidth=strokeWidth, width=width, height=height)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(CellConfig, self).__init__(**kwargs)


class ChannelDefWithLegend(jst.JSONHasTraits):
    """ChannelDefWithLegend class

    

    Attributes
    ----------
    sort : object
        
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    legend : object
        
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    scale : object
        
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    title : string
        Title for axis or legend.
    field : string
        Name of the field from which to pull a data value.
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    """
    _additional_traits = True
    sort = jst.JSONAnyOf([jst.JSONInstance(_localname('SortField')), SortOrder()])
    type = Type()
    legend = jst.JSONInstance(_localname('Legend'))
    timeUnit = TimeUnit()
    scale = jst.JSONInstance(_localname('Scale'))
    aggregate = AggregateOp()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    title = jst.JSONString(help='Title for axis or legend.')
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')

    def __init__(self, sort=jst.undefined, type=jst.undefined, legend=jst.undefined, timeUnit=jst.undefined, scale=jst.undefined, aggregate=jst.undefined, value=jst.undefined, title=jst.undefined, field=jst.undefined, bin=jst.undefined, **kwargs):
        kwds = dict(sort=sort, type=type, legend=legend, timeUnit=timeUnit, scale=scale, aggregate=aggregate, value=value, title=title, field=field, bin=bin)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ChannelDefWithLegend, self).__init__(**kwargs)


class Config(jst.JSONHasTraits):
    """Config class

    

    Attributes
    ----------
    timeFormat : string
        Default datetime format for axis and legend labels. The format
        can be set directly on each axis and legend.
    facet : object
        Facet Config
    axis : object
        Axis Config
    numberFormat : string
        D3 Number format for axis labels and text tables. For example
        "s" for SI units.
    background : string
        CSS color property to use as background of visualization.
        Default is `"transparent"`.
    mark : object
        Mark Config
    viewport : number
        The width and height of the on-screen viewport, in pixels. If
        necessary, clipping and scrolling will be applied.
    countTitle : string
        Default axis and legend title for count fields.
    legend : object
        Legend Config
    cell : object
        Cell Config
    scale : object
        Scale Config
    overlay : object
        Mark Overlay Config
    """
    _additional_traits = True
    timeFormat = jst.JSONString(help='Default datetime format for axis and legend labels. The format [...]')
    facet = jst.JSONInstance(_localname('FacetConfig'), help='Facet Config')
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Axis Config')
    numberFormat = jst.JSONString(help='D3 Number format for axis labels and text tables. For example [...]')
    background = jst.JSONString(help='CSS color property to use as background of visualization. [...]')
    mark = jst.JSONInstance(_localname('MarkConfig'), help='Mark Config')
    viewport = jst.JSONNumber(help='The width and height of the on-screen viewport, in pixels. If [...]')
    countTitle = jst.JSONString(help='Default axis and legend title for count fields.')
    legend = jst.JSONInstance(_localname('LegendConfig'), help='Legend Config')
    cell = jst.JSONInstance(_localname('CellConfig'), help='Cell Config')
    scale = jst.JSONInstance(_localname('ScaleConfig'), help='Scale Config')
    overlay = jst.JSONInstance(_localname('OverlayConfig'), help='Mark Overlay Config')

    def __init__(self, timeFormat=jst.undefined, facet=jst.undefined, axis=jst.undefined, numberFormat=jst.undefined, background=jst.undefined, mark=jst.undefined, viewport=jst.undefined, countTitle=jst.undefined, legend=jst.undefined, cell=jst.undefined, scale=jst.undefined, overlay=jst.undefined, **kwargs):
        kwds = dict(timeFormat=timeFormat, facet=facet, axis=axis, numberFormat=numberFormat, background=background, mark=mark, viewport=viewport, countTitle=countTitle, legend=legend, cell=cell, scale=scale, overlay=overlay)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Config, self).__init__(**kwargs)


class Data(jst.JSONHasTraits):
    """Data class

    

    Attributes
    ----------
    url : string
        A URL from which to load the data set. Use the format.type
        property
        to ensure the loaded data is correctly parsed.
    values : array
        Pass array of objects instead of a url to a file.
    format : object
        An object that specifies the format for the data file or
        values.
    """
    _additional_traits = True
    url = jst.JSONString(help='A URL from which to load the data set. Use the format.type [...]')
    values = jst.JSONArray(jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True})), help='Pass array of objects instead of a url to a file.')
    format = jst.JSONInstance(_localname('DataFormat'), help='An object that specifies the format for the data file or values.')

    def __init__(self, url=jst.undefined, values=jst.undefined, format=jst.undefined, **kwargs):
        kwds = dict(url=url, values=values, format=format)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Data, self).__init__(**kwargs)


class DataFormat(jst.JSONHasTraits):
    """DataFormat class

    

    Attributes
    ----------
    mesh : string
        The name of the TopoJSON object set to convert to a mesh.
        Similar to the `feature` option, `mesh` extracts a named
        TopoJSON object set.
        Unlike the `feature` option, the corresponding geo data is
        returned as a single, unified mesh instance, not as individual
        GeoJSON features.
        Extracting a mesh is useful for more efficiently drawing
        borders or other geographic elements that you do not need to
        associate with specific regions such as individual countries,
        states or counties.
    feature : string
        The name of the TopoJSON object set to convert to a GeoJSON
        feature collection.
        For example, in a map of the world, there may be an object set
        named `"countries"`.
        Using the feature property, we can extract this set and
        generate a GeoJSON feature object for each country.
    type : object
        Type of input data: `"json"`, `"csv"`, `"tsv"`.
        The default format type is determined by the extension of the
        file url.
        If no extension is detected, `"json"` will be used by default.
    property : string
        JSON only) The JSON property containing the desired data.
        This parameter can be used when the loaded JSON file may have
        surrounding structure or meta-data.
        For example `"property": "values.features"` is equivalent to
        retrieving `json.values.features`
        from the loaded JSON object.
    parse : object
        A collection of parsing instructions can be used to define the
        data types of string-valued attributes in the JSON file. Each
        instruction is a name-value pair, where the name is the name
        of the attribute, and the value is the desired data type (one
        of `"number"`, `"boolean"` or `"date"`). For example,
        `"parse": {"modified_on":"date"}` ensures that the
        `modified_on` value in each row of the input data is parsed as
        a Date value. (See Datalib's [`dl.read.types` method](https://
        github.com/vega/datalib/wiki/Import#dl_read_types) for more
        information.)
    """
    _additional_traits = True
    mesh = jst.JSONString(help='The name of the TopoJSON object set to convert to a mesh. [...]')
    feature = jst.JSONString(help='The name of the TopoJSON object set to convert to a GeoJSON [...]')
    type = DataFormatType()
    property = jst.JSONString(help='JSON only) The JSON property containing the desired data. This [...]')
    parse = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='A collection of parsing instructions can be used to define the [...]')

    def __init__(self, mesh=jst.undefined, feature=jst.undefined, type=jst.undefined, property=jst.undefined, parse=jst.undefined, **kwargs):
        kwds = dict(mesh=mesh, feature=feature, type=type, property=property, parse=parse)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DataFormat, self).__init__(**kwargs)


class DateTime(jst.JSONHasTraits):
    """DateTime class

    Object for defining datetime in Vega-Lite Filter.
    If both month and quarter are provided, month has higher
    precedence.
    `day` cannot be combined with other date.
    We accept string for month and day names.

    Attributes
    ----------
    year : number
        Integer value representing the year.
    hours : number
        Integer value representing the hour of day from 0-23.
    seconds : number
        Integer value representing second segment of a time from 0-59.
    month : ['number', 'string']
        One of: (1) integer value representing the month from
        `1`-`12`. `1` represents January;  (2) case-insensitive month
        name (e.g., `"January"`);  (3) case-insensitive, 3-character
        short month name (e.g., `"Jan"`).
    minutes : number
        Integer value representing minute segment of a time from 0-59.
    day : ['number', 'string']
        Value representing the day of week.  This can be one of: (1)
        integer value -- `1` represents Monday; (2) case-insensitive
        day name (e.g., `"Monday"`);  (3) case-insensitive,
        3-character short day name (e.g., `"Mon"`).   <br/>
        **Warning:** A DateTime definition object with `day`** should
        not be combined with `year`, `quarter`, `month`, or `date`.
    quarter : number
        Integer value representing the quarter of the year (from 1-4).
    date : number
        Integer value representing the date from 1-31.
    milliseconds : number
        Integer value representing millisecond segment of a time.
    """
    _additional_traits = True
    year = jst.JSONNumber(help='Integer value representing the year.')
    hours = jst.JSONNumber(help='Integer value representing the hour of day from 0-23.', minimum=0, maximum=23)
    seconds = jst.JSONNumber(help='Integer value representing second segment of a time from 0-59.', minimum=0, maximum=59)
    month = jst.JSONUnion([jst.JSONNumber(), jst.JSONString()], help='One of: (1) integer value representing the month from `1`-`12`. [...]')
    minutes = jst.JSONNumber(help='Integer value representing minute segment of a time from 0-59.', minimum=0, maximum=59)
    day = jst.JSONUnion([jst.JSONNumber(), jst.JSONString()], help='Value representing the day of week. This can be one of: (1) [...]')
    quarter = jst.JSONNumber(help='Integer value representing the quarter of the year (from 1-4).', minimum=1, maximum=4)
    date = jst.JSONNumber(help='Integer value representing the date from 1-31.', minimum=1, maximum=31)
    milliseconds = jst.JSONNumber(help='Integer value representing millisecond segment of a time.', minimum=0, maximum=999)

    def __init__(self, year=jst.undefined, hours=jst.undefined, seconds=jst.undefined, month=jst.undefined, minutes=jst.undefined, day=jst.undefined, quarter=jst.undefined, date=jst.undefined, milliseconds=jst.undefined, **kwargs):
        kwds = dict(year=year, hours=hours, seconds=seconds, month=month, minutes=minutes, day=day, quarter=quarter, date=date, milliseconds=milliseconds)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DateTime, self).__init__(**kwargs)


class Encoding(jst.JSONHasTraits):
    """Encoding class

    

    Attributes
    ----------
    x : object
        X coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    detail : object
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    y2 : object
        Y2 coordinates for ranged `bar`, `rule`, `area`
    x2 : object
        X2 coordinates for ranged `bar`, `rule`, `area`
    shape : object
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
    size : object
        Size of the mark.
        - For `point`, `square` and `circle`
        – the symbol size, or pixel area of the mark.
        - For `bar` and `tick` – the bar and tick's size.
        - For `text` – the text's font size.
        - Size is currently unsupported for `line` and `area`.
    text : object
        Text of the `text` mark.
    y : object
        Y coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    color : object
        Color of the marks – either fill or stroke color based on mark
        type.
        (By default, fill color for `area`, `bar`, `tick`, `text`,
        `circle`, and `square` /
        stroke color for `line` and `point`.)
    order : object
        Layer order for non-stacked marks, or stack order for stacked
        marks.
    row : object
        Vertical facets for trellis plots.
    column : object
        Horizontal facets for trellis plots.
    path : object
        Order of data points in line marks.
    label : object
        
    opacity : object
        Opacity of the marks – either can be a value or in a range.
    """
    _additional_traits = True
    x = jst.JSONInstance(_localname('PositionChannelDef'), help='X coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    y2 = jst.JSONInstance(_localname('FieldDef'), help='Y2 coordinates for ranged `bar`, `rule`, `area`')
    x2 = jst.JSONInstance(_localname('FieldDef'), help='X2 coordinates for ranged `bar`, `rule`, `area`')
    shape = jst.JSONInstance(_localname('ChannelDefWithLegend'), help="The symbol's shape (only for `point` marks). The supported [...]")
    size = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Size of the mark. - For `point`, `square` and `circle` – the [...]')
    text = jst.JSONInstance(_localname('FieldDef'), help='Text of the `text` mark.')
    y = jst.JSONInstance(_localname('PositionChannelDef'), help='Y coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    color = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Color of the marks – either fill or stroke color based on mark [...]')
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Layer order for non-stacked marks, or stack order for stacked marks.')
    row = jst.JSONInstance(_localname('PositionChannelDef'), help='Vertical facets for trellis plots.')
    column = jst.JSONInstance(_localname('PositionChannelDef'), help='Horizontal facets for trellis plots.')
    path = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Order of data points in line marks.')
    label = jst.JSONInstance(_localname('FieldDef'))
    opacity = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Opacity of the marks – either can be a value or in a range.')

    def __init__(self, x=jst.undefined, detail=jst.undefined, y2=jst.undefined, x2=jst.undefined, shape=jst.undefined, size=jst.undefined, text=jst.undefined, y=jst.undefined, color=jst.undefined, order=jst.undefined, row=jst.undefined, column=jst.undefined, path=jst.undefined, label=jst.undefined, opacity=jst.undefined, **kwargs):
        kwds = dict(x=x, detail=detail, y2=y2, x2=x2, shape=shape, size=size, text=text, y=y, color=color, order=order, row=row, column=column, path=path, label=label, opacity=opacity)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Encoding, self).__init__(**kwargs)


class EqualFilter(jst.JSONHasTraits):
    """EqualFilter class

    

    Attributes
    ----------
    timeUnit : object
        Time unit for the field to be filtered.
    equal : object
        Value that the field should be equal to.
    field : string
        Field to be filtered.
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    equal = jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))], help='Value that the field should be equal to.', allow_undefined=False)
    field = jst.JSONString(help='Field to be filtered.', allow_undefined=False)

    def __init__(self, timeUnit=jst.undefined, equal=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, equal=equal, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(EqualFilter, self).__init__(**kwargs)


class ExtendedUnitSpec(jst.JSONHasTraits):
    """ExtendedUnitSpec class

    Schema for a unit Vega-Lite specification, with the syntactic
    sugar extensions:
    - `row` and `column` are included in the encoding.
    - (Future) label, box plot
    Note: the spec could contain facet.

    Attributes
    ----------
    mark : object
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    width : number
        
    encoding : object
        A key-value mapping between encoding channels and definition
        of fields.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    data : object
        An object describing the data source
    name : string
        Name of the visualization for later reference.
    transform : object
        An object describing filter and new field calculation.
    height : number
        
    config : object
        Configuration object
    """
    _additional_traits = True
    mark = Mark(allow_undefined=False)
    width = jst.JSONNumber()
    encoding = jst.JSONInstance(_localname('Encoding'), help='A key-value mapping between encoding channels and definition of [...]')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    height = jst.JSONNumber()
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')

    def __init__(self, mark=jst.undefined, width=jst.undefined, encoding=jst.undefined, description=jst.undefined, data=jst.undefined, name=jst.undefined, transform=jst.undefined, height=jst.undefined, config=jst.undefined, **kwargs):
        kwds = dict(mark=mark, width=width, encoding=encoding, description=description, data=data, name=name, transform=transform, height=height, config=config)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ExtendedUnitSpec, self).__init__(**kwargs)


class Facet(jst.JSONHasTraits):
    """Facet class

    

    Attributes
    ----------
    column : object
        
    row : object
        
    """
    _additional_traits = True
    column = jst.JSONInstance(_localname('PositionChannelDef'))
    row = jst.JSONInstance(_localname('PositionChannelDef'))

    def __init__(self, column=jst.undefined, row=jst.undefined, **kwargs):
        kwds = dict(column=column, row=row)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Facet, self).__init__(**kwargs)


class FacetConfig(jst.JSONHasTraits):
    """FacetConfig class

    

    Attributes
    ----------
    cell : object
        Facet Cell Config
    grid : object
        Facet Grid Config
    scale : object
        Facet Scale Config
    axis : object
        Facet Axis Config
    """
    _additional_traits = True
    cell = jst.JSONInstance(_localname('CellConfig'), help='Facet Cell Config')
    grid = jst.JSONInstance(_localname('FacetGridConfig'), help='Facet Grid Config')
    scale = jst.JSONInstance(_localname('FacetScaleConfig'), help='Facet Scale Config')
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Facet Axis Config')

    def __init__(self, cell=jst.undefined, grid=jst.undefined, scale=jst.undefined, axis=jst.undefined, **kwargs):
        kwds = dict(cell=cell, grid=grid, scale=scale, axis=axis)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetConfig, self).__init__(**kwargs)


class FacetGridConfig(jst.JSONHasTraits):
    """FacetGridConfig class

    

    Attributes
    ----------
    offset : number
        
    color : string
        
    opacity : number
        
    """
    _additional_traits = True
    offset = jst.JSONNumber()
    color = jst.JSONString()
    opacity = jst.JSONNumber()

    def __init__(self, offset=jst.undefined, color=jst.undefined, opacity=jst.undefined, **kwargs):
        kwds = dict(offset=offset, color=color, opacity=opacity)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetGridConfig, self).__init__(**kwargs)


class FacetScaleConfig(jst.JSONHasTraits):
    """FacetScaleConfig class

    

    Attributes
    ----------
    round : boolean
        
    padding : number
        
    """
    _additional_traits = True
    round = jst.JSONBoolean()
    padding = jst.JSONNumber()

    def __init__(self, round=jst.undefined, padding=jst.undefined, **kwargs):
        kwds = dict(round=round, padding=padding)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetScaleConfig, self).__init__(**kwargs)


class FacetSpec(jst.JSONHasTraits):
    """FacetSpec class

    

    Attributes
    ----------
    facet : object
        
    transform : object
        An object describing filter and new field calculation.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    spec : object
        
    name : string
        Name of the visualization for later reference.
    data : object
        An object describing the data source
    config : object
        Configuration object
    """
    _additional_traits = True
    facet = jst.JSONInstance(_localname('Facet'), allow_undefined=False)
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    spec = jst.JSONAnyOf([jst.JSONInstance(_localname('LayerSpec')), jst.JSONInstance(_localname('UnitSpec'))], allow_undefined=False)
    name = jst.JSONString(help='Name of the visualization for later reference.')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')

    def __init__(self, facet=jst.undefined, transform=jst.undefined, description=jst.undefined, spec=jst.undefined, name=jst.undefined, data=jst.undefined, config=jst.undefined, **kwargs):
        kwds = dict(facet=facet, transform=transform, description=description, spec=spec, name=name, data=data, config=config)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetSpec, self).__init__(**kwargs)


class FieldDef(jst.JSONHasTraits):
    """FieldDef class

    

    Attributes
    ----------
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    title : string
        Title for axis or legend.
    field : string
        Name of the field from which to pull a data value.
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    """
    _additional_traits = True
    type = Type()
    timeUnit = TimeUnit()
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')
    title = jst.JSONString(help='Title for axis or legend.')
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')

    def __init__(self, type=jst.undefined, timeUnit=jst.undefined, aggregate=jst.undefined, bin=jst.undefined, title=jst.undefined, field=jst.undefined, value=jst.undefined, **kwargs):
        kwds = dict(type=type, timeUnit=timeUnit, aggregate=aggregate, bin=bin, title=title, field=field, value=value)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FieldDef, self).__init__(**kwargs)


class Formula(jst.JSONHasTraits):
    """Formula class

    Formula object for calculate.

    Attributes
    ----------
    expr : string
        A string containing an expression for the formula. Use the
        variable `datum` to to refer to the current data object.
    field : string
        The field in which to store the computed formula value.
    """
    _additional_traits = True
    expr = jst.JSONString(help='A string containing an expression for the formula. Use the [...]', allow_undefined=False)
    field = jst.JSONString(help='The field in which to store the computed formula value.', allow_undefined=False)

    def __init__(self, expr=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(expr=expr, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Formula, self).__init__(**kwargs)


class LayerSpec(jst.JSONHasTraits):
    """LayerSpec class

    

    Attributes
    ----------
    layers : array
        Unit specs that will be layered.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    data : object
        An object describing the data source
    name : string
        Name of the visualization for later reference.
    width : number
        
    transform : object
        An object describing filter and new field calculation.
    height : number
        
    config : object
        Configuration object
    """
    _additional_traits = True
    layers = jst.JSONArray(jst.JSONInstance(_localname('UnitSpec')), help='Unit specs that will be layered.', allow_undefined=False)
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    width = jst.JSONNumber()
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    height = jst.JSONNumber()
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')

    def __init__(self, layers=jst.undefined, description=jst.undefined, data=jst.undefined, name=jst.undefined, width=jst.undefined, transform=jst.undefined, height=jst.undefined, config=jst.undefined, **kwargs):
        kwds = dict(layers=layers, description=description, data=data, name=name, width=width, transform=transform, height=height, config=config)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LayerSpec, self).__init__(**kwargs)


class Legend(jst.JSONHasTraits):
    """Legend class

    

    Attributes
    ----------
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    titleFontWeight : string
        The font weight of the legend title.
    padding : number
        The padding, in pixels, between the legend and axis.
    format : string
        An optional formatting pattern for legend labels. Vega uses
        D3\'s format pattern.
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    symbolSize : number
        The size of the legend symbol, in pixels.
    titleColor : string
        Optional mark property definitions for custom legend styling.
        The color of the legend title, can be in hex color code or
        regular color name.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    properties : object
        Optional mark property definitions for custom legend styling.
    gradientHeight : number
        The height of the gradient, in pixels.
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    symbolShape : string
        The shape of the legend symbol, can be the 'circle', 'square',
        'cross', 'diamond',
        'triangle-up', 'triangle-down', or else a custom SVG path
        string.
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
    gradientWidth : number
        The width of the gradient, in pixels.
    labelFont : string
        The font of the legend label.
    labelOffset : number
        The offset of the legend label.
    symbolColor : string
        The color of the legend symbol,
    orient : string
        The orientation of the legend. One of "left" or "right". This
        determines how the legend is positioned within the scene. The
        default is "right".
    labelFontSize : number
        The font size of legend label.
    title : string
        A title for the legend. (Shows field name and its function by
        default.)
    margin : number
        The margin around the legend, in pixels
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    titleFontSize : number
        The font size of the legend title.
    values : object
        Explicitly set the visible legend values.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    titleFont : string
        The font of the legend title.
    """
    _additional_traits = True
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    titleFontWeight = jst.JSONString(help='The font weight of the legend title.')
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    format = jst.JSONString(help='An optional formatting pattern for legend labels. Vega uses [...]')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.')
    titleColor = jst.JSONString(help='Optional mark property definitions for custom legend styling. [...]')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom legend styling.')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.')
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    symbolShape = jst.JSONString(help="The shape of the legend symbol, can be the 'circle', 'square', [...]")
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.')
    labelFont = jst.JSONString(help='The font of the legend label.')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    orient = jst.JSONString(help='The orientation of the legend. One of "left" or "right". This [...]')
    labelFontSize = jst.JSONNumber(help='The font size of legend label.')
    title = jst.JSONString(help='A title for the legend. (Shows field name and its function by [...]')
    margin = jst.JSONNumber(help='The margin around the legend, in pixels')
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='Explicitly set the visible legend values.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    titleFont = jst.JSONString(help='The font of the legend title.')

    def __init__(self, gradientStrokeColor=jst.undefined, titleFontWeight=jst.undefined, padding=jst.undefined, format=jst.undefined, labelColor=jst.undefined, symbolSize=jst.undefined, titleColor=jst.undefined, gradientStrokeWidth=jst.undefined, properties=jst.undefined, gradientHeight=jst.undefined, labelBaseline=jst.undefined, symbolShape=jst.undefined, offset=jst.undefined, gradientWidth=jst.undefined, labelFont=jst.undefined, labelOffset=jst.undefined, symbolColor=jst.undefined, orient=jst.undefined, labelFontSize=jst.undefined, title=jst.undefined, margin=jst.undefined, labelAlign=jst.undefined, titleFontSize=jst.undefined, values=jst.undefined, shortTimeLabels=jst.undefined, symbolStrokeWidth=jst.undefined, titleFont=jst.undefined, **kwargs):
        kwds = dict(gradientStrokeColor=gradientStrokeColor, titleFontWeight=titleFontWeight, padding=padding, format=format, labelColor=labelColor, symbolSize=symbolSize, titleColor=titleColor, gradientStrokeWidth=gradientStrokeWidth, properties=properties, gradientHeight=gradientHeight, labelBaseline=labelBaseline, symbolShape=symbolShape, offset=offset, gradientWidth=gradientWidth, labelFont=labelFont, labelOffset=labelOffset, symbolColor=symbolColor, orient=orient, labelFontSize=labelFontSize, title=title, margin=margin, labelAlign=labelAlign, titleFontSize=titleFontSize, values=values, shortTimeLabels=shortTimeLabels, symbolStrokeWidth=symbolStrokeWidth, titleFont=titleFont)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Legend, self).__init__(**kwargs)


class LegendConfig(jst.JSONHasTraits):
    """LegendConfig class

    

    Attributes
    ----------
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    titleFontWeight : string
        The font weight of the legend title.
    padding : number
        The padding, in pixels, between the legend and axis.
    margin : number
        The margin around the legend, in pixels
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    symbolSize : number
        The size of the legend symbol, in pixels.
    titleColor : string
        Optional mark property definitions for custom legend styling.
        The color of the legend title, can be in hex color code or
        regular color name.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    gradientHeight : number
        The height of the gradient, in pixels.
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    symbolShape : string
        The shape of the legend symbol, can be the 'circle', 'square',
        'cross', 'diamond',
        'triangle-up', 'triangle-down', or else a custom SVG path
        string.
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
    gradientWidth : number
        The width of the gradient, in pixels.
    labelFont : string
        The font of the legend label.
    labelOffset : number
        The offset of the legend label.
    symbolColor : string
        The color of the legend symbol,
    orient : string
        The orientation of the legend. One of "left" or "right". This
        determines how the legend is positioned within the scene. The
        default is "right".
    labelFontSize : number
        The font size of legend label.
    properties : object
        Optional mark property definitions for custom legend styling.
    titleFontSize : number
        The font size of the legend title.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    titleFont : string
        The font of the legend title.
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    """
    _additional_traits = True
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    titleFontWeight = jst.JSONString(help='The font weight of the legend title.')
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    margin = jst.JSONNumber(help='The margin around the legend, in pixels')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.')
    titleColor = jst.JSONString(help='Optional mark property definitions for custom legend styling. [...]')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.')
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    symbolShape = jst.JSONString(help="The shape of the legend symbol, can be the 'circle', 'square', [...]")
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.')
    labelFont = jst.JSONString(help='The font of the legend label.')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    orient = jst.JSONString(help='The orientation of the legend. One of "left" or "right". This [...]')
    labelFontSize = jst.JSONNumber(help='The font size of legend label.')
    properties = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True}), help='Optional mark property definitions for custom legend styling.')
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    titleFont = jst.JSONString(help='The font of the legend title.')
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')

    def __init__(self, gradientStrokeColor=jst.undefined, titleFontWeight=jst.undefined, padding=jst.undefined, margin=jst.undefined, labelColor=jst.undefined, symbolSize=jst.undefined, titleColor=jst.undefined, gradientStrokeWidth=jst.undefined, gradientHeight=jst.undefined, labelBaseline=jst.undefined, symbolShape=jst.undefined, offset=jst.undefined, gradientWidth=jst.undefined, labelFont=jst.undefined, labelOffset=jst.undefined, symbolColor=jst.undefined, orient=jst.undefined, labelFontSize=jst.undefined, properties=jst.undefined, titleFontSize=jst.undefined, shortTimeLabels=jst.undefined, symbolStrokeWidth=jst.undefined, titleFont=jst.undefined, labelAlign=jst.undefined, **kwargs):
        kwds = dict(gradientStrokeColor=gradientStrokeColor, titleFontWeight=titleFontWeight, padding=padding, margin=margin, labelColor=labelColor, symbolSize=symbolSize, titleColor=titleColor, gradientStrokeWidth=gradientStrokeWidth, gradientHeight=gradientHeight, labelBaseline=labelBaseline, symbolShape=symbolShape, offset=offset, gradientWidth=gradientWidth, labelFont=labelFont, labelOffset=labelOffset, symbolColor=symbolColor, orient=orient, labelFontSize=labelFontSize, properties=properties, titleFontSize=titleFontSize, shortTimeLabels=shortTimeLabels, symbolStrokeWidth=symbolStrokeWidth, titleFont=titleFont, labelAlign=labelAlign)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LegendConfig, self).__init__(**kwargs)


class MarkConfig(jst.JSONHasTraits):
    """MarkConfig class

    

    Attributes
    ----------
    interpolate : object
        The line interpolation method to use. One of linear, step-
        before, step-after, basis, basis-open, cardinal, cardinal-
        open, monotone.
    filled : boolean
        Whether the shape\'s color should be used as fill color
        instead of stroke color.
        This is only applicable for "bar", "point", and "area".
        All marks except "point" marks are filled by default.
        See Mark Documentation (http://vega.github.io/vega-
        lite/docs/marks.html)
        for usage example.
    lineSize : number
        Size of line mark.
    strokeWidth : number
        
    barThinSize : number
        The size of the bars on continuous scales.
    fillOpacity : number
        
    format : string
        The formatting pattern for text value. If not defined, this
        will be determined automatically.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
    size : number
        The pixel area each the point. For example: in the case of
        circles, the radius is determined in part by the square root
        of the size value.
    stacked : object
        
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
    tickSize : number
        The width of the ticks.
    applyColorToBackground : boolean
        Apply color field to background color instead of the text.
    baseline : object
        The vertical alignment of the text. One of top, middle,
        bottom.
    fontStyle : object
        The font style (e.g., italic).
    tension : number
        Depending on the interpolation type, sets the tension
        parameter.
    strokeOpacity : number
        
    opacity : number
        
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    ruleSize : number
        Size of rule mark.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the x and y properties.
    strokeDash : array
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        angle property.
    orient : object
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    tickThickness : number
        Thickness of the tick mark.
    shape : object
        The symbol shape to use. One of circle (default), square,
        cross, diamond, triangle-up, or triangle-down, or a custom SVG
        path.
    text : string
        Placeholder Text
    align : object
        The horizontal alignment of the text. One of left, right,
        center.
    fontWeight : object
        The font weight (e.g., bold).
    color : string
        Default color.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the x and y properties. Values for theta
        follow the same convention of arc mark startAngle and endAngle
        properties: angles are measured in radians, with 0 indicating
        "north".
    font : string
        The typeface to set the text in (e.g., Helvetica Neue).
    angle : number
        The rotation angle of the text, in degrees.
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        angle property.
    barSize : number
        The size of the bars.  If unspecified, the default size is
        `bandSize-1`,
        which provides 1 pixel offset between bars.
    fontSize : number
        The font size, in pixels.
    """
    _additional_traits = True
    interpolate = Interpolate()
    filled = jst.JSONBoolean(help="Whether the shape\\'s color should be used as fill color instead [...]")
    lineSize = jst.JSONNumber(help='Size of line mark.')
    strokeWidth = jst.JSONNumber(minimum=0)
    barThinSize = jst.JSONNumber(help='The size of the bars on continuous scales.')
    fillOpacity = jst.JSONNumber(minimum=0, maximum=1)
    format = jst.JSONString(help='The formatting pattern for text value. If not defined, this will [...]')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color')
    size = jst.JSONNumber(help='The pixel area each the point. For example: in the case of [...]')
    stacked = StackOffset()
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than config.color')
    tickSize = jst.JSONNumber(help='The width of the ticks.')
    applyColorToBackground = jst.JSONBoolean(help='Apply color field to background color instead of the text.')
    baseline = VerticalAlign()
    fontStyle = FontStyle()
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter.')
    strokeOpacity = jst.JSONNumber(minimum=0, maximum=1)
    opacity = jst.JSONNumber(minimum=0, maximum=1)
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    ruleSize = jst.JSONNumber(help='Size of rule mark.')
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    orient = Orient()
    tickThickness = jst.JSONNumber(help='Thickness of the tick mark.')
    shape = jst.JSONAnyOf([Shape(), jst.JSONString()], help='The symbol shape to use. One of circle (default), square, cross, [...]')
    text = jst.JSONString(help='Placeholder Text')
    align = HorizontalAlign()
    fontWeight = FontWeight()
    color = jst.JSONString(help='Default color.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')
    font = jst.JSONString(help='The typeface to set the text in (e.g., Helvetica Neue).')
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.')
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    barSize = jst.JSONNumber(help='The size of the bars. If unspecified, the default size is [...]')
    fontSize = jst.JSONNumber(help='The font size, in pixels.')

    def __init__(self, interpolate=jst.undefined, filled=jst.undefined, lineSize=jst.undefined, strokeWidth=jst.undefined, barThinSize=jst.undefined, fillOpacity=jst.undefined, format=jst.undefined, fill=jst.undefined, size=jst.undefined, stacked=jst.undefined, stroke=jst.undefined, tickSize=jst.undefined, applyColorToBackground=jst.undefined, baseline=jst.undefined, fontStyle=jst.undefined, tension=jst.undefined, strokeOpacity=jst.undefined, opacity=jst.undefined, strokeDashOffset=jst.undefined, ruleSize=jst.undefined, radius=jst.undefined, strokeDash=jst.undefined, dy=jst.undefined, orient=jst.undefined, tickThickness=jst.undefined, shape=jst.undefined, text=jst.undefined, align=jst.undefined, fontWeight=jst.undefined, color=jst.undefined, shortTimeLabels=jst.undefined, theta=jst.undefined, font=jst.undefined, angle=jst.undefined, dx=jst.undefined, barSize=jst.undefined, fontSize=jst.undefined, **kwargs):
        kwds = dict(interpolate=interpolate, filled=filled, lineSize=lineSize, strokeWidth=strokeWidth, barThinSize=barThinSize, fillOpacity=fillOpacity, format=format, fill=fill, size=size, stacked=stacked, stroke=stroke, tickSize=tickSize, applyColorToBackground=applyColorToBackground, baseline=baseline, fontStyle=fontStyle, tension=tension, strokeOpacity=strokeOpacity, opacity=opacity, strokeDashOffset=strokeDashOffset, ruleSize=ruleSize, radius=radius, strokeDash=strokeDash, dy=dy, orient=orient, tickThickness=tickThickness, shape=shape, text=text, align=align, fontWeight=fontWeight, color=color, shortTimeLabels=shortTimeLabels, theta=theta, font=font, angle=angle, dx=dx, barSize=barSize, fontSize=fontSize)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MarkConfig, self).__init__(**kwargs)


class OneOfFilter(jst.JSONHasTraits):
    """OneOfFilter class

    

    Attributes
    ----------
    timeUnit : object
        time unit for the field to be filtered.
    oneOf : array
        A set of values that the `field`'s value should be a member
        of,
        for a data item included in the filtered data.
    field : string
        Field to be filtered
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    oneOf = jst.JSONArray(jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))]), help="A set of values that the `field`'s value should be a member of, [...]", allow_undefined=False)
    field = jst.JSONString(help='Field to be filtered', allow_undefined=False)

    def __init__(self, timeUnit=jst.undefined, oneOf=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, oneOf=oneOf, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OneOfFilter, self).__init__(**kwargs)


class OrderChannelDef(jst.JSONHasTraits):
    """OrderChannelDef class

    

    Attributes
    ----------
    sort : object
        
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    title : string
        Title for axis or legend.
    field : string
        Name of the field from which to pull a data value.
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    """
    _additional_traits = True
    sort = SortOrder()
    type = Type()
    timeUnit = TimeUnit()
    aggregate = AggregateOp()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    title = jst.JSONString(help='Title for axis or legend.')
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')

    def __init__(self, sort=jst.undefined, type=jst.undefined, timeUnit=jst.undefined, aggregate=jst.undefined, value=jst.undefined, title=jst.undefined, field=jst.undefined, bin=jst.undefined, **kwargs):
        kwds = dict(sort=sort, type=type, timeUnit=timeUnit, aggregate=aggregate, value=value, title=title, field=field, bin=bin)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OrderChannelDef, self).__init__(**kwargs)


class OverlayConfig(jst.JSONHasTraits):
    """OverlayConfig class

    

    Attributes
    ----------
    line : boolean
        Whether to overlay line with point.
    area : object
        Type of overlay for area mark (line or linepoint)
    pointStyle : object
        Default style for the overlayed point.
    lineStyle : object
        Default style for the overlayed point.
    """
    _additional_traits = True
    line = jst.JSONBoolean(help='Whether to overlay line with point.')
    area = AreaOverlay()
    pointStyle = jst.JSONInstance(_localname('MarkConfig'), help='Default style for the overlayed point.')
    lineStyle = jst.JSONInstance(_localname('MarkConfig'), help='Default style for the overlayed point.')

    def __init__(self, line=jst.undefined, area=jst.undefined, pointStyle=jst.undefined, lineStyle=jst.undefined, **kwargs):
        kwds = dict(line=line, area=area, pointStyle=pointStyle, lineStyle=lineStyle)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OverlayConfig, self).__init__(**kwargs)


class PositionChannelDef(jst.JSONHasTraits):
    """PositionChannelDef class

    

    Attributes
    ----------
    sort : object
        
    type : object
        The encoded field's type of measurement. This can be either a
        full type
        name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and
        `"nominal"`)
        or an initial character of the type name (`"Q"`, `"T"`, `"O"`,
        `"N"`).
        This property is case insensitive.
    axis : object
        
    timeUnit : object
        Time unit for a `temporal` field  (e.g., `year`, `yearmonth`,
        `month`, `hour`).
    scale : object
        
    aggregate : object
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    title : string
        Title for axis or legend.
    field : string
        Name of the field from which to pull a data value.
    bin : object
        Flag for binning a `quantitative` field, or a bin property
        object
        for binning parameters.
    """
    _additional_traits = True
    sort = jst.JSONAnyOf([jst.JSONInstance(_localname('SortField')), SortOrder()])
    type = Type()
    axis = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Axis'))])
    timeUnit = TimeUnit()
    scale = jst.JSONInstance(_localname('Scale'))
    aggregate = AggregateOp()
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')
    title = jst.JSONString(help='Title for axis or legend.')
    field = jst.JSONString(help='Name of the field from which to pull a data value.')
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('Bin'))], help='Flag for binning a `quantitative` field, or a bin property [...]')

    def __init__(self, sort=jst.undefined, type=jst.undefined, axis=jst.undefined, timeUnit=jst.undefined, scale=jst.undefined, aggregate=jst.undefined, value=jst.undefined, title=jst.undefined, field=jst.undefined, bin=jst.undefined, **kwargs):
        kwds = dict(sort=sort, type=type, axis=axis, timeUnit=timeUnit, scale=scale, aggregate=aggregate, value=value, title=title, field=field, bin=bin)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(PositionChannelDef, self).__init__(**kwargs)


class RangeFilter(jst.JSONHasTraits):
    """RangeFilter class

    

    Attributes
    ----------
    timeUnit : object
        time unit for the field to be filtered.
    range : array
        Array of inclusive minimum and maximum values
        for a field value of a data item to be included in the
        filtered data.
    field : string
        Field to be filtered
    """
    _additional_traits = True
    timeUnit = TimeUnit()
    range = jst.JSONArray(jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(_localname('DateTime'))]), help='Array of inclusive minimum and maximum values for a field value [...]', allow_undefined=False, maxlen=2, minlen=2)
    field = jst.JSONString(help='Field to be filtered', allow_undefined=False)

    def __init__(self, timeUnit=jst.undefined, range=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(timeUnit=timeUnit, range=range, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(RangeFilter, self).__init__(**kwargs)


class Scale(jst.JSONHasTraits):
    """Scale class

    

    Attributes
    ----------
    clamp : boolean
        If true, values that exceed the data domain are clamped to
        either the minimum or maximum range value
    range : object
        The range of the scale, representing the set of visual values.
        For numeric values, the range can take the form of a two-
        element array with minimum and maximum values. For ordinal or
        quantized data, the range may by an array of desired output
        values, which are mapped to elements in the specified domain.
        For ordinal scales only, the range can be defined using a
        DataRef: the range values are then drawn dynamically from a
        backing data set.
    domain : object
        The domain of the scale, representing the set of data values.
        For quantitative data, this can take the form of a two-element
        array with minimum and maximum values. For ordinal/categorical
        data, this may be an array of valid input values.
    bandSize : object
        
    type : object
        
    padding : number
        Applies spacing among ordinal elements in the scale range. The
        actual effect depends on how the scale is configured. If the
        __points__ parameter is `true`, the padding value is
        interpreted as a multiple of the spacing between points. A
        reasonable value is 1.0, such that the first and last point
        will be offset from the minimum and maximum value by half the
        distance between points. Otherwise, padding is typically in
        the range [0, 1] and corresponds to the fraction of space in
        the range interval to allocate to padding. A value of 0.5
        means that the range band width will be equal to the padding
        width. For more, see the [D3 ordinal scale
        documentation](https://github.com/mbostock/d3/wiki/Ordinal-
        Scales).
    zero : boolean
        If `true`, ensures that a zero baseline value is included in
        the scale domain.
        Default value: `true` for `x` and `y` channel if the
        quantitative field is not binned
        and no custom `domain` is provided; `false` otherwise.
    useRawDomain : boolean
        Uses the source data range as scale domain instead of
        aggregated data for aggregate axis.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"stdev"`, `"stdevp"`, `"median"`, `"q1"`, `"q3"`, `"min"`,
        `"max"`). For other aggregations that produce values outside
        of the raw data domain (e.g. `"count"`, `"sum"`), this
        property is ignored.
    nice : object
        If specified, modifies the scale domain to use a more human-
        friendly value range. If specified as a true boolean, modifies
        the scale domain to use a more human-friendly number range
        (e.g., 7 instead of 6.96). If specified as a string, modifies
        the scale domain to use a more human-friendly value range. For
        time and utc scale types only, the nice value should be a
        string indicating the desired time interval.
    exponent : number
        Sets the exponent of the scale transformation. For pow scale
        types only, otherwise ignored.
    round : boolean
        If true, rounds numeric output values to integers. This can be
        helpful for snapping to the pixel grid.
    """
    _additional_traits = True
    clamp = jst.JSONBoolean(help='If true, values that exceed the data domain are clamped to [...]')
    range = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString())], help='The range of the scale, representing the set of visual values. [...]')
    domain = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='The domain of the scale, representing the set of data values. [...]')
    bandSize = jst.JSONAnyOf([jst.JSONNumber(), BandSize()])
    type = ScaleType()
    padding = jst.JSONNumber(help='Applies spacing among ordinal elements in the scale range. The [...]')
    zero = jst.JSONBoolean(help='If `true`, ensures that a zero baseline value is included in the [...]')
    useRawDomain = jst.JSONBoolean(help='Uses the source data range as scale domain instead of aggregated [...]')
    nice = jst.JSONAnyOf([jst.JSONBoolean(), NiceTime()], help='If specified, modifies the scale domain to use a more human- [...]')
    exponent = jst.JSONNumber(help='Sets the exponent of the scale transformation. For pow scale [...]')
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')

    def __init__(self, clamp=jst.undefined, range=jst.undefined, domain=jst.undefined, bandSize=jst.undefined, type=jst.undefined, padding=jst.undefined, zero=jst.undefined, useRawDomain=jst.undefined, nice=jst.undefined, exponent=jst.undefined, round=jst.undefined, **kwargs):
        kwds = dict(clamp=clamp, range=range, domain=domain, bandSize=bandSize, type=type, padding=padding, zero=zero, useRawDomain=useRawDomain, nice=nice, exponent=exponent, round=round)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Scale, self).__init__(**kwargs)


class ScaleConfig(jst.JSONHasTraits):
    """ScaleConfig class

    

    Attributes
    ----------
    round : boolean
        If true, rounds numeric output values to integers.
        This can be helpful for snapping to the pixel grid.
        (Only available for `x`, `y`, `size`, `row`, and `column`
        scales.)
    fontSizeRange : array
        Default range for font size scale
    ruleSizeRange : array
        Default range for rule stroke widths
    shapeRange : object
        Default range for shape
    textBandWidth : number
        Default band width for `x` ordinal scale when is mark is
        `text`.
    nominalColorRange : object
        Default range for nominal color scale
    sequentialColorRange : object
        Default range for ordinal / continuous color scale
    tickSizeRange : array
        Default range for tick spans
    bandSize : object
        Default band size for (1) `y` ordinal scale,
        and (2) `x` ordinal scale when the mark is not `text`.
    padding : number
        Default padding for `x` and `y` ordinal scales.
    useRawDomain : boolean
        Uses the source data range as scale domain instead of
        aggregated data for aggregate axis.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"stdev"`, `"stdevp"`, `"median"`, `"q1"`, `"q3"`, `"min"`,
        `"max"`). For other aggregations that produce values outside
        of the raw data domain (e.g. `"count"`, `"sum"`), this
        property is ignored.
    barSizeRange : array
        Default range for bar size scale
    opacity : array
        Default range for opacity.
    pointSizeRange : array
        Default range for bar size scale
    """
    _additional_traits = True
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')
    fontSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for font size scale')
    ruleSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for rule stroke widths')
    shapeRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for shape')
    textBandWidth = jst.JSONNumber(help='Default band width for `x` ordinal scale when is mark is `text`.', minimum=0)
    nominalColorRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for nominal color scale')
    sequentialColorRange = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='Default range for ordinal / continuous color scale')
    tickSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for tick spans')
    bandSize = jst.JSONAnyOf([jst.JSONNumber(), BandSize()], help='Default band size for (1) `y` ordinal scale, and (2) `x` ordinal [...]')
    padding = jst.JSONNumber(help='Default padding for `x` and `y` ordinal scales.')
    useRawDomain = jst.JSONBoolean(help='Uses the source data range as scale domain instead of aggregated [...]')
    barSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for bar size scale')
    opacity = jst.JSONArray(jst.JSONNumber(), help='Default range for opacity.')
    pointSizeRange = jst.JSONArray(jst.JSONNumber(), help='Default range for bar size scale')

    def __init__(self, round=jst.undefined, fontSizeRange=jst.undefined, ruleSizeRange=jst.undefined, shapeRange=jst.undefined, textBandWidth=jst.undefined, nominalColorRange=jst.undefined, sequentialColorRange=jst.undefined, tickSizeRange=jst.undefined, bandSize=jst.undefined, padding=jst.undefined, useRawDomain=jst.undefined, barSizeRange=jst.undefined, opacity=jst.undefined, pointSizeRange=jst.undefined, **kwargs):
        kwds = dict(round=round, fontSizeRange=fontSizeRange, ruleSizeRange=ruleSizeRange, shapeRange=shapeRange, textBandWidth=textBandWidth, nominalColorRange=nominalColorRange, sequentialColorRange=sequentialColorRange, tickSizeRange=tickSizeRange, bandSize=bandSize, padding=padding, useRawDomain=useRawDomain, barSizeRange=barSizeRange, opacity=opacity, pointSizeRange=pointSizeRange)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ScaleConfig, self).__init__(**kwargs)


class SortField(jst.JSONHasTraits):
    """SortField class

    

    Attributes
    ----------
    op : object
        The sort aggregation operator
    field : string
        The field name to aggregate over.
    order : object
        
    """
    _additional_traits = True
    op = AggregateOp(allow_undefined=False)
    field = jst.JSONString(help='The field name to aggregate over.', allow_undefined=False)
    order = SortOrder()

    def __init__(self, op=jst.undefined, field=jst.undefined, order=jst.undefined, **kwargs):
        kwds = dict(op=op, field=field, order=order)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SortField, self).__init__(**kwargs)


class Transform(jst.JSONHasTraits):
    """Transform class

    

    Attributes
    ----------
    calculate : array
        Calculate new field(s) using the provided expresssion(s).
        Calculation are applied before filter.
    filter : object
        A string containing the filter Vega expression. Use `datum` to
        refer to the current data object.
    filterInvalid : boolean
        Whether to filter invalid values (`null` and `NaN`) from the
        data. By default (`undefined`), only quantitative and temporal
        fields are filtered. If set to `true`, all data items with
        null values are filtered. If `false`, all data items are
        included.
    """
    _additional_traits = True
    calculate = jst.JSONArray(jst.JSONInstance(_localname('Formula')), help='Calculate new field(s) using the provided expresssion(s). [...]')
    filter = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter')), jst.JSONArray(jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter'))]))], help='A string containing the filter Vega expression. Use `datum` to [...]')
    filterInvalid = jst.JSONBoolean(help='Whether to filter invalid values (`null` and `NaN`) from the [...]')

    def __init__(self, calculate=jst.undefined, filter=jst.undefined, filterInvalid=jst.undefined, **kwargs):
        kwds = dict(calculate=calculate, filter=filter, filterInvalid=filterInvalid)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Transform, self).__init__(**kwargs)


class UnitEncoding(jst.JSONHasTraits):
    """UnitEncoding class

    

    Attributes
    ----------
    x : object
        X coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    detail : object
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    y2 : object
        Y2 coordinates for ranged `bar`, `rule`, `area`
    x2 : object
        X2 coordinates for ranged `bar`, `rule`, `area`
    shape : object
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
    size : object
        Size of the mark.
        - For `point`, `square` and `circle`
        – the symbol size, or pixel area of the mark.
        - For `bar` and `tick` – the bar and tick's size.
        - For `text` – the text's font size.
        - Size is currently unsupported for `line` and `area`.
    text : object
        Text of the `text` mark.
    y : object
        Y coordinates for `point`, `circle`, `square`,
        `line`, `rule`, `text`, and `tick`
        (or to width and height for `bar` and `area` marks).
    color : object
        Color of the marks – either fill or stroke color based on mark
        type.
        (By default, fill color for `area`, `bar`, `tick`, `text`,
        `circle`, and `square` /
        stroke color for `line` and `point`.)
    order : object
        Layer order for non-stacked marks, or stack order for stacked
        marks.
    path : object
        Order of data points in line marks.
    label : object
        
    opacity : object
        Opacity of the marks – either can be a value or in a range.
    """
    _additional_traits = True
    x = jst.JSONInstance(_localname('PositionChannelDef'), help='X coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    y2 = jst.JSONInstance(_localname('FieldDef'), help='Y2 coordinates for ranged `bar`, `rule`, `area`')
    x2 = jst.JSONInstance(_localname('FieldDef'), help='X2 coordinates for ranged `bar`, `rule`, `area`')
    shape = jst.JSONInstance(_localname('ChannelDefWithLegend'), help="The symbol's shape (only for `point` marks). The supported [...]")
    size = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Size of the mark. - For `point`, `square` and `circle` – the [...]')
    text = jst.JSONInstance(_localname('FieldDef'), help='Text of the `text` mark.')
    y = jst.JSONInstance(_localname('PositionChannelDef'), help='Y coordinates for `point`, `circle`, `square`, `line`, `rule`, [...]')
    color = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Color of the marks – either fill or stroke color based on mark [...]')
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Layer order for non-stacked marks, or stack order for stacked marks.')
    path = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderChannelDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderChannelDef')))], help='Order of data points in line marks.')
    label = jst.JSONInstance(_localname('FieldDef'))
    opacity = jst.JSONInstance(_localname('ChannelDefWithLegend'), help='Opacity of the marks – either can be a value or in a range.')

    def __init__(self, x=jst.undefined, detail=jst.undefined, y2=jst.undefined, x2=jst.undefined, shape=jst.undefined, size=jst.undefined, text=jst.undefined, y=jst.undefined, color=jst.undefined, order=jst.undefined, path=jst.undefined, label=jst.undefined, opacity=jst.undefined, **kwargs):
        kwds = dict(x=x, detail=detail, y2=y2, x2=x2, shape=shape, size=size, text=text, y=y, color=color, order=order, path=path, label=label, opacity=opacity)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UnitEncoding, self).__init__(**kwargs)


class UnitSpec(jst.JSONHasTraits):
    """UnitSpec class

    

    Attributes
    ----------
    mark : object
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    width : number
        
    encoding : object
        A key-value mapping between encoding channels and definition
        of fields.
    description : string
        An optional description of this mark for commenting purpose.
        This property has no effect on the output visualization.
    data : object
        An object describing the data source
    name : string
        Name of the visualization for later reference.
    transform : object
        An object describing filter and new field calculation.
    height : number
        
    config : object
        Configuration object
    """
    _additional_traits = True
    mark = Mark(allow_undefined=False)
    width = jst.JSONNumber()
    encoding = jst.JSONInstance(_localname('UnitEncoding'), help='A key-value mapping between encoding channels and definition of [...]')
    description = jst.JSONString(help='An optional description of this mark for commenting purpose. [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    transform = jst.JSONInstance(_localname('Transform'), help='An object describing filter and new field calculation.')
    height = jst.JSONNumber()
    config = jst.JSONInstance(_localname('Config'), help='Configuration object')

    def __init__(self, mark=jst.undefined, width=jst.undefined, encoding=jst.undefined, description=jst.undefined, data=jst.undefined, name=jst.undefined, transform=jst.undefined, height=jst.undefined, config=jst.undefined, **kwargs):
        kwds = dict(mark=mark, width=width, encoding=encoding, description=description, data=data, name=name, transform=transform, height=height, config=config)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UnitSpec, self).__init__(**kwargs)
