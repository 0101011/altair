# This file auto-generated by `_schema_parser.py`.
# Do not modify this file directly.

import traitlets as T
from ..baseobject import BaseObject
from .nicetime import NiceTime
from .scaletype import ScaleType


class Scale(BaseObject):
    bandSize = T.CFloat(allow_none=True, min=0, default_value=None)
    clamp = T.Bool(allow_none=True, default_value=None, help="""If true, values that exceed the data domain are clamped to either the minimum or maximum range value.""")
    domain = T.Union([T.Unicode(allow_none=True, default_value=None), T.List(T.CFloat(allow_none=True, default_value=None), allow_none=True, default_value=None), T.List(T.Unicode(allow_none=True, default_value=None), allow_none=True, default_value=None)])
    exponent = T.CFloat(allow_none=True, default_value=None, help="""Sets the exponent of the scale transformation.""")
    includeRawDomain = T.Bool(allow_none=True, default_value=None, help="""Uses the source data range as scale domain instead of aggregated data for aggregate axis.""")
    nice = T.Union([T.Bool(allow_none=True, default_value=None), NiceTime(allow_none=True, default_value=None)])
    padding = T.CFloat(allow_none=True, default_value=None, help="""Applies spacing among ordinal elements in the scale range.""")
    range = T.Union([T.Unicode(allow_none=True, default_value=None), T.List(T.CFloat(allow_none=True, default_value=None), allow_none=True, default_value=None), T.List(T.Unicode(allow_none=True, default_value=None), allow_none=True, default_value=None)])
    round = T.Bool(allow_none=True, default_value=None, help="""If true, rounds numeric output values to integers.""")
    type = ScaleType(allow_none=True, default_value=None)
    zero = T.Bool(allow_none=True, default_value=None, help="""If true, ensures that a zero baseline value is included in the scale domain.""")

