# This file auto-generated by altair.schema.parser.write_files().
# do not modify directly.

import traitlets as T
from ..baseobject import BaseObject
from .verticalalign import VerticalAlign
from .fontweight import FontWeight
from .shape import Shape
from .stackoffset import StackOffset
from .fontstyle import FontStyle
from .horizontalalign import HorizontalAlign


class MarkConfig(BaseObject):
    strokeDash = T.List(T.CFloat(default_value=None, allow_none=True), default_value=None, allow_none=True, help="""An array of alternating stroke, space lengths for creating dashed or dotted lines.""")
    tickSize = T.CFloat(default_value=None, allow_none=True, help="""The width of the ticks.""")
    dy = T.CFloat(default_value=None, allow_none=True, help="""The vertical offset, in pixels, between the text label and its anchor point.""")
    baseline = T.Instance(VerticalAlign, default_value=None, allow_none=True, help="""The vertical alignment of the text.""")
    size = T.CFloat(default_value=None, allow_none=True, help="""The pixel area each the point.""")
    fontWeight = T.Instance(FontWeight, default_value=None, allow_none=True, help="""The font weight.""")
    strokeWidth = T.CFloat(default_value=None, allow_none=True, min=0)
    shape = T.Instance(Shape, default_value=None, allow_none=True, help="""The symbol shape to use.""")
    tickThickness = T.CFloat(default_value=None, allow_none=True, help="""Thickness of the tick mark.""")
    tension = T.CFloat(default_value=None, allow_none=True, help="""Depending on the interpolation type, sets the tension parameter.""")
    shortTimeLabels = T.Bool(default_value=None, allow_none=True, help="""Whether month names and weekday names should be abbreviated.""")
    stacked = T.Instance(StackOffset, default_value=None, allow_none=True)
    text = T.Unicode(default_value=None, allow_none=True, help="""Placeholder Text.""")
    theta = T.CFloat(default_value=None, allow_none=True, help="""Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties.""")
    fillOpacity = T.CFloat(default_value=None, max=1, allow_none=True, min=0)
    interpolate = T.Unicode(default_value=None, allow_none=True, help="""The line interpolation method to use.""")
    applyColorToBackground = T.Bool(default_value=None, allow_none=True, help="""Apply color field to background color instead of the text.""")
    radius = T.CFloat(default_value=None, allow_none=True, help="""Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.""")
    dx = T.CFloat(default_value=None, allow_none=True, help="""The horizontal offset, in pixels, between the text label and its anchor point.""")
    filled = T.Bool(default_value=None, allow_none=True, help="""Whether the shape\'s color should be used as fill color instead of stroke color.""")
    stroke = T.Unicode(default_value=None, allow_none=True, help="""Default Stroke Color.""")
    strokeOpacity = T.CFloat(default_value=None, max=1, allow_none=True, min=0)
    strokeDashOffset = T.CFloat(default_value=None, allow_none=True, help="""The offset (in pixels) into which to begin drawing with the stroke dash array.""")
    orient = T.Unicode(default_value=None, allow_none=True, help="""The orientation of a non-stacked bar, tick, area, and line charts.""")
    fontStyle = T.Instance(FontStyle, default_value=None, allow_none=True, help="""The font style.""")
    color = T.Unicode(default_value=None, allow_none=True, help="""Default color.""")
    format = T.Unicode(default_value=None, allow_none=True, help="""The formatting pattern for text value.""")
    fill = T.Unicode(default_value=None, allow_none=True, help="""Default Fill Color.""")
    font = T.Unicode(default_value=None, allow_none=True, help="""The typeface to set the text in.""")
    opacity = T.CFloat(default_value=None, max=1, allow_none=True, min=0)
    barSize = T.CFloat(default_value=None, allow_none=True, help="""The size of the bars.""")
    barThinSize = T.CFloat(default_value=None, allow_none=True, help="""The size of the bars on continuous scales.""")
    fontSize = T.CFloat(default_value=None, allow_none=True, help="""The font size, in pixels.""")
    align = T.Instance(HorizontalAlign, default_value=None, allow_none=True, help="""The horizontal alignment of the text.""")
    angle = T.CFloat(default_value=None, allow_none=True, help="""The rotation angle of the text, in degrees.""")

