# This file auto-generated by `_schema_parser.py`.
# Do not modify this file directly.

import traitlets as T
from ..baseobject import BaseObject
from .fontstyle import FontStyle
from .fontweight import FontWeight
from .horizontalalign import HorizontalAlign
from .shape import Shape
from .stackoffset import StackOffset
from .verticalalign import VerticalAlign


class MarkConfig(BaseObject):
    align = HorizontalAlign(allow_none=True, default_value=None, help="""The horizontal alignment of the text.""")
    angle = T.CFloat(allow_none=True, default_value=None, help="""The rotation angle of the text, in degrees.""")
    applyColorToBackground = T.Bool(allow_none=True, default_value=None, help="""Apply color field to background color instead of the text.""")
    barSize = T.CFloat(allow_none=True, default_value=None, help="""The size of the bars.""")
    barThinSize = T.CFloat(allow_none=True, default_value=None, help="""The size of the bars on continuous scales.""")
    baseline = VerticalAlign(allow_none=True, default_value=None, help="""The vertical alignment of the text.""")
    color = T.Unicode(allow_none=True, default_value=None, help="""Default color.""")
    dx = T.CFloat(allow_none=True, default_value=None, help="""The horizontal offset, in pixels, between the text label and its anchor point.""")
    dy = T.CFloat(allow_none=True, default_value=None, help="""The vertical offset, in pixels, between the text label and its anchor point.""")
    fill = T.Unicode(allow_none=True, default_value=None, help="""Default Fill Color.""")
    fillOpacity = T.CFloat(allow_none=True, default_value=None, max=1, min=0)
    filled = T.Bool(allow_none=True, default_value=None, help="""Whether the shape\'s color should be used as fill color instead of stroke color.""")
    font = T.Unicode(allow_none=True, default_value=None, help="""The typeface to set the text in.""")
    fontSize = T.CFloat(allow_none=True, default_value=None, help="""The font size, in pixels.""")
    fontStyle = FontStyle(allow_none=True, default_value=None, help="""The font style.""")
    fontWeight = FontWeight(allow_none=True, default_value=None, help="""The font weight.""")
    format = T.Unicode(allow_none=True, default_value=None, help="""The formatting pattern for text value.""")
    interpolate = T.Unicode(allow_none=True, default_value=None, help="""The line interpolation method to use.""")
    opacity = T.CFloat(allow_none=True, default_value=None, max=1, min=0)
    orient = T.Unicode(allow_none=True, default_value=None, help="""The orientation of a non-stacked bar, tick, area, and line charts.""")
    radius = T.CFloat(allow_none=True, default_value=None, help="""Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.""")
    shape = Shape(allow_none=True, default_value=None, help="""The symbol shape to use.""")
    shortTimeLabels = T.Bool(allow_none=True, default_value=None, help="""Whether month names and weekday names should be abbreviated.""")
    size = T.CFloat(allow_none=True, default_value=None, help="""The pixel area each the point.""")
    stacked = StackOffset(allow_none=True, default_value=None)
    stroke = T.Unicode(allow_none=True, default_value=None, help="""Default Stroke Color.""")
    strokeDash = T.List(T.CFloat(allow_none=True, default_value=None), allow_none=True, default_value=None, help="""An array of alternating stroke, space lengths for creating dashed or dotted lines.""")
    strokeDashOffset = T.CFloat(allow_none=True, default_value=None, help="""The offset (in pixels) into which to begin drawing with the stroke dash array.""")
    strokeOpacity = T.CFloat(allow_none=True, default_value=None, max=1, min=0)
    strokeWidth = T.CFloat(allow_none=True, default_value=None, min=0)
    tension = T.CFloat(allow_none=True, default_value=None, help="""Depending on the interpolation type, sets the tension parameter.""")
    text = T.Unicode(allow_none=True, default_value=None, help="""Placeholder Text.""")
    theta = T.CFloat(allow_none=True, default_value=None, help="""Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties.""")
    tickSize = T.CFloat(allow_none=True, default_value=None, help="""The width of the ticks.""")
    tickThickness = T.CFloat(allow_none=True, default_value=None, help="""Thickness of the tick mark.""")

