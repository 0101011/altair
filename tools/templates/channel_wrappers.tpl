# This file auto-generated by `generate_schema_interface.py`.
# Do not modify this file directly.

import traitlets as T
import pandas as pd

from ...utils import parse_shorthand, infer_vegalite_type
from ...utils import INV_TYPECODE_MAP, TYPE_ABBR

from .._interface import Type
{% for import_statement in objects|merge_imports -%}
  {{ import_statement }}
{% endfor %}

{% for object in objects -%}
class {{ object.name }}({{ object.base.name }}):
    """Wrapper for Vega-Lite {{ object.base.name }} definition.
    {{ object.base.description }}
    Attributes
    ----------
    shorthand: Unicode
        A shorthand description of the channel
    {% for attr in object.base.attributes -%}
    {{ attr.name }}: {% if attr.name == 'type' -%}
                          Union(Type, Unicode)
                     {%- else -%}
                          {{ attr.trait_descr}}
                     {%- endif %}
        {{ attr.short_description }}
    {% endfor -%}
    """
    # Traitlets
    shorthand = T.Unicode('')
    type = T.Union([Type(), T.Unicode()],
                   allow_none=True, default_value=None)

    @T.observe('shorthand')
    def _shorthand_changed(self, change):
        D = parse_shorthand(change['new'])
        for key, val in D.items():
            setattr(self, key, val)

    @T.observe('type')
    def _type_changed(self, change):
        new = change['new']
        if new in TYPE_ABBR:
            self.type = INV_TYPECODE_MAP[new]

    # Class Attributes
    skip = ['shorthand']

    # Class Methods
    {%- set comma = joiner(", ") %}
    def __init__(self, shorthand='', {% for attr in object.base.attributes %}{{ attr.name }}=None, {% endfor %}**kwargs):
        kwargs['shorthand'] = shorthand
        kwds = dict({% for attr in object.base.attributes %}{{ comma() }}{{ attr.name }}={{ attr.name }}{% endfor %})
        kwargs.update({k:v for k, v in kwds.items() if v is not None})
        super({{ object.name }}, self).__init__(**kwargs)

    def _finalize(self, data=None):
        """Finalize object: this involves inferring types if necessary"""
        if isinstance(data, pd.DataFrame):
            if not self.type and self.field in data:
                self.type = infer_vegalite_type(data[self.field])


{% endfor %}
