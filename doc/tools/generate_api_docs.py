"""
This script generates a hierarchy of sphinx files describing the API
of Altair objects, using the traitlets structure defined in the altair library.
"""


import types
from itertools import filterfalse
from operator import itemgetter

import jinja2
import traitlets

from ipykernel import kernelspec as ks
import nbformat
from nbformat.v4.nbbase import new_markdown_cell, new_code_cell, new_notebook

import os
import sys
sys.path.insert(1, os.path.abspath(os.path.join(os.path.dirname(__file__),
                                                '..')))
import altair

# Create a jinja filter to build an altair table
from jinja2 import Environment, Undefined

def sphinx_table(iterable, titles, lookup=None):

    sentinel = object()
    def _getattr(obj, attr, default=sentinel):
        if hasattr(obj, attr):
            return getattr(obj, attr)
        try:
            return obj[attr]
        except KeyError:
            if default is not sentinel:
                return default
            else:
                raise

    lookup = lookup or {}
    rows = [[str(_getattr(row, lookup.get(column, column)))
             for column in titles]
            for row in iterable]
    lengths = [[len(item) for item in row] for row in rows]
    maxlengths = [max(col) for col in zip(*lengths)]

    def pad(row, fill=' '):
        return '  '.join(item.ljust(length, fill)
                         for item, length in zip(row, maxlengths))

    div = pad(['=', '=', '='], '=')

    return '\n'.join([div, pad(titles), div] + list(map(pad, rows)) + [div])


build_env = Environment()
build_env.filters['sphinx_table'] = sphinx_table


FULL_TEMPLATE = """
.. This document is auto-generated by tools/generate_api_docs.py. Do not modify directly.

.. API-reference:

Altair API Reference
====================

Top-Level Objects
-----------------

{{ top_level }}


Other Objects
-------------

{{ other }}
"""


OBJ_TEMPLATE = """

.. _API-{{ obj.name }}:

{{ obj.name }}
{% for c in obj.name %}~{% endfor %}

{% if obj.description %}*{{ obj.description }}*{% endif %}

{{ obj.traits | sphinx_table(['Trait', 'Type', 'Description'], {'Trait':'name', 'Type':'type', 'Description':'help'}) }}
"""


VEGALITE_DOC_URL = 'http://vega.github.io/vega-lite/docs/'
VEGALITE_DOC_PAGES = {'data': 'data.html',
                      'transform': 'transform.html',
                      'mark': 'mark.html',
                      'encoding': 'encoding.html',
                      'aggregate': 'aggregate.html',
                      'bin': 'bin.html',
                      'sort': 'sort.html',
                      'timeunit': 'timeunit.html',
                      'scale': 'scale.html',
                      'axis': 'axis.html',
                      'legend': 'legend.html',
                      'config': 'config.html#top-level-config',
                      'cellconfig': 'config.html#cell-config',
                      'markconfig': 'config.html#mark-config',
                      'scaleconfig': 'config.html#scale-config',
                      'axisconfig': 'config.html#axis-config',
                      'legendconfig': 'config.html#legend-config',
                      'facetconfig': 'config.html#facet-config'}

for channel in ['color', 'column', 'detail', 'opacity', 'order', 'path',
                'row', 'shape', 'size', 'text', 'x', 'y']:
    VEGALITE_DOC_PAGES[channel] = 'encoding.html#def'


def _get_trait_info(name, trait):
    """Get a dictionary of info for an object trait"""
    type_ = trait.info()
    help_ = trait.help

    if isinstance(trait, traitlets.List):
        trait_info = _get_trait_info('', trait._trait)
        type_ = 'list of {0}'.format(trait_info['type'])
    elif isinstance(trait, traitlets.Enum):
        values = trait.values
        if all(isinstance(val, str) for val in values):
            type_ = 'string'
            help_ += ' One of {0}.'.format(values)
    elif isinstance(trait, traitlets.Union):
        trait_info = [_get_trait_info('', t) for t in trait.trait_types]
        type_ = ' or '.join(info['type'] for info in trait_info)
        help_ += '/'.join([info['help'] for info in trait_info
                           if info['help'] != '--'])
    elif isinstance(trait, traitlets.Instance):
        if issubclass(trait.klass, traitlets.HasTraits):
            type_ = ':ref:`API-{0}`'.format(trait.klass.__name__)

    type_ = type_.replace('a ', '')
    type_ = type_.replace('unicode string', 'string')
    return {'name': name, 'help': help_ or '--', 'type': type_ or '--'}


def _get_object_info(obj):
    """Get a dictionary of info for an object, suitable for the template"""
    D = {}
    name = obj.__name__
    D['name'] = name

    if name.lower() in VEGALITE_DOC_PAGES:
        D['description'] = ('Relevant Vega-Lite Documentation: '
                            '{0}'.format(VEGALITE_DOC_URL +
                                         VEGALITE_DOC_PAGES[name.lower()]))

    #if obj.__doc__:
    #    D['description'] = obj.__doc__.splitlines()[0]
    #else:
    #    D['description'] = 'no description available'

    D['traits'] = [_get_trait_info(name, trait)
                   for name, trait in sorted(obj.class_traits().items())]

    return D


def altair_nbdoc(obj):
    """Generate documentation for all objects in the namespace"""
    if obj is altair:
        for sub_obj in dir(obj):
            if sub_obj.startswith('_'):
                continue
            yield from altair_nbdoc(getattr(obj, sub_obj))
    elif isinstance(obj, type) and issubclass(obj, traitlets.HasTraits):
        yield _get_object_info(obj)

def create_doc_page(filename):
    is_toplevel = lambda obj: 'Chart' in obj['name']
    content = sorted(altair_nbdoc(altair), key=itemgetter('name'))

    obj_template = build_env.from_string(OBJ_TEMPLATE)
    full_template = build_env.from_string(FULL_TEMPLATE)

    top_level = '\n\n'.join(obj_template.render(obj=obj)
                            for obj in filter(is_toplevel, content))
    other = '\n\n'.join(obj_template.render(obj=obj)
                        for obj in filterfalse(is_toplevel, content))

    content = full_template.render(top_level=top_level, other=other)

    with open(filename, 'w') as f:
        f.write(content)


if __name__ == '__main__':
    create_doc_page('API-reference.rst')
